# file: matrix-build.yml
# version: 1.0.0
# guid: 4a5b6c7d-8e9f-0a1b-2c3d-4e5f6a7b8c9d

name: Matrix Build

on:
  workflow_call:
    secrets:
      GITHUB_TOKEN:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Multi-platform build matrix
  matrix-build:
    name: Build (${{ matrix.os }}, ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            arch: amd64
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            arch: arm64
            goos: linux
            goarch: arm64
          
          # macOS builds
          - os: macos-latest
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: macos-latest
            arch: arm64
            goos: darwin
            goarch: arm64
          
          # Windows builds
          - os: windows-latest
            arch: amd64
            goos: windows
            goarch: amd64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Set up Node.js (for frontend assets)
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: npm
          cache-dependency-path: |
            **/package-lock.json
            webui/package-lock.json

      - name: Install dependencies
        run: go mod download

      - name: Build frontend assets
        run: |
          if [ -d "webui" ] && [ -f "webui/package.json" ]; then
            cd webui
            npm ci --legacy-peer-deps
            npm run build
            cd ..
          fi
        shell: bash

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          # Determine binary name and extension
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="subtitle-manager.exe"
          else
            BINARY_NAME="subtitle-manager"
          fi
          
          # Create output directory
          mkdir -p dist/${{ matrix.goos }}_${{ matrix.goarch }}
          
          # Build binary
          go build -v -ldflags="-w -s" -o "dist/${{ matrix.goos }}_${{ matrix.goarch }}/${BINARY_NAME}" ./cmd/subtitle-manager
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: subtitle-manager-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/${{ matrix.goos }}_${{ matrix.goarch }}/
          retention-days: 30

  # Docker multi-arch build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build Docker image (test)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: subtitle-manager:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm subtitle-manager:test --help

  # Build status summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [matrix-build, docker-build]
    if: always()
    steps:
      - name: Generate build summary
        run: |
          echo "# 🏗️ Matrix Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.matrix-build.result }}" == "success" ]]; then
            echo "✅ **Matrix Build**: All platforms built successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Matrix Build**: Some builds failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "✅ **Docker Build**: Multi-arch build successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Artifacts**: Binary builds available for download" >> $GITHUB_STEP_SUMMARY