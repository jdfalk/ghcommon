# file: .github/workflows/reusable-ci.yml
# version: 1.3.0
# guid: reusable-ci-2025-09-24-core-workflow

name: Reusable CI Workflow

on:
  workflow_call:
    inputs:
      go-version:
        description: "Go version to use"
        required: false
        type: string
        default: "1.24"
      node-version:
        description: "Node.js version to use"
        required: false
        type: string
        default: "22"
      python-version:
        description: "Python version to use"
        required: false
        type: string
        default: "3.13"
      rust-version:
        description: "Rust version to use"
        required: false
        type: string
        default: "1.76"
      coverage-threshold:
        description: "Coverage threshold percentage"
        required: false
        type: string
        default: "80"
      skip-protobuf:
        description: "Skip protobuf generation"
        required: false
        type: boolean
        default: false
      skip-tests:
        description: "Skip running tests"
        required: false
        type: boolean
        default: false
      skip-linting:
        description: "Skip linting"
        required: false
        type: boolean
        default: false
    outputs:
      go-files:
        description: "Whether Go files were detected"
        value: ${{ jobs.detect-changes.outputs.go-files }}
      python-files:
        description: "Whether Python files were detected"
        value: ${{ jobs.detect-changes.outputs.python-files }}
      rust-files:
        description: "Whether Rust files were detected"
        value: ${{ jobs.detect-changes.outputs.rust-files }}
      frontend-files:
        description: "Whether frontend files were detected"
        value: ${{ jobs.detect-changes.outputs.frontend-files }}
      docker-files:
        description: "Whether Docker files were detected"
        value: ${{ jobs.detect-changes.outputs.docker-files }}
      docs-files:
        description: "Whether documentation files were detected"
        value: ${{ jobs.detect-changes.outputs.docs-files }}
      workflows-files:
        description: "Whether workflow files were detected"
        value: ${{ jobs.detect-changes.outputs.workflows-files }}
      lint-files:
        description: "Whether linter configuration files were detected"
        value: ${{ jobs.detect-changes.outputs.lint-files }}

permissions:
  contents: write
  actions: write
  checks: write
  packages: write
  security-events: write
  id-token: write
  attestations: write

jobs:
  load-config:
    name: Load Repository Configuration
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.load.outputs.config }}
      has-config: ${{ steps.load.outputs.has-config }}
      go-matrix: ${{ steps.matrices.outputs.go-matrix }}
      python-matrix: ${{ steps.matrices.outputs.python-matrix }}
      rust-matrix: ${{ steps.matrices.outputs.rust-matrix }}
      frontend-matrix: ${{ steps.matrices.outputs.frontend-matrix }}
      coverage-threshold: ${{ steps.matrices.outputs.coverage-threshold }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Load repository configuration
        id: load
        env:
          CONFIG_FILE: .github/repository-config.yml
        run: python3 .github/workflows/scripts/load_repository_config.py

      - name: Generate language matrices
        id: matrices
        env:
          REPOSITORY_CONFIG: ${{ steps.load.outputs.config }}
          FALLBACK_GO_VERSION: ${{ inputs.go-version }}
          FALLBACK_PYTHON_VERSION: ${{ inputs.python-version }}
          FALLBACK_RUST_VERSION: ${{ inputs.rust-version }}
          FALLBACK_NODE_VERSION: ${{ inputs.node-version }}
          FALLBACK_COVERAGE_THRESHOLD: ${{ inputs.coverage-threshold }}
        run: python3 .github/workflows/scripts/ci_workflow.py generate-matrices

  # Detect what files changed to optimize workflow execution
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    needs: load-config
    outputs:
      go-files: ${{ steps.changes.outputs.go_files }}
      python-files: ${{ steps.changes.outputs.python_files }}
      rust-files: ${{ steps.changes.outputs.rust_files }}
      frontend-files: ${{ steps.changes.outputs.frontend_files }}
      docker-files: ${{ steps.changes.outputs.docker_files }}
      docs-files: ${{ steps.changes.outputs.docs_files }}
      workflow-files: ${{ steps.changes.outputs.workflow_yaml }}
      workflows-files: ${{ steps.changes.outputs.workflow_yaml }}
      workflows-scripts: ${{ steps.changes.outputs.workflow_scripts }}
      lint-files: ${{ steps.changes.outputs.lint_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            go_files:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
            python_files:
              - '**/*.py'
              - 'requirements*.txt'
              - 'pyproject.toml'
              - 'setup.py'
              - 'setup.cfg'
            rust_files:
              - '**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
            frontend_files:
              - '**/*.js'
              - '**/*.ts'
              - '**/*.jsx'
              - '**/*.tsx'
              - '**/*.vue'
              - '**/*.svelte'
              - '**/*.html'
              - '**/*.css'
              - '**/*.scss'
              - '**/*.sass'
              - '**/*.less'
              - 'package*.json'
              - 'yarn.lock'
              - 'pnpm-lock.yaml'
            docker_files:
              - 'Dockerfile*'
              - 'docker-compose*.yml'
              - 'docker-compose*.yaml'
              - '.dockerignore'
            docs_files:
              - '**/*.md'
              - 'docs/**'
              - '*.md'
            workflow_yaml:
              - '.github/workflows/**'
            workflow_scripts:
              - '.github/actions/**'
              - '.github/scripts/**'
            lint_files:
              - 'super-linter-*.env'
              - '.markdownlint.json'
              - '.yaml-lint.yml'
              - 'clippy.toml'
              - 'rustfmt.toml'
              - '.eslintrc.*'
              - '.pylintrc'
              - '.python-black'
              - '.prettierrc*'
              - '.flake8'

      - name: Debug change outputs
        env:
          CI_GO_FILES: ${{ steps.changes.outputs.go_files }}
          CI_PYTHON_FILES: ${{ steps.changes.outputs.python_files }}
          CI_RUST_FILES: ${{ steps.changes.outputs.rust_files }}
          CI_FRONTEND_FILES: ${{ steps.changes.outputs.frontend_files }}
          CI_DOCKER_FILES: ${{ steps.changes.outputs.docker_files }}
          CI_DOCS_FILES: ${{ steps.changes.outputs.docs_files }}
          CI_WORKFLOW_FILES: ${{ steps.changes.outputs.workflow_yaml }}
          CI_WORKFLOW_YAML_FILES: ${{ steps.changes.outputs.workflow_yaml }}
          CI_WORKFLOW_SCRIPT_FILES: ${{ steps.changes.outputs.workflow_scripts }}
          CI_LINT_FILES: ${{ steps.changes.outputs.lint_files }}
        run: python3 .github/workflows/scripts/ci_workflow.py debug-filter

  workflow-lint:
    name: Workflow Lint
    needs: detect-changes
    if: needs.detect-changes.outputs.workflow-files == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
          check-latest: true

      - name: Install actionlint
        run: |
          set -euo pipefail
          go install github.com/rhysd/actionlint/cmd/actionlint@v1.7.1
          echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"

      - name: Run actionlint
        id: lint
        run: |
          set -euo pipefail
          ACTIONLINT_BIN="$(go env GOPATH)/bin/actionlint"
          "$ACTIONLINT_BIN" --color never | tee actionlint.log

      - name: Publish workflow summary
        if: always()
        run: |
          echo "## Workflow Lint" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          if [ -s actionlint.log ]; then
            echo '```text' >> "$GITHUB_STEP_SUMMARY"
            cat actionlint.log >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          else
            echo "✅ No workflow issues detected." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload actionlint log
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: workflow-lint-report
          path: actionlint.log
          if-no-files-found: ignore

  workflow-scripts:
    name: Workflow Scripts
    needs: detect-changes
    if: needs.detect-changes.outputs.workflows-scripts == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ inputs.python-version }}

      - name: Lint Python workflow scripts
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          python -m pip install ruff black
          if find .github/scripts -maxdepth 1 -name "*.py" | head -n 1 | grep -q .; then
            ruff check .github/scripts
            black --check .github/scripts
            python -m compileall .github/scripts
          else
            echo "No Python workflow scripts detected."
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ inputs.node-version }}
          cache: npm

      - name: Lint JavaScript/TypeScript workflow scripts
        run: |
          set -euo pipefail
          mapfile -d '' JS_TS_FILES < <(find .github -type f \( -path "./.github/scripts/*" -o -path "./.github/actions/*" \) \( -name "*.js" -o -name "*.ts" -o -name "*.tsx" \) -print0)
          if [ ${#JS_TS_FILES[@]} -gt 0 ]; then
            TARGET_DIRS=".github/scripts"
            if [ -d ".github/actions" ]; then
              TARGET_DIRS="$TARGET_DIRS .github/actions"
            fi
            npx --yes eslint@9.13.0 --config .eslintrc.yml --ext .js,.ts,.tsx $TARGET_DIRS
            printf '%s\0' "${JS_TS_FILES[@]}" | xargs -0 npx --yes prettier@3.3.3 --check
          else
            echo "No JavaScript/TypeScript workflow scripts detected."
          fi

      - name: Publish workflow script summary
        if: always()
        run: |
          echo "## Workflow Script Lint" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "- Python scripts linted with Ruff and Black." >> "$GITHUB_STEP_SUMMARY"
          echo "- JavaScript/TypeScript scripts linted with ESLint and checked with Prettier." >> "$GITHUB_STEP_SUMMARY"

  # Protobuf generation (if applicable)
  protobuf-generation:
    name: Generate Protobuf
    if: |
      !inputs.skip-protobuf &&
      (contains(github.event.head_commit.message, '[protobuf]') ||
       contains(github.event.head_commit.message, '[generate]') ||
       contains(github.event.head_commit.message, '[buf]'))
    uses: ./.github/workflows/reusable-protobuf.yml
    secrets: inherit

  # Language-specific build and test jobs
  go-ci:
    name: Go CI
    needs: [load-config, detect-changes]
    if: needs.detect-changes.outputs.go-files == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.load-config.outputs.go-matrix) }}
    runs-on: ${{ matrix.os }}
    env:
      REPOSITORY_CONFIG: ${{ needs.load-config.outputs.config }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Build Go project
        run: python3 .github/workflows/scripts/ci_workflow.py go-setup

      - name: Test Go project
        if: ${{ !inputs.skip-tests }}
        env:
          COVERAGE_THRESHOLD: ${{ inputs.coverage-threshold || needs.load-config.outputs.coverage-threshold }}
        run: python3 .github/workflows/scripts/ci_workflow.py go-test

  python-ci:
    name: Python CI
    needs: [load-config, detect-changes]
    if: needs.detect-changes.outputs.python-files == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.load-config.outputs.python-matrix) }}
    runs-on: ${{ matrix.os }}
    env:
      REPOSITORY_CONFIG: ${{ needs.load-config.outputs.config }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install Python dependencies
        run: python3 .github/workflows/scripts/ci_workflow.py python-install

      - name: Lint Python code
        if: ${{ !inputs.skip-linting }}
        run: python3 .github/workflows/scripts/ci_workflow.py python-lint

      - name: Test Python code
        if: ${{ !inputs.skip-tests }}
        run: python3 .github/workflows/scripts/ci_workflow.py python-run-tests

  rust-ci:
    name: Rust CI
    needs: [load-config, detect-changes]
    if: needs.detect-changes.outputs.rust-files == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.load-config.outputs.rust-matrix) }}
    runs-on: ${{ matrix.os }}
    env:
      REPOSITORY_CONFIG: ${{ needs.load-config.outputs.config }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust-version }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Format Rust code
        if: ${{ !inputs.skip-linting }}
        run: python3 .github/workflows/scripts/ci_workflow.py rust-format

      - name: Lint Rust code
        if: ${{ !inputs.skip-linting }}
        run: python3 .github/workflows/scripts/ci_workflow.py rust-clippy

      - name: Build Rust project
        run: python3 .github/workflows/scripts/ci_workflow.py rust-build

      - name: Test Rust project
        if: ${{ !inputs.skip-tests }}
        run: python3 .github/workflows/scripts/ci_workflow.py rust-test

  frontend-ci:
    name: Frontend CI
    needs: [load-config, detect-changes]
    if: needs.detect-changes.outputs.frontend-files == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.load-config.outputs.frontend-matrix) }}
    runs-on: ${{ matrix.os }}
    env:
      REPOSITORY_CONFIG: ${{ needs.load-config.outputs.config }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install dependencies
        run: python3 .github/workflows/scripts/ci_workflow.py frontend-install

      - name: Lint frontend code
        if: ${{ !inputs.skip-linting }}
        env:
          FRONTEND_SCRIPT: lint
          FRONTEND_SUCCESS_MESSAGE: "✅ Linting passed"
          FRONTEND_FAILURE_MESSAGE: "❌ Linting failed or not configured"
        run: python3 .github/workflows/scripts/ci_workflow.py frontend-run

      - name: Build frontend
        env:
          FRONTEND_SCRIPT: build
          FRONTEND_SUCCESS_MESSAGE: "✅ Build successful"
          FRONTEND_FAILURE_MESSAGE: "ℹ️ No build script configured"
        run: python3 .github/workflows/scripts/ci_workflow.py frontend-run

      - name: Test frontend
        if: ${{ !inputs.skip-tests }}
        env:
          FRONTEND_SCRIPT: test
          FRONTEND_SUCCESS_MESSAGE: "✅ Tests passed"
          FRONTEND_FAILURE_MESSAGE: "ℹ️ No tests configured"
        run: python3 .github/workflows/scripts/ci_workflow.py frontend-run

  # Summary job
  ci-summary:
    name: CI Summary
    needs:
      [
        detect-changes,
        workflow-lint,
        workflow-scripts,
        go-ci,
        python-ci,
        rust-ci,
        frontend-ci,
      ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Generate summary
        env:
          JOB_DETECT_CHANGES: ${{ needs.detect-changes.result || 'skipped' }}
          JOB_WORKFLOW_LINT: ${{ needs.workflow-lint.result || 'skipped' }}
          JOB_WORKFLOW_SCRIPTS: ${{ needs.workflow-scripts.result || 'skipped' }}
          JOB_GO: ${{ needs.go-ci.result || 'skipped' }}
          JOB_PYTHON: ${{ needs.python-ci.result || 'skipped' }}
          JOB_RUST: ${{ needs.rust-ci.result || 'skipped' }}
          JOB_FRONTEND: ${{ needs.frontend-ci.result || 'skipped' }}
          JOB_DOCKER: skipped
          JOB_DOCS: skipped
          CI_GO_FILES: ${{ needs.detect-changes.outputs.go-files }}
          CI_PYTHON_FILES: ${{ needs.detect-changes.outputs.python-files }}
          CI_RUST_FILES: ${{ needs.detect-changes.outputs.rust-files }}
          CI_FRONTEND_FILES: ${{ needs.detect-changes.outputs.frontend-files }}
          CI_DOCKER_FILES: ${{ needs.detect-changes.outputs.docker-files }}
          CI_DOCS_FILES: ${{ needs.detect-changes.outputs.docs-files }}
          CI_WORKFLOW_FILES: ${{ needs.detect-changes.outputs.workflow-files }}
          CI_WORKFLOW_YAML_FILES: ${{ needs.detect-changes.outputs.workflows-files }}
          CI_WORKFLOW_SCRIPT_FILES: ${{ needs.detect-changes.outputs.workflows-scripts }}
          CI_LINT_FILES: ${{ needs.detect-changes.outputs.lint-files }}
        run: python3 .github/workflows/scripts/ci_workflow.py generate-ci-summary

      - name: Check overall status
        env:
          JOB_WORKFLOW_LINT: ${{ needs.workflow-lint.result || 'skipped' }}
          JOB_WORKFLOW_SCRIPTS: ${{ needs.workflow-scripts.result || 'skipped' }}
          JOB_GO: ${{ needs.go-ci.result || 'skipped' }}
          JOB_PYTHON: ${{ needs.python-ci.result || 'skipped' }}
          JOB_RUST: ${{ needs.rust-ci.result || 'skipped' }}
          JOB_FRONTEND: ${{ needs.frontend-ci.result || 'skipped' }}
          JOB_DOCKER: skipped
          JOB_DOCS: skipped
        run: python3 .github/workflows/scripts/ci_workflow.py check-ci-status
