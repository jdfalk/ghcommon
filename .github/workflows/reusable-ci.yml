# file: .github/workflows/reusable-ci.yml
# version: 2.0.4
# guid: 7e2b1c4d-5f6a-4b7c-8e9f-0a1b2c3d4e5f

# DO NOT EDIT: This file is managed centrally in ghcommon repository
# To update: Edit the version in jdfalk/ghcommon and it will be synced to all repos

name: Universal CI/CD

on:
  workflow_call:
    inputs:
      python-version:
        description: "Python version to use (if Python present)"
        required: false
        default: "3.12"
        type: string
      node-version:
        description: "Node.js version to use (if JS/TS present)"
        required: false
        default: "20"
        type: string
      go-version:
        description: "Go version to use (if Go present)"
        required: false
        default: "1.22"
        type: string
      enable-dependency-submission:
        description: "Enable dependency submission to GitHub (true/false)"
        required: false
        default: true
        type: boolean
      run-lint:
        description: "Run linters (true/false) - Uses Super Linter for comprehensive code quality checks"
        required: false
        default: true
        type: boolean
      run-test:
        description: "Run tests (true/false)"
        required: false
        default: true
        type: boolean
      run-build:
        description: "Run build step (true/false)"
        required: false
        default: false
        type: boolean
      enable-backend-frontend:
        description: "Enable backend/frontend change detection and split jobs"
        required: false
        default: false
        type: boolean
      backend-path:
        description: "Relative path to backend root (default: .)"
        required: false
        default: "."
        type: string
      frontend-path:
        description: "Relative path to frontend root (default: .)"
        required: false
        default: "."
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  super-linter:
    if: inputs.run-lint == true
    uses: ./.github/workflows/reusable-super-linter.yml
    with:
      validate-all-codebase: true
      default-branch: "main"
      config-file: ".github/super-linter.env"
      enable-auto-fix: true
      auto-commit-fixes: true
      show-detailed-summary: true
    secrets:
      github-token: ${{ secrets.JF_CI_GH_PAT || secrets.GITHUB_TOKEN }}

  changes:
    if: inputs.enable-backend-frontend == true
    needs: super-linter
    runs-on: ubuntu-latest
    # Permissions removed - should be set in calling workflow
    # See: https://docs.github.com/en/actions/using-workflows/reusing-workflows#supported-keywords-for-jobs-that-call-a-reusable-workflow
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # Ensure we have the base ref for comparison
          ref: ${{ github.head_ref || github.ref }}
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          # Let paths-filter automatically determine the base reference
          filters: |
            backend:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
              - 'pkg/**'
              - 'cmd/**'
              - 'scripts/**'
              - '.github/workflows/backend.yml'
            frontend:
              - 'webui/**'
              - '.github/workflows/frontend.yml'

  backend:
    if: inputs.enable-backend-frontend == true && (needs.changes.outputs.backend == 'true' || github.event_name == 'push')
    needs: changes
    runs-on: ubuntu-latest
    # Permissions removed - should be set in calling workflow
    # See: https://docs.github.com/en/actions/using-workflows/reusing-workflows#supported-keywords-for-jobs-that-call-a-reusable-workflow
    defaults:
      run:
        working-directory: ${{ inputs.backend-path }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      # --- Go Setup & Test ---
      - name: Set up Go
        if: hashFiles(format('{0}/**/*.go', inputs.backend-path)) != ''
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}

      - name: Go mod tidy
        if: hashFiles(format('{0}/**/go.mod', inputs.backend-path)) != ''
        run: go mod tidy

      - name: Go build
        if: hashFiles(format('{0}/**/*.go', inputs.backend-path)) != '' && inputs.run-build == true
        run: go build ./...

      - name: Go test
        if: hashFiles(format('{0}/**/*.go', inputs.backend-path)) != '' && inputs.run-test == true
        run: go test -v ./...

      # --- Python Setup & Test ---
      - name: Set up Python
        if: hashFiles(format('{0}/**/*.py', inputs.backend-path)) != ''
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install Python dependencies
        if: hashFiles(format('{0}/requirements*.txt', inputs.backend-path)) != ''
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          # Prefer a dev requirements file if present; otherwise use the first requirements*.txt
          if [ -f "requirements-dev.txt" ]; then
            REQ_FILE="requirements-dev.txt"
          elif [ -f "requirements.txt" ]; then
            REQ_FILE="requirements.txt"
          else
            REQ_FILE=$(ls -1 requirements*.txt | head -n1)
          fi
          echo "Installing Python dependencies from $REQ_FILE"
          pip install -r "$REQ_FILE"
