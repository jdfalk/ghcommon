# file: .github/workflows/reusable-ci.yml
# version: 1.1.0
# guid: reusable-ci-2025-09-24-core-workflow

name: Reusable CI Workflow

on:
  workflow_call:
    inputs:
      go-version:
        description: "Go version to use"
        required: false
        type: string
        default: "1.24"
      node-version:
        description: "Node.js version to use"
        required: false
        type: string
        default: "22"
      python-version:
        description: "Python version to use"
        required: false
        type: string
        default: "3.13"
      rust-version:
        description: "Rust version to use"
        required: false
        type: string
        default: "1.76"
      coverage-threshold:
        description: "Coverage threshold percentage"
        required: false
        type: string
        default: "80"
      skip-protobuf:
        description: "Skip protobuf generation"
        required: false
        type: boolean
        default: false
      skip-tests:
        description: "Skip running tests"
        required: false
        type: boolean
        default: false
      skip-linting:
        description: "Skip linting"
        required: false
        type: boolean
        default: false
    outputs:
      go-files:
        description: "Whether Go files were detected"
        value: ${{ jobs.detect-changes.outputs.go-files }}
      python-files:
        description: "Whether Python files were detected"
        value: ${{ jobs.detect-changes.outputs.python-files }}
      rust-files:
        description: "Whether Rust files were detected"
        value: ${{ jobs.detect-changes.outputs.rust-files }}
      frontend-files:
        description: "Whether frontend files were detected"
        value: ${{ jobs.detect-changes.outputs.frontend-files }}
      docker-files:
        description: "Whether Docker files were detected"
        value: ${{ jobs.detect-changes.outputs.docker-files }}
      docs-files:
        description: "Whether documentation files were detected"
        value: ${{ jobs.detect-changes.outputs.docs-files }}
      workflows-files:
        description: "Whether workflow files were detected"
        value: ${{ jobs.detect-changes.outputs.workflows-files }}

permissions:
  contents: write
  actions: write
  checks: write
  packages: write
  security-events: write
  id-token: write
  attestations: write

jobs:
  # Detect what files changed to optimize workflow execution
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      go-files: ${{ steps.changes.outputs.go_files }}
      python-files: ${{ steps.changes.outputs.python_files }}
      rust-files: ${{ steps.changes.outputs.rust_files }}
      frontend-files: ${{ steps.changes.outputs.frontend_files }}
      docker-files: ${{ steps.changes.outputs.docker_files }}
      docs-files: ${{ steps.changes.outputs.docs_files }}
      workflows-files: ${{ steps.changes.outputs.workflow_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            go_files:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
            python_files:
              - '**/*.py'
              - 'requirements*.txt'
              - 'pyproject.toml'
              - 'setup.py'
              - 'setup.cfg'
            rust_files:
              - '**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
            frontend_files:
              - '**/*.js'
              - '**/*.ts'
              - '**/*.jsx'
              - '**/*.tsx'
              - '**/*.vue'
              - '**/*.svelte'
              - '**/*.html'
              - '**/*.css'
              - '**/*.scss'
              - '**/*.sass'
              - '**/*.less'
              - 'package*.json'
              - 'yarn.lock'
              - 'pnpm-lock.yaml'
            docker_files:
              - 'Dockerfile*'
              - 'docker-compose*.yml'
              - 'docker-compose*.yaml'
              - '.dockerignore'
            docs_files:
              - '**/*.md'
              - 'docs/**'
              - '*.md'
            workflow_files:
              - '.github/workflows/**'
              - '.github/actions/**'

  # Protobuf generation (if applicable)
  protobuf-generation:
    name: Generate Protobuf
    if: |
      !inputs.skip-protobuf &&
      (contains(github.event.head_commit.message, '[protobuf]') ||
       contains(github.event.head_commit.message, '[generate]') ||
       contains(github.event.head_commit.message, '[buf]'))
    uses: ./.github/workflows/reusable-protobuf.yml
    secrets: inherit

  # Language-specific build and test jobs
  go-ci:
    name: Go CI
    needs: detect-changes
    if: needs.detect-changes.outputs.go-files == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - name: Build Go project
        run: |
          if [ -f go.mod ]; then
            go mod download
            go build -v ./...
          fi

      - name: Test Go project
        if: ${{ !inputs.skip-tests }}
        run: |
          if [ -f go.mod ]; then
            go test -v -race -coverprofile=coverage.out ./...
          fi

      - name: Check Go coverage
        if: ${{ !inputs.skip-tests }}
        run: |
          if [ -f coverage.out ]; then
            COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
            echo "Coverage: ${COVERAGE}%"
            if (( $(echo "$COVERAGE < ${{ inputs.coverage-threshold }}" | bc -l) )); then
              echo "Coverage ${COVERAGE}% is below threshold ${{ inputs.coverage-threshold }}%"
              exit 1
            fi
          fi

  python-ci:
    name: Python CI
    needs: detect-changes
    if: needs.detect-changes.outputs.python-files == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: pip

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi
          if [ -f pyproject.toml ] || [ -f setup.py ]; then
            pip install -e .
          fi

      - name: Lint Python code
        if: ${{ !inputs.skip-linting }}
        run: |
          pip install flake8 black isort
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only .

      - name: Test Python code
        if: ${{ !inputs.skip-tests }}
        run: |
          pip install pytest pytest-cov
          if [ -d tests ]; then
            pytest --cov --cov-report=xml --cov-report=term-missing
          fi

  rust-ci:
    name: Rust CI
    needs: detect-changes
    if: needs.detect-changes.outputs.rust-files == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ inputs.rust-version }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Format Rust code
        if: ${{ !inputs.skip-linting }}
        run: cargo fmt --all -- --check

      - name: Lint Rust code
        if: ${{ !inputs.skip-linting }}
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build Rust project
        run: cargo build --verbose

      - name: Test Rust project
        if: ${{ !inputs.skip-tests }}
        run: cargo test --verbose

  frontend-ci:
    name: Frontend CI
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-files == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: npm

      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          fi

      - name: Lint frontend code
        if: ${{ !inputs.skip-linting }}
        run: |
          if [ -f package.json ] && npm run lint 2>/dev/null; then
            npm run lint
          fi

      - name: Build frontend
        run: |
          if [ -f package.json ] && npm run build 2>/dev/null; then
            npm run build
          fi

      - name: Test frontend
        if: ${{ !inputs.skip-tests }}
        run: |
          if [ -f package.json ] && npm run test 2>/dev/null; then
            npm run test
          fi

  # Summary job
  ci-summary:
    name: CI Summary
    needs: [detect-changes, go-ci, python-ci, rust-ci, frontend-ci]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate summary
        run: |
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Language | Status | Files Changed |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|---------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Go | ${{ needs.go-ci.result || 'skipped' }} | ${{ needs.detect-changes.outputs.go-files }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python | ${{ needs.python-ci.result || 'skipped' }} | ${{ needs.detect-changes.outputs.python-files }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Rust | ${{ needs.rust-ci.result || 'skipped' }} | ${{ needs.detect-changes.outputs.rust-files }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.frontend-ci.result || 'skipped' }} | ${{ needs.detect-changes.outputs.frontend-files }} |" >> $GITHUB_STEP_SUMMARY
