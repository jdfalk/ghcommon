# file: .github/workflows/release-docker.yml
# version: 1.2.2
# guid: a4b5c6d7-e8f9-0a1b-2c3d-4e5f6a7b8c9d

name: Docker Release Build

on:
  workflow_call:
    inputs:
      docker-matrix:
        description: "Legacy Docker build matrix configuration (converted to platforms)"
        required: false
        default: '{"platform":["linux/amd64","linux/arm64"]}'
        type: string
      platforms:
        description: "Target platforms (comma-separated list)"
        required: false
        default: "linux/amd64,linux/arm64"
        type: string
      dockerfile:
        description: "Path to Dockerfile"
        required: false
        default: "Dockerfile"
        type: string
      context:
        description: "Build context directory"
        required: false
        default: "."
        type: string
      build-args:
        description: "Docker build arguments (one KEY=VALUE per line)"
        required: false
        default: ""
        type: string
      protobuf-artifacts:
        description: "Whether protobuf artifacts are available"
        required: false
        type: string
        default: "false"
      registry:
        description: "Container registry"
        required: true
        type: string
      image-name:
        description: "Image name"
        required: true
        type: string

permissions:
  contents: read
  packages: write
  security-events: write
  attestations: write

jobs:
  # Docker image build with multi-platform support
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      platforms: ${{ steps.platforms.outputs.platforms }}
      should-build: ${{ steps.docker-detect.outputs.should-build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download protobuf artifacts
        if: inputs.protobuf-artifacts == 'true'
        uses: actions/download-artifact@v5
        with:
          name: protobuf-generated

      - name: Detect Docker configuration
        id: docker-detect
        env:
          OVERRIDE_DOCKERFILE: ${{ inputs.dockerfile }}
        run: |
          python3 .github/workflows/scripts/detect_docker_config.py

      - name: Determine target platforms
        id: platforms
        env:
          INPUT_PLATFORMS: ${{ inputs.platforms }}
          INPUT_DOCKER_MATRIX: ${{ inputs.docker-matrix }}
        run: |
          python3 .github/workflows/scripts/determine_docker_platforms.py

      - name: Set up QEMU
        if: steps.docker-detect.outputs.should-build == 'true'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ steps.platforms.outputs.qemu-platforms }}

      - name: Set up Docker Buildx
        if: steps.docker-detect.outputs.should-build == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ steps.platforms.outputs.platforms }}

      - name: Log in to Container Registry
        if: steps.docker-detect.outputs.should-build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.docker-detect.outputs.should-build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image-name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=Container for ${{ github.repository }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push Docker image
        if: steps.docker-detect.outputs.should-build == 'true'
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ steps.docker-detect.outputs.dockerfile-path }}
          platforms: ${{ steps.platforms.outputs.platforms }}
          push: ${{ steps.docker-detect.outputs.should-build == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ inputs.build-args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

  # Docker security scanning and testing
  docker-security:
    name: Docker Security & Testing
    runs-on: ubuntu-latest
    needs: build-docker
    if: |
      always() &&
      needs.build-docker.result == 'success' &&
      needs.build-docker.outputs.should-build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image reference
        id: image-ref
        run: |
          set -euo pipefail

          tags="${{ needs.build-docker.outputs.image-tags }}"
          if [[ -z "${tags//[[:space:]]/}" ]]; then
            echo "::error::No image tags provided by build job"
            exit 1
          fi

          primary_tag="$(printf '%s\n' "${tags}" | awk 'NF {print; exit}')"

          echo "Using image tag: ${primary_tag}"
          echo "image=${primary_tag}" >> "${GITHUB_OUTPUT}"

      - name: Install security tools
        run: |
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

          # Install syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Run vulnerability scanning
        run: |
          IMAGE_REF="${{ steps.image-ref.outputs.image }}"
          echo "Scanning image: $IMAGE_REF"
          trivy image --format sarif --output trivy-results.sarif "$IMAGE_REF" || echo "Trivy scan completed with warnings"

      - name: Run filesystem scanning
        run: |
          echo "Scanning filesystem..."
          trivy fs --format table --output trivy-fs-results.txt . || echo "Filesystem scan completed with warnings"

      - name: Generate SBOM
        run: |
          IMAGE_REF="${{ steps.image-ref.outputs.image }}"
          echo "Generating SBOM for: $IMAGE_REF"
          syft "$IMAGE_REF" -o spdx-json=sbom.spdx.json || echo "SBOM generation completed with warnings"

      - name: Test image functionality
        run: |
          IMAGE_REF="${{ steps.image-ref.outputs.image }}"
          echo "Testing image functionality: $IMAGE_REF"
          # Basic smoke test
          docker run --rm "$IMAGE_REF" --help || echo "Image smoke test completed"

      - name: Validate Docker Compose files
        run: |
          python3 .github/workflows/scripts/validate_docker_compose.py

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Attest SBOM
        if: needs.build-docker.outputs.image-digest != ''
        uses: actions/attest-sbom@v3
        with:
          subject-name: ${{ inputs.registry }}/${{ inputs.image-name }}
          subject-digest: ${{ needs.build-docker.outputs.image-digest }}
          sbom-path: sbom.spdx.json
          push-to-registry: true

      - name: Upload security artifacts
        uses: actions/upload-artifact@v5
        with:
          name: docker-security-results
          path: |
            trivy-results.sarif
            trivy-fs-results.txt
            sbom.spdx.json
