# file: .github/workflows/commit-override-handler.yml
# version: 1.2.0
# guid: 7a8b9c0d-1e2f-3456-789a-bcdef0123456

# ‚ö†Ô∏è  DO NOT EDIT DIRECTLY - This file is managed in ghcommon repository
# All changes should be made in jdfalk/ghcommon and will be synced to other repositories
# Edit this file at: https://github.com/jdfalk/ghcommon/edit/main/.github/workflows/commit-override-handler.yml

name: Commit Override Handler

on:
  workflow_call:
    outputs:
      skip-tests:
        description: "Whether to skip test execution"
        value: ${{ jobs.check-overrides.outputs.skip-tests }}
      skip-validation:
        description: "Whether to skip validation/linting"
        value: ${{ jobs.check-overrides.outputs.skip-validation }}
      skip-ci:
        description: "Whether to skip CI entirely"
        value: ${{ jobs.check-overrides.outputs.skip-ci }}
      skip-build:
        description: "Whether to skip build steps"
        value: ${{ jobs.check-overrides.outputs.skip-build }}
      commit-message:
        description: "The commit message(s) analyzed"
        value: ${{ jobs.check-overrides.outputs.commit-message }}
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

permissions:
  contents: read
  actions: read

jobs:
  check-overrides:
    name: Check Commit Overrides
    runs-on: ubuntu-latest
    outputs:
      skip-tests: ${{ steps.check.outputs.skip-tests }}
      skip-validation: ${{ steps.check.outputs.skip-validation }}
      skip-ci: ${{ steps.check.outputs.skip-ci }}
      skip-build: ${{ steps.check.outputs.skip-build }}
      commit-message: ${{ steps.check.outputs.commit-message }}
    steps:
      # NOTE: fetch-depth set to 0 and explicit base branch fetch added to prevent
      # 'fatal: bad revision' / exit 128 errors when computing commit range
      # on PRs. (Previously the job failed before producing outputs.)
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          # Need full history (or at least all commits in PR) plus base branch ref for range comparisons
          fetch-depth: 0

      - name: Fetch base branch ref
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          # Ensure the base branch ref exists locally; without this git log origin/<base>..HEAD fails (exit 128)
          git fetch --no-tags --depth=1 origin "${{ github.event.repository.default_branch }}"
          echo "Fetched base branch ${{ github.event.repository.default_branch }} for comparison"

      - name: Check commit messages for override keywords
        id: check
        run: |
          echo "Checking commit messages for override keywords..."

          # Determine base branch ref (prefer PR base if available)
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          if [ -z "$BASE_BRANCH" ] || [ "$BASE_BRANCH" = "null" ]; then
            BASE_BRANCH="${{ github.event.repository.default_branch }}"
          fi

          # Attempt to gather commit messages relative to base; fall back gracefully on errors
          set +e
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            COMMITS=$(git log --pretty=format:"%s" "origin/${BASE_BRANCH}..HEAD" 2>/dev/null)
            STATUS=$?
            if [ $STATUS -ne 0 ] || [ -z "$COMMITS" ]; then
              echo "‚ö†Ô∏è  Unable to compute commit range origin/${BASE_BRANCH}..HEAD (exit $STATUS). Falling back to last 20 commits on HEAD."
              COMMITS=$(git log --pretty=format:"%s" -n 20)
            fi
          else
            COMMITS=$(git log --pretty=format:"%s" -1)
          fi
          set -e

          echo "Commit messages to check:"
          echo "$COMMITS"
          echo ""

          # Check for skip patterns (case insensitive)
          SKIP_TESTS="false"
          SKIP_VALIDATION="false"
          SKIP_CI="false"
          SKIP_BUILD="false"

          # Skip tests patterns
          if echo "$COMMITS" | grep -iE "\[skip.?tests?\]|\[no.?tests?\]|SKIP.?TESTS?|NO.?TESTS?" > /dev/null; then
            SKIP_TESTS="true"
            echo "üö´ SKIP TESTS detected in commit message"
          fi

          # Skip validation patterns
          if echo "$COMMITS" | grep -iE "\[skip.?validation\]|\[no.?validation\]|SKIP.?VALIDATION|NO.?VALIDATION|\[skip.?lint\]|\[no.?lint\]|SKIP.?LINT|NO.?LINT" > /dev/null; then
            SKIP_VALIDATION="true"
            echo "üö´ SKIP VALIDATION detected in commit message"
          fi

          # Skip CI patterns
          if echo "$COMMITS" | grep -iE "\[skip.?ci\]|\[ci.?skip\]|SKIP.?CI|CI.?SKIP|\[skip.?actions\]" > /dev/null; then
            SKIP_CI="true"
            echo "üö´ SKIP CI detected in commit message"
          fi

          # Skip build patterns
          if echo "$COMMITS" | grep -iE "\[skip.?build\]|\[no.?build\]|SKIP.?BUILD|NO.?BUILD" > /dev/null; then
            SKIP_BUILD="true"
            echo "üö´ SKIP BUILD detected in commit message"
          fi

          # Output results
          {
            echo "skip-tests=$SKIP_TESTS"
            echo "skip-validation=$SKIP_VALIDATION"
            echo "skip-ci=$SKIP_CI"
            echo "skip-build=$SKIP_BUILD"
            echo "commit-message<<EOF"
            echo "$COMMITS"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

          # Summary
          summary_content="## üîç Commit Override Analysis\n\n"
          summary_content+="| Override Type | Status |\n"
          summary_content+="|---------------|--------|\n"
          summary_content+="| Skip Tests | $SKIP_TESTS |\n"
          summary_content+="| Skip Validation | $SKIP_VALIDATION |\n"
          summary_content+="| Skip CI | $SKIP_CI |\n"
          summary_content+="| Skip Build | $SKIP_BUILD |\n\n"

          if [ "$SKIP_TESTS" = "true" ] || [ "$SKIP_VALIDATION" = "true" ] || [ "$SKIP_CI" = "true" ] || [ "$SKIP_BUILD" = "true" ]; then
            summary_content+="‚ö†Ô∏è **Warning**: Some CI checks have been disabled via commit message overrides.\n\n"
            summary_content+="**Commit Messages Analyzed:**\n\`\`\`\n${COMMITS}\n\`\`\`\n"
          else
            summary_content+="‚úÖ **All CI checks enabled** - No override keywords detected.\n"
          fi

          printf '%s' "${summary_content}" >> "${GITHUB_STEP_SUMMARY}"

  # This job can be referenced by other workflows to conditionally skip steps
  notify-overrides:
    name: Notify Override Status
    runs-on: ubuntu-latest
    needs: check-overrides
    if: needs.check-overrides.outputs.skip-ci != 'true'
    steps:
      - name: Display override status
        run: |
          SUMMARY_FILE="${GITHUB_STEP_SUMMARY}"
          {
            echo "## üéõÔ∏è CI Override Configuration"
            echo ""
            echo "The following overrides are active for this workflow:"
            echo ""
          } >> "${SUMMARY_FILE}"

          if [ "${{ needs.check-overrides.outputs.skip-tests }}" = "true" ]; then
            echo "- üö´ **Tests will be skipped**" >> "${SUMMARY_FILE}"
          else
            echo "- ‚úÖ **Tests will run normally**" >> "${SUMMARY_FILE}"
          fi

          if [ "${{ needs.check-overrides.outputs.skip-validation }}" = "true" ]; then
            echo "- üö´ **Validation/Linting will be skipped**" >> "${SUMMARY_FILE}"
          else
            echo "- ‚úÖ **Validation/Linting will run normally**" >> "${SUMMARY_FILE}"
          fi

          if [ "${{ needs.check-overrides.outputs.skip-build }}" = "true" ]; then
            echo "- üö´ **Build steps will be skipped**" >> "${SUMMARY_FILE}"
          else
            echo "- ‚úÖ **Build steps will run normally**" >> "${SUMMARY_FILE}"
          fi

          {
            echo ""
            echo "### Available Override Keywords"
            echo ""
            echo "Use these in your commit messages to control CI behavior:"
            echo ""
            echo "- **Skip Tests**: \`[skip tests]\`, \`[no tests]\`, \`SKIP TESTS\`"
            echo "- **Skip Validation**: \`[skip validation]\`, \`[skip lint]\`, \`SKIP VALIDATION\`"
            echo "- **Skip CI**: \`[skip ci]\`, \`[ci skip]\`, \`SKIP CI\`"
            echo "- **Skip Build**: \`[skip build]\`, \`[no build]\`, \`SKIP BUILD\`"
          } >> "${SUMMARY_FILE}"
