# file: .github/workflows/reusable-enhanced-docs-update.yml
#
# Enhanced Documentation Update Reusable Workflow with Comprehensive Timestamp Lifecycle Tracking
#
# This enhanced reusable workflow processes documentation updates with
# timestamp lifecycle tracking support for chronological processing.
#
# Features:
# - Enhanced timestamp format v2.0 with lifecycle tracking
# - Chronological processing based on created_at timestamps
# - Git-integrated timestamp recovery for historical accuracy
# - Multiple processing modes (append, prepend, replace-section, etc.)
# - Individual file processing with immediate status updates
# - Malformed file isolation to 'malformed/' directory
# - Failed file isolation to 'failed/' directory
# - Resume capability from partial failures
# - Comprehensive error logging and recovery
# - Backwards compatibility with existing formats
#
# Usage:
#   Call this workflow from your repository's workflow with:
#   uses: jdfalk/ghcommon/.github/workflows/reusable-enhanced-docs-update.yml@main
#   with:
#     enable_chronological_processing: true  # Enable timestamp-based ordering
#     enable_timestamp_migration: true       # Migrate legacy files to v2.0
#
# Permissions:
#   permissions:
#     contents: write        # For creating commits and PRs
#     pull-requests: write   # For creating PRs
#     actions: read          # For workflow access
#     checks: write          # For workflow status

name: Reusable - Enhanced Documentation Updates

on:
  workflow_call:
    inputs:
      updates_dir:
        description: "Directory containing documentation update files"
        required: false
        default: ".github/doc-updates"
        type: string

      create_pr:
        description: "Create a pull request if files are processed"
        required: false
        default: false
        type: boolean

      cleanup:
        description: "Move processed files to subdirectories"
        required: false
        default: true
        type: boolean

      enable_chronological_processing:
        description: "Enable chronological processing based on created_at timestamps"
        required: false
        default: true
        type: boolean

      enable_timestamp_migration:
        description: "Enable migration of legacy files to enhanced timestamp format v2.0"
        required: false
        default: false
        type: boolean

      continue_on_error:
        description: "Continue processing other files when one fails"
        required: false
        default: true
        type: boolean

      dry_run:
        description: "Show what would be done without executing"
        required: false
        default: false
        type: boolean

      verbose:
        description: "Enable verbose logging"
        required: false
        default: false
        type: boolean

    outputs:
      files_processed:
        description: "Number of files processed successfully"
        value: ${{ jobs.process-doc-updates.outputs.files_processed }}

      files_updated:
        description: "Number of documentation files updated"
        value: ${{ jobs.process-doc-updates.outputs.files_updated }}

      timestamp_format_version:
        description: "Timestamp format version used"
        value: ${{ jobs.process-doc-updates.outputs.timestamp_format_version }}

jobs:
  process-doc-updates:
    runs-on: ubuntu-latest

    outputs:
      files_processed: ${{ steps.enhanced-doc-processor.outputs.files_processed }}
      files_updated: ${{ steps.enhanced-doc-processor.outputs.files_updated }}
      timestamp_format_version: ${{ steps.enhanced-doc-processor.outputs.timestamp_format_version }}
      files_changed: ${{ steps.enhanced-doc-processor.outputs.files_changed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for git-based timestamp extraction

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Download enhanced documentation update scripts
        run: |
          # Create scripts directory
          mkdir -p scripts

          # Download enhanced doc update manager
          curl -sSL https://raw.githubusercontent.com/jdfalk/ghcommon/main/scripts/enhanced_doc_update_manager.py \
            -o scripts/enhanced_doc_update_manager.py
          chmod +x scripts/enhanced_doc_update_manager.py

          # Download original doc update manager as fallback
          curl -sSL https://raw.githubusercontent.com/jdfalk/ghcommon/main/scripts/doc_update_manager.py \
            -o scripts/doc_update_manager.py
          chmod +x scripts/doc_update_manager.py

      - name: Migrate legacy formats (if enabled)
        if: ${{ inputs.enable_timestamp_migration == true }}
        run: |
          echo "üîÑ Migrating legacy doc-update files to enhanced timestamp format v2.0..."

          if [ -d "${{ inputs.updates_dir }}" ]; then
            python scripts/enhanced_doc_update_manager.py migrate-format \
              --directory "${{ inputs.updates_dir }}"
          else
            echo "üìù No ${{ inputs.updates_dir }} directory found"
          fi

      - name: Process documentation updates with enhanced timestamp support
        id: enhanced-doc-processor
        run: |
          echo "üöÄ Processing documentation updates with enhanced timestamp lifecycle tracking..."

          # Initialize output variables
          FILES_PROCESSED=0
          FILES_UPDATED=0
          FILES_CHANGED="false"
          TIMESTAMP_FORMAT_VERSION="2.0.0"

          # Check if doc updates directory exists
          if [ ! -d "${{ inputs.updates_dir }}" ]; then
            echo "üìù No ${{ inputs.updates_dir }} directory found"
            echo "files_processed=${FILES_PROCESSED}" >> "$GITHUB_OUTPUT"
            echo "files_updated=${FILES_UPDATED}" >> "$GITHUB_OUTPUT"
            echo "files_changed=${FILES_CHANGED}" >> "$GITHUB_OUTPUT"
            echo "timestamp_format_version=${TIMESTAMP_FORMAT_VERSION}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Count files before processing
          BEFORE_COUNT=$(find "${{ inputs.updates_dir }}" -name "*.json" -not -path "*/processed/*" -not -path "*/failed/*" -not -path "*/malformed/*" | wc -l)
          echo "üìä Found ${BEFORE_COUNT} doc-update files to process"

          if [ "${BEFORE_COUNT}" -eq 0 ]; then
            echo "üìù No doc-update files to process"
            echo "files_processed=${FILES_PROCESSED}" >> "$GITHUB_OUTPUT"
            echo "files_updated=${FILES_UPDATED}" >> "$GITHUB_OUTPUT"
            echo "files_changed=${FILES_CHANGED}" >> "$GITHUB_OUTPUT"
            echo "timestamp_format_version=${TIMESTAMP_FORMAT_VERSION}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Choose processing method based on input
          if [ "${{ inputs.enable_chronological_processing }}" = "true" ]; then
            echo "üïí Using chronological processing with timestamp lifecycle tracking"
            PROCESS_COMMAND="process-chronological"
          else
            echo "üìù Using standard processing mode"
            PROCESS_COMMAND="process"
          fi

          # Build command arguments
          CMD_ARGS="--updates-dir ${{ inputs.updates_dir }}"

          if [ "${{ inputs.cleanup }}" = "true" ]; then
            CMD_ARGS="${CMD_ARGS} --cleanup true"
          else
            CMD_ARGS="${CMD_ARGS} --cleanup false"
          fi

          if [ "${{ inputs.dry_run }}" = "true" ]; then
            CMD_ARGS="${CMD_ARGS} --dry-run"
            echo "üß™ Running in dry-run mode"
          fi

          if [ "${{ inputs.verbose }}" = "true" ]; then
            CMD_ARGS="${CMD_ARGS} --verbose"
            echo "üîç Verbose logging enabled"
          fi

          if [ "${{ inputs.continue_on_error }}" = "true" ]; then
            CMD_ARGS="${CMD_ARGS} --continue-on-error true"
          else
            CMD_ARGS="${CMD_ARGS} --continue-on-error false"
          fi

          # Execute enhanced doc processing
          echo "üîÑ Executing: python scripts/enhanced_doc_update_manager.py ${PROCESS_COMMAND} ${CMD_ARGS}"

          # Capture output for parsing
          OUTPUT_FILE=$(mktemp)

          if python scripts/enhanced_doc_update_manager.py ${PROCESS_COMMAND} ${CMD_ARGS} 2>&1 | tee "${OUTPUT_FILE}"; then
            echo "‚úÖ Enhanced doc processing completed successfully"

            # Parse output for statistics
            if grep -q "Successfully processed:" "${OUTPUT_FILE}"; then
              FILES_PROCESSED=$(grep "Successfully processed:" "${OUTPUT_FILE}" | grep -o '[0-9]\+' | head -1 || echo "0")
            fi

            if grep -q "Documentation files updated:" "${OUTPUT_FILE}"; then
              FILES_UPDATED=$(grep "Documentation files updated:" "${OUTPUT_FILE}" | grep -o '[0-9]\+' | head -1 || echo "0")
            fi

            # Check if any files were processed
            if [ "${FILES_PROCESSED}" -gt 0 ]; then
              FILES_CHANGED="true"
              echo "üìä Successfully processed ${FILES_PROCESSED} doc-update files"
              echo "üìÑ Updated ${FILES_UPDATED} documentation files"
            fi

          else
            echo "‚ùå Enhanced doc processing failed, falling back to original processor"

            # Fallback to original doc update manager
            if python scripts/doc_update_manager.py --updates-dir "${{ inputs.updates_dir }}"; then
              echo "‚úÖ Fallback processing completed successfully"

              # Count files after processing for fallback
              AFTER_COUNT=$(find "${{ inputs.updates_dir }}" -name "*.json" -not -path "*/processed/*" -not -path "*/failed/*" -not -path "*/malformed/*" | wc -l)
              FILES_PROCESSED=$((BEFORE_COUNT - AFTER_COUNT))
              FILES_UPDATED=${FILES_PROCESSED}  # Approximation for fallback

              if [ "${FILES_PROCESSED}" -gt 0 ]; then
                FILES_CHANGED="true"
              fi

              TIMESTAMP_FORMAT_VERSION="1.0.0"
            else
              echo "‚ùå Both enhanced and fallback processing failed"
              exit 1
            fi
          fi

          # Clean up temp file
          rm -f "${OUTPUT_FILE}"

          # Set outputs
          echo "files_processed=${FILES_PROCESSED}" >> "$GITHUB_OUTPUT"
          echo "files_updated=${FILES_UPDATED}" >> "$GITHUB_OUTPUT"
          echo "files_changed=${FILES_CHANGED}" >> "$GITHUB_OUTPUT"
          echo "timestamp_format_version=${TIMESTAMP_FORMAT_VERSION}" >> "$GITHUB_OUTPUT"

          echo "üìã Processing Summary:"
          echo "   Files processed: ${FILES_PROCESSED}"
          echo "   Documentation files updated: ${FILES_UPDATED}"
          echo "   Timestamp format: v${TIMESTAMP_FORMAT_VERSION}"

      - name: Commit processed files
        if: ${{ steps.enhanced-doc-processor.outputs.files_changed == 'true' && inputs.dry_run == false }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add all changes (documentation updates and processed file moves)
          git add .

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "üìù No changes to commit"
          else
            git commit -m "docs: process documentation updates

            - Processed ${{ steps.enhanced-doc-processor.outputs.files_processed }} doc-update files
            - Updated ${{ steps.enhanced-doc-processor.outputs.files_updated }} documentation files
            - Timestamp format: v${{ steps.enhanced-doc-processor.outputs.timestamp_format_version }}

            Auto-generated by enhanced documentation update workflow"

            git push
            echo "‚úÖ Committed and pushed documentation updates"
          fi

      - name: Create Pull Request (if enabled)
        if: ${{ inputs.create_pr == true && steps.enhanced-doc-processor.outputs.files_changed == 'true' && inputs.dry_run == false }}
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ github.token }}
          commit-message: |
            docs: process documentation updates with enhanced timestamp tracking

            - Processed ${{ steps.enhanced-doc-processor.outputs.files_processed }} doc-update files
            - Updated ${{ steps.enhanced-doc-processor.outputs.files_updated }} documentation files
            - Timestamp format: v${{ steps.enhanced-doc-processor.outputs.timestamp_format_version }}
          title: "üìö Process Documentation Updates (Enhanced v${{ steps.enhanced-doc-processor.outputs.timestamp_format_version }})"
          body: |
            ## Enhanced Documentation Update Processing

            This PR was automatically generated by the enhanced documentation update workflow with comprehensive timestamp lifecycle tracking.

            ### Summary
            - **Files processed**: ${{ steps.enhanced-doc-processor.outputs.files_processed }}
            - **Documentation files updated**: ${{ steps.enhanced-doc-processor.outputs.files_updated }}
            - **Timestamp format**: v${{ steps.enhanced-doc-processor.outputs.timestamp_format_version }}
            - **Chronological processing**: ${{ inputs.enable_chronological_processing }}

            ### What's Included
            - ‚úÖ Documentation files updated with new content
            - ‚úÖ Processed doc-update files moved to `processed/` directory
            - ‚úÖ Failed files moved to `failed/` directory with error logs
            - ‚úÖ Malformed files isolated to `malformed/` directory
            - ‚úÖ Enhanced timestamp lifecycle tracking
            - ‚úÖ Git-integrated timestamp recovery

            ### Processing Modes Used
            - **Append**: Add content to end of files
            - **Prepend**: Add content to beginning of files
            - **Replace Section**: Replace specific markdown sections
            - **Changelog Entry**: Add structured changelog entries
            - **Task Add**: Add tasks to TODO files
            - **Task Complete**: Mark tasks as completed

            ### Review Notes
            - All processed files have been archived automatically
            - Failed files include error logs for debugging
            - Timestamp format v2.0 provides comprehensive lifecycle tracking
            - Documentation changes are safe and follow established patterns

            This PR contains both documentation updates and processed file archival.
          branch: automated/process-enhanced-doc-updates
          delete-branch: true

      - name: Summary
        run: |
          echo "üìä Enhanced Documentation Update Summary:"
          echo "   Files processed: ${{ steps.enhanced-doc-processor.outputs.files_processed }}"
          echo "   Documentation files updated: ${{ steps.enhanced-doc-processor.outputs.files_updated }}"
          echo "   Timestamp format: v${{ steps.enhanced-doc-processor.outputs.timestamp_format_version }}"
          echo "   Chronological processing: ${{ inputs.enable_chronological_processing }}"
          echo "   Files changed: ${{ steps.enhanced-doc-processor.outputs.files_changed }}"

          if [ "${{ steps.enhanced-doc-processor.outputs.files_processed }}" -gt 0 ]; then
            echo "‚úÖ Enhanced documentation processing completed successfully"
          else
            echo "üìù No documentation updates were processed"
          fi
