# file: .github/workflows/reusable-docs-update.yml
# version: 2.0.0
# guid: 25b987e1-9e34-4618-8182-53e12c7307e0

name: Reusable Documentation Updates

on:
  workflow_call:
    inputs:
      updates-directory:
        description: "Directory with documentation update files"
        required: false
        default: ".github/doc-updates"
        type: string
      dry_run:
        description: "Run in dry-run mode (no changes)"
        required: false
        type: boolean
        default: false
      python_version:
        description: "Python version to use"
        required: false
        type: string
        default: "3.11"
      cleanup_processed_files:
        description: "Whether to clean up processed files after successful application"
        required: false
        type: boolean
        default: true
      create_pr:
        description: "Create pull request for changes instead of direct commit"
        required: false
        type: boolean
        default: false
      auto_merge:
        description: "Auto-merge created PR (requires create_pr=true)"
        required: false
        type: boolean
        default: false
    outputs:
      files_processed:
        description: "Number of files processed"
        value: ${{ jobs.docs-update.outputs.files_processed }}
      changes_made:
        description: "Whether any changes were made"
        value: ${{ jobs.docs-update.outputs.changes_made }}
      pr_created:
        description: "Whether a PR was created"
        value: ${{ jobs.docs-update.outputs.pr_created }}
      pr_number:
        description: "PR number if created"
        value: ${{ jobs.docs-update.outputs.pr_number }}

jobs:
  docs-update:
    runs-on: ubuntu-latest
    outputs:
      files_processed: ${{ steps.process-updates.outputs.files_processed }}
      changes_made: ${{ steps.process-updates.outputs.changes_made }}
      pr_created: ${{ steps.set-outputs.outputs.pr_created }}
      pr_number: ${{ steps.set-outputs.outputs.pr_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use a token that can create PRs if needed
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jq pyyaml

      - name: Download documentation update manager
        run: |
          # Download the enhanced doc update manager from ghcommon
          curl -sSL https://raw.githubusercontent.com/jdfalk/ghcommon/main/scripts/doc_update_manager.py \
            -o doc_update_manager.py
          chmod +x doc_update_manager.py

      - name: Validate update files
        id: validate
        run: |
          echo "🔍 Validating documentation update files..."
          
          update_dir="${{ inputs.updates-directory }}"
          if [[ ! -d "$update_dir" ]]; then
            echo "📝 No update directory found: $update_dir"
            echo "files_found=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          files_count=$(find "$update_dir" -name "*.json" -type f | wc -l)
          echo "files_found=$files_count" >> "$GITHUB_OUTPUT"
          echo "📊 Found $files_count update files"
          
          # Validate JSON format
          for file in "$update_dir"/*.json; do
            if [[ -f "$file" ]]; then
              if ! jq empty "$file" 2>/dev/null; then
                echo "❌ Invalid JSON in $file"
                exit 1
              fi
              echo "✅ Valid JSON: $(basename "$file")"
            fi
          done

      - name: Process documentation updates
        id: process-updates
        if: steps.validate.outputs.files_found > 0
        run: |
          echo "🔄 Processing documentation updates..."
          
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "🧪 Running in dry-run mode"
            dry_run_flag="--dry-run"
          else
            dry_run_flag=""
          fi
          
          python doc_update_manager.py \
            --updates-dir "${{ inputs.updates-directory }}" \
            --cleanup=${{ inputs.cleanup_processed_files }} \
            $dry_run_flag \
            --verbose
          
          # Capture outputs
          echo "files_processed=$(cat .doc-update-stats.json | jq -r '.files_processed // 0')" >> "$GITHUB_OUTPUT"
          echo "changes_made=$(cat .doc-update-stats.json | jq -r '.changes_made // false')" >> "$GITHUB_OUTPUT"

      - name: Generate update summary
        if: steps.validate.outputs.files_found > 0
        run: |
          echo "📋 Documentation Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "===============================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f .doc-update-stats.json ]]; then
            echo "📊 **Statistics:**" >> $GITHUB_STEP_SUMMARY
            echo "- Files processed: $(jq -r '.files_processed // 0' .doc-update-stats.json)" >> $GITHUB_STEP_SUMMARY
            echo "- Changes made: $(jq -r '.changes_made // false' .doc-update-stats.json)" >> $GITHUB_STEP_SUMMARY
            echo "- Dry run mode: ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if jq -e '.files_updated | length > 0' .doc-update-stats.json >/dev/null; then
              echo "📝 **Files Updated:**" >> $GITHUB_STEP_SUMMARY
              jq -r '.files_updated[]' .doc-update-stats.json | while read file; do
                echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
              done
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            if jq -e '.errors | length > 0' .doc-update-stats.json >/dev/null; then
              echo "❌ **Errors:**" >> $GITHUB_STEP_SUMMARY
              jq -r '.errors[]' .doc-update-stats.json | while read error; do
                echo "- $error" >> $GITHUB_STEP_SUMMARY
              done
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Check for changes
        id: check-changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            echo "📝 Changes detected in repository"
          else
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo "✅ No changes to commit"
          fi

      - name: Create Pull Request
        id: create-pr
        if: steps.check-changes.outputs.has_changes == 'true' && inputs.create_pr == true && inputs.dry_run == false
        uses: peter-evans/create-pull-request@v6
        with:
          title: "docs: apply documentation updates"
          body: |
            ## Documentation Updates
            
            This PR applies automated documentation updates from JSON update files.
            
            ### Changes Made
            
            ${{ steps.process-updates.outputs.files_processed }} update files processed.
            
            ### Files Modified
            
            - See the Files Changed tab for detailed modifications
            
            ### Auto-generated
            
            This PR was automatically created by the documentation update workflow.
          branch: docs/automated-updates-${{ github.run_number }}
          commit-message: |
            docs: apply documentation updates
            
            Files changed:
            $(git diff --name-only HEAD~1 | while read file; do echo "- Updated documentation: [$file]($file)"; done)
          delete-branch: true
          draft: false

      - name: Auto-merge PR
        if: steps.create-pr.outputs.pull-request-number && inputs.auto_merge == true
        run: |
          echo "🔄 Auto-merging PR #${{ steps.create-pr.outputs.pull-request-number }}"
          gh pr merge ${{ steps.create-pr.outputs.pull-request-number }} --auto --squash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit changes directly
        if: steps.check-changes.outputs.has_changes == 'true' && inputs.create_pr == false && inputs.dry_run == false
        run: |
          echo "💾 Committing documentation changes directly"
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Create detailed commit message
          commit_message="docs: apply documentation updates

          Files changed:"
          
          git diff --name-only | while read file; do
            commit_message="$commit_message
          - Updated documentation: [$file]($file)"
          done
          
          git add -A
          git commit -m "docs: apply documentation updates

          Automated documentation updates applied from JSON update files.
          
          Files changed:
          $(git diff --name-only HEAD | while read file; do echo "- Updated documentation: [$file]($file)"; done)"
          
          git push

      - name: Set outputs
        id: set-outputs
        if: always()
        run: |
          if [[ "${{ steps.create-pr.outputs.pull-request-number }}" != "" ]]; then
            echo "pr_created=true" >> "$GITHUB_OUTPUT"
            echo "pr_number=${{ steps.create-pr.outputs.pull-request-number }}" >> "$GITHUB_OUTPUT"
          else
            echo "pr_created=false" >> "$GITHUB_OUTPUT"
            echo "pr_number=" >> "$GITHUB_OUTPUT"
          fi

      - name: Cleanup
        if: always()
        run: |
          # Clean up temporary files
          rm -f doc_update_manager.py .doc-update-stats.json
