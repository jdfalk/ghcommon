# file: .github/workflows/reusable-matrix-build.yml
# version: 1.1.0
# guid: f6a7b8c9-d0e1-2345-fa67-890123456789

# ⚠️  DO NOT EDIT DIRECTLY - This file is managed in ghcommon repository
# All changes should be made in jdfalk/ghcommon and will be synced to other repositories
# Edit this file at: https://github.com/jdfalk/ghcommon/edit/main/.github/workflows/reusable-matrix-build.yml

name: Reusable Matrix Build

on:
  workflow_call:
    inputs:
      go-versions:
        description: 'Go versions to test (JSON array)'
        required: false
        type: string
        default: '["1.22", "1.23", "1.24"]'
      python-versions:
        description: 'Python versions to test (JSON array)'
        required: false
        type: string
        default: '["3.11", "3.12", "3.13"]'
      node-versions:
        description: 'Node.js versions to test (JSON array)'
        required: false
        type: string
        default: '["20", "22", "24"]'
      rust-versions:
        description: 'Rust versions to test (JSON array)'
        required: false
        type: string
        default: '["1.75", "1.76", "1.77"]'
      enable-protobuf:
        description: 'Enable protobuf generation'
        required: false
        type: boolean
        default: true
      enable-docker:
        description: 'Enable Docker builds'
        required: false
        type: boolean
        default: true
      skip-tests:
        description: 'Skip running tests'
        required: false
        type: boolean
        default: false
    secrets:
      GITHUB_TOKEN:
        required: true

permissions:
  contents: read
  packages: write

jobs:
  # Detect project structure
  detect:
    name: Detect Project Structure
    runs-on: ubuntu-latest
    outputs:
      has-go: ${{ steps.detect.outputs.has-go }}
      has-python: ${{ steps.detect.outputs.has-python }}
      has-frontend: ${{ steps.detect.outputs.has-frontend }}
      has-rust: ${{ steps.detect.outputs.has-rust }}
      has-docker: ${{ steps.detect.outputs.has-docker }}
      has-protobuf: ${{ steps.detect.outputs.has-protobuf }}
      go-matrix: ${{ steps.matrix.outputs.go-matrix }}
      python-matrix: ${{ steps.matrix.outputs.python-matrix }}
      frontend-matrix: ${{ steps.matrix.outputs.frontend-matrix }}
      rust-matrix: ${{ steps.matrix.outputs.rust-matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Detect project types
        id: detect
        run: |
          echo "Detecting project structure..."
          
          # Go detection
          if [[ -f "go.mod" ]] || find . -name "*.go" -not -path "./vendor/*" | head -1 | grep -q .; then
            echo "has-go=true" >> $GITHUB_OUTPUT
            echo "✅ Go project detected"
          else
            echo "has-go=false" >> $GITHUB_OUTPUT
          fi
          
          # Python detection
          if [[ -f "pyproject.toml" || -f "requirements.txt" || -f "setup.py" ]] || find . -name "*.py" | head -1 | grep -q .; then
            echo "has-python=true" >> $GITHUB_OUTPUT
            echo "✅ Python project detected"
          else
            echo "has-python=false" >> $GITHUB_OUTPUT
          fi
          
          # Frontend detection
          if [[ -f "package.json" || -f "yarn.lock" || -f "pnpm-lock.yaml" ]]; then
            echo "has-frontend=true" >> $GITHUB_OUTPUT
            echo "✅ Frontend project detected"
          else
            echo "has-frontend=false" >> $GITHUB_OUTPUT
          fi
          
          # Rust detection
          if [[ -f "Cargo.toml" ]] || find . -name "*.rs" -not -path "./target/*" | head -1 | grep -q .; then
            echo "has-rust=true" >> $GITHUB_OUTPUT
            echo "✅ Rust project detected"
          else
            echo "has-rust=false" >> $GITHUB_OUTPUT
          fi
          
          # Docker detection
          if find . -name "Dockerfile*" -o -name "docker-compose*.yml" -o -name "docker-compose*.yaml" | head -1 | grep -q .; then
            echo "has-docker=true" >> $GITHUB_OUTPUT
            echo "✅ Docker project detected"
          else
            echo "has-docker=false" >> $GITHUB_OUTPUT
          fi
          
          # Protobuf detection
          if [[ -f "buf.yaml" || -f "buf.gen.yaml" ]] || find . -name "*.proto" | head -1 | grep -q .; then
            echo "has-protobuf=true" >> $GITHUB_OUTPUT
            echo "✅ Protobuf project detected"
          else
            echo "has-protobuf=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate build matrices
        id: matrix
        run: |
          # Go matrix
          GO_VERSIONS='${{ inputs.go-versions }}'
          GO_MATRIX=$(echo "$GO_VERSIONS" | jq -c '{
            include: [
              .[] as $version | {
                "go-version": $version,
                "os": "ubuntu-latest",
                "primary": ($version == "1.24")
              }
            ]
          }')
          echo "go-matrix=$GO_MATRIX" >> $GITHUB_OUTPUT
          
          # Python matrix
          PYTHON_VERSIONS='${{ inputs.python-versions }}'
          PYTHON_MATRIX=$(echo "$PYTHON_VERSIONS" | jq -c '{
            include: [
              .[] as $version | {
                "python-version": $version,
                "os": "ubuntu-latest", 
                "primary": ($version == "3.12")
              }
            ]
          }')
          echo "python-matrix=$PYTHON_MATRIX" >> $GITHUB_OUTPUT
          
          # Frontend matrix
          NODE_VERSIONS='${{ inputs.node-versions }}'
          FRONTEND_MATRIX=$(echo "$NODE_VERSIONS" | jq -c '{
            include: [
              .[] as $version | {
                "node-version": $version,
                "os": "ubuntu-latest",
                "primary": ($version == "22")
              }
            ]
          }')
          echo "frontend-matrix=$FRONTEND_MATRIX" >> $GITHUB_OUTPUT
          
          # Rust matrix
          RUST_VERSIONS='${{ inputs.rust-versions }}'
          RUST_MATRIX=$(echo "$RUST_VERSIONS" | jq -c '{
            include: [
              .[] as $version | {
                "rust-version": $version,
                "os": "ubuntu-latest",
                "primary": ($version == "1.76")
              }
            ]
          }')
          echo "rust-matrix=$RUST_MATRIX" >> $GITHUB_OUTPUT

  # Protobuf generation
  protobuf:
    name: Generate Protobuf
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.has-protobuf == 'true' && inputs.enable-protobuf
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate protobuf
        run: |
          if [[ -f "buf.gen.yaml" ]]; then
            echo "Generating protobuf code..."
            buf generate
            echo "✅ Protobuf generation completed"
          else
            echo "⚠️ No buf.gen.yaml found, skipping generation"
          fi

      - name: Upload protobuf artifacts
        uses: actions/upload-artifact@v4
        with:
          name: protobuf-generated
          path: |
            **/*.pb.go
            **/*_pb2.py
            **/*_pb2_grpc.py
            **/*.pb.js
            **/*.pb.ts
          retention-days: 1

  # Go matrix build
  build-go:
    name: Go (${{ matrix.go-version }})
    runs-on: ${{ matrix.os }}
    needs: [detect, protobuf]
    if: always() && needs.detect.outputs.has-go == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.detect.outputs.go-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download protobuf artifacts
        if: needs.detect.outputs.has-protobuf == 'true' && inputs.enable-protobuf
        uses: actions/download-artifact@v4
        with:
          name: protobuf-generated
        continue-on-error: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Build
        run: go build -v ./...

      - name: Test
        if: ${{ !inputs.skip-tests }}
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage
        if: matrix.primary && !inputs.skip-tests
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage
          path: |
            coverage.out
            coverage.html

  # Python matrix build
  build-python:
    name: Python (${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: [detect, protobuf]
    if: always() && needs.detect.outputs.has-python == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.detect.outputs.python-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download protobuf artifacts
        if: needs.detect.outputs.has-protobuf == 'true' && inputs.enable-protobuf
        uses: actions/download-artifact@v4
        with:
          name: protobuf-generated
        continue-on-error: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [[ -f "requirements.txt" ]]; then
            pip install -r requirements.txt
          fi
          if [[ -f "pyproject.toml" ]]; then
            pip install -e .
          fi

      - name: Test
        if: ${{ !inputs.skip-tests }}
        run: |
          if command -v pytest &> /dev/null; then
            pytest --cov --cov-report=xml --cov-report=html
          else
            python -m unittest discover
          fi

      - name: Upload coverage
        if: matrix.primary && !inputs.skip-tests
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage
          path: |
            coverage.xml
            htmlcov/

  # Rust matrix build
  build-rust:
    name: Rust (${{ matrix.rust-version }})
    runs-on: ${{ matrix.os }}
    needs: [detect, protobuf]
    if: always() && needs.detect.outputs.has-rust == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.detect.outputs.rust-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download protobuf artifacts
        if: needs.detect.outputs.has-protobuf == 'true' && inputs.enable-protobuf
        uses: actions/download-artifact@v4
        with:
          name: protobuf-generated
        continue-on-error: true

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust-version }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: rust-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-${{ matrix.rust-version }}-

      - name: Build
        run: cargo build --verbose

      - name: Test
        if: ${{ !inputs.skip-tests }}
        run: |
          cargo test --verbose
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Generate coverage
        if: matrix.primary && !inputs.skip-tests
        run: |
          cargo install cargo-tarpaulin || true
          cargo tarpaulin --out xml --output-dir target/coverage/ || true

      - name: Upload coverage
        if: matrix.primary && !inputs.skip-tests
        uses: actions/upload-artifact@v4
        with:
          name: rust-coverage
          path: target/coverage/
        continue-on-error: true

  # Frontend matrix build
  build-frontend:
    name: Frontend (Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    needs: [detect, protobuf]
    if: always() && needs.detect.outputs.has-frontend == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.detect.outputs.frontend-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download protobuf artifacts
        if: needs.detect.outputs.has-protobuf == 'true' && inputs.enable-protobuf
        uses: actions/download-artifact@v4
        with:
          name: protobuf-generated
        continue-on-error: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Test
        if: ${{ !inputs.skip-tests }}
        run: npm test

      - name: Upload build artifacts
        if: matrix.primary
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            dist/
            build/

  # Docker build
  build-docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [detect, protobuf]
    if: always() && needs.detect.outputs.has-docker == 'true' && inputs.enable-docker
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download protobuf artifacts
        if: needs.detect.outputs.has-protobuf == 'true' && inputs.enable-protobuf
        uses: actions/download-artifact@v4
        with:
          name: protobuf-generated
        continue-on-error: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Final status
  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [detect, protobuf, build-go, build-python, build-frontend, build-rust, build-docker]
    if: always()
    steps:
      - name: Check status
        run: |
          echo "## 🏗️ Reusable Matrix Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check each job
          PROTOBUF_STATUS="${{ needs.protobuf.result }}"
          GO_STATUS="${{ needs.build-go.result }}"
          PYTHON_STATUS="${{ needs.build-python.result }}"
          FRONTEND_STATUS="${{ needs.build-frontend.result }}"
          RUST_STATUS="${{ needs.build-rust.result }}"
          DOCKER_STATUS="${{ needs.build-docker.result }}"
          
          # Report status
          if [[ "$PROTOBUF_STATUS" == "success" || "$PROTOBUF_STATUS" == "skipped" ]]; then
            echo "✅ **Protobuf**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Protobuf**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$GO_STATUS" == "success" || "$GO_STATUS" == "skipped" ]]; then
            echo "✅ **Go Build**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Go Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$PYTHON_STATUS" == "success" || "$PYTHON_STATUS" == "skipped" ]]; then
            echo "✅ **Python Build**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Python Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$FRONTEND_STATUS" == "success" || "$FRONTEND_STATUS" == "skipped" ]]; then
            echo "✅ **Frontend Build**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$RUST_STATUS" == "success" || "$RUST_STATUS" == "skipped" ]]; then
            echo "✅ **Rust Build**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Rust Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$DOCKER_STATUS" == "success" || "$DOCKER_STATUS" == "skipped" ]]; then
            echo "✅ **Docker Build**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for failures
          if [[ "$GO_STATUS" == "failure" || 
                "$PYTHON_STATUS" == "failure" || 
                "$FRONTEND_STATUS" == "failure" || 
                "$RUST_STATUS" == "failure" ||
                "$DOCKER_STATUS" == "failure" || 
                "$PROTOBUF_STATUS" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Overall Status**: FAILED" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Overall Status**: PASSED" >> $GITHUB_STEP_SUMMARY
          fi