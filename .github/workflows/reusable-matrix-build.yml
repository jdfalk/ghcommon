# file: .github/workflows/reusable-matrix-build.yml
# version: 1.1.0
# guid: f6a7b8c9-d0e1-2345-fa67-890123456789
# DO NOT EDIT: This file is managed centrally in ghcommon repository
# To update: Edit the version in jdfalk/ghcommon and it will be synced to all repos

name: Reusable Matrix Build

on:
  workflow_call:
    inputs:
      go-versions:
        description: 'Go versions to test (JSON array)'
        required: false
        type: string
        default: '["1.22", "1.23", "1.24"]'
      python-versions:
        description: 'Python versions to test (JSON array)'
        required: false
        type: string
        default: '["3.11", "3.12", "3.13"]'
      node-versions:
        description: 'Node.js versions to test (JSON array)'
        required: false
        type: string
        default: '["20", "22", "24"]'
      rust-versions:
        description: 'Rust versions to test (JSON array)'
        required: false
        type: string
        default: '["1.75", "1.76", "1.77"]'
      enable-protobuf:
        description: 'Enable protobuf generation'
        required: false
        type: boolean
        default: true
      enable-docker:
        description: 'Enable Docker builds'
        required: false
        type: boolean
        default: true
      skip-tests:
        description: 'Skip running tests'
        required: false
        type: boolean
        default: false
      matrix:
        description: 'Pre-built matrix configuration (JSON)'
        required: false
        type: string
        default: '{}'
      protobuf-needed:
        description: 'Whether protobuf generation is needed'
        required: false
        type: string
        default: 'false'
    secrets:
      GITHUB_TOKEN:
        required: true

permissions:
  contents: read
  packages: write

jobs:
  # Detect project structure if matrix not provided
  detect:
    name: Detect Project Structure
    runs-on: ubuntu-latest
    if: inputs.matrix == '{}'
    outputs:
      has-go: ${{ steps.detect.outputs.has-go }}
      has-python: ${{ steps.detect.outputs.has-python }}
      has-frontend: ${{ steps.detect.outputs.has-frontend }}
      has-rust: ${{ steps.detect.outputs.has-rust }}
      has-docker: ${{ steps.detect.outputs.has-docker }}
      has-protobuf: ${{ steps.detect.outputs.has-protobuf }}
      go-matrix: ${{ steps.matrix.outputs.go-matrix }}
      python-matrix: ${{ steps.matrix.outputs.python-matrix }}
      frontend-matrix: ${{ steps.matrix.outputs.frontend-matrix }}
      rust-matrix: ${{ steps.matrix.outputs.rust-matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Detect project types
        id: detect
        run: |
          echo "Detecting project structure..."
          
          # Go detection
          if [[ -f "go.mod" ]] || find . -name "*.go" -not -path "./vendor/*" | head -1 | grep -q .; then
            echo "has-go=true" >> $GITHUB_OUTPUT
            echo "✅ Go project detected"
          else
            echo "has-go=false" >> $GITHUB_OUTPUT
          fi
          
          # Python detection
          if [[ -f "pyproject.toml" || -f "requirements.txt" || -f "setup.py" ]] || find . -name "*.py" | head -1 | grep -q .; then
            echo "has-python=true" >> $GITHUB_OUTPUT
            echo "✅ Python project detected"
          else
            echo "has-python=false" >> $GITHUB_OUTPUT
          fi
          
          # Frontend detection
          if [[ -f "package.json" || -f "yarn.lock" || -f "pnpm-lock.yaml" ]]; then
            echo "has-frontend=true" >> $GITHUB_OUTPUT
            echo "✅ Frontend project detected"
          else
            echo "has-frontend=false" >> $GITHUB_OUTPUT
          fi
          
          # Rust detection
          if [[ -f "Cargo.toml" ]] || find . -name "*.rs" -not -path "./target/*" | head -1 | grep -q .; then
            echo "has-rust=true" >> $GITHUB_OUTPUT
            echo "✅ Rust project detected"
          else
            echo "has-rust=false" >> $GITHUB_OUTPUT
          fi
          
          # Docker detection
          if find . -name "Dockerfile*" -o -name "docker-compose*.yml" -o -name "docker-compose*.yaml" | head -1 | grep -q .; then
            echo "has-docker=true" >> $GITHUB_OUTPUT
            echo "✅ Docker project detected"
          else
            echo "has-docker=false" >> $GITHUB_OUTPUT
          fi
          
          # Protobuf detection
          if [[ -f "buf.yaml" || -f "buf.gen.yaml" ]] || find . -name "*.proto" | head -1 | grep -q .; then
            echo "has-protobuf=true" >> $GITHUB_OUTPUT
            echo "✅ Protobuf project detected"
          else
            echo "has-protobuf=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate build matrices
        id: matrix
        run: |
          # Go matrix
          GO_VERSIONS='${{ inputs.go-versions }}'
          GO_MATRIX=$(echo "$GO_VERSIONS" | jq -c '{
            include: [
              .[] as $version | {
                "go-version": $version,
                "os": "ubuntu-latest",
                "primary": ($version == "1.24")
              }
            ]
          }')
          echo "go-matrix=$GO_MATRIX" >> $GITHUB_OUTPUT
          
          # Python matrix
          PYTHON_VERSIONS='${{ inputs.python-versions }}'
          PYTHON_MATRIX=$(echo "$PYTHON_VERSIONS" | jq -c '{
            include: [
              .[] as $version | {
                "python-version": $version,
                "os": "ubuntu-latest", 
                "primary": ($version == "3.12")
              }
            ]
          }')
          echo "python-matrix=$PYTHON_MATRIX" >> $GITHUB_OUTPUT
          
          # Frontend matrix
          NODE_VERSIONS='${{ inputs.node-versions }}'
          FRONTEND_MATRIX=$(echo "$NODE_VERSIONS" | jq -c '{
            include: [
              .[] as $version | {
                "node-version": $version,
                "os": "ubuntu-latest",
                "primary": ($version == "22")
              }
            ]
          }')
          echo "frontend-matrix=$FRONTEND_MATRIX" >> $GITHUB_OUTPUT
          
          # Rust matrix
          RUST_VERSIONS='${{ inputs.rust-versions }}'
          RUST_MATRIX=$(echo "$RUST_VERSIONS" | jq -c '{
            include: [
              .[] as $version | {
                "rust-version": $version,
                "os": "ubuntu-latest",
                "primary": ($version == "1.76")
              }
            ]
          }')
          echo "rust-matrix=$RUST_MATRIX" >> $GITHUB_OUTPUT

  # Protobuf generation
  protobuf:
    name: Generate Protobuf
    runs-on: ubuntu-latest
    needs: detect
    if: (always() && ((needs.detect.outputs.has-protobuf == 'true' && inputs.enable-protobuf) || inputs.protobuf-needed == 'true'))
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate protobuf
        run: |
          if [[ -f "buf.gen.yaml" ]]; then
            echo "Generating protobuf code..."
            buf generate
            echo "✅ Protobuf generation completed"
          else
            echo "⚠️ No buf.gen.yaml found, skipping generation"
          fi

      - name: Upload protobuf artifacts
        uses: actions/upload-artifact@v4
        with:
          name: protobuf-generated
          path: |
            **/*.pb.go
            **/*_pb2.py
            **/*_pb2_grpc.py
            **/*.pb.js
            **/*.pb.ts
          retention-days: 1

  # Call individual build workflows (plugin system)
  # This ensures modular architecture where each language build is independent

  go-build:
    if: always() && (inputs.matrix != '{}' || needs.detect.outputs.has-go == 'true')
    uses: ./.github/workflows/release-go.yml
    needs: [detect, protobuf]
    with:
      matrix: ${{ inputs.matrix != '{}' && inputs.matrix || needs.detect.outputs.go-matrix }}
      skip-tests: ${{ inputs.skip-tests }}
      protobuf-artifacts-available: ${{ needs.protobuf.result == 'success' }}
    secrets: inherit

  python-build:
    if: always() && (inputs.matrix != '{}' || needs.detect.outputs.has-python == 'true')
    uses: ./.github/workflows/release-python.yml
    needs: [detect, protobuf]
    with:
      matrix: ${{ inputs.matrix != '{}' && inputs.matrix || needs.detect.outputs.python-matrix }}
      skip-tests: ${{ inputs.skip-tests }}
      protobuf-artifacts-available: ${{ needs.protobuf.result == 'success' }}
    secrets: inherit

  frontend-build:
    if: always() && (inputs.matrix != '{}' || needs.detect.outputs.has-frontend == 'true')
    uses: ./.github/workflows/release-javascript.yml
    needs: [detect, protobuf]
    with:
      matrix: ${{ inputs.matrix != '{}' && inputs.matrix || needs.detect.outputs.frontend-matrix }}
      skip-tests: ${{ inputs.skip-tests }}
      protobuf-artifacts-available: ${{ needs.protobuf.result == 'success' }}
    secrets: inherit

  rust-build:
    if: always() && (inputs.matrix != '{}' || needs.detect.outputs.has-rust == 'true')
    uses: ./.github/workflows/release-rust.yml
    needs: [detect, protobuf]
    with:
      matrix: ${{ inputs.matrix != '{}' && inputs.matrix || needs.detect.outputs.rust-matrix }}
      skip-tests: ${{ inputs.skip-tests }}
      protobuf-artifacts-available: ${{ needs.protobuf.result == 'success' }}
    secrets: inherit

  docker-build:
    if: always() && inputs.enable-docker && (inputs.matrix != '{}' || needs.detect.outputs.has-docker == 'true')
    uses: ./.github/workflows/docker.yml
    needs: [detect, protobuf]
    with:
      protobuf-artifacts-available: ${{ needs.protobuf.result == 'success' }}
    secrets: inherit

  # Final status
  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [detect, protobuf, go-build, python-build, frontend-build, rust-build, docker-build]
    if: always()
    steps:
      - name: Check status
        run: |
          echo "## 🏗️ Reusable Matrix Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check each job
          PROTOBUF_STATUS="${{ needs.protobuf.result }}"
          GO_STATUS="${{ needs.go-build.result }}"
          PYTHON_STATUS="${{ needs.python-build.result }}"
          FRONTEND_STATUS="${{ needs.frontend-build.result }}"
          RUST_STATUS="${{ needs.rust-build.result }}"
          DOCKER_STATUS="${{ needs.docker-build.result }}"
          
          # Report status
          if [[ "$PROTOBUF_STATUS" == "success" || "$PROTOBUF_STATUS" == "skipped" ]]; then
            echo "✅ **Protobuf**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Protobuf**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$GO_STATUS" == "success" || "$GO_STATUS" == "skipped" ]]; then
            echo "✅ **Go Build**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Go Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$PYTHON_STATUS" == "success" || "$PYTHON_STATUS" == "skipped" ]]; then
            echo "✅ **Python Build**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Python Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$FRONTEND_STATUS" == "success" || "$FRONTEND_STATUS" == "skipped" ]]; then
            echo "✅ **Frontend Build**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$RUST_STATUS" == "success" || "$RUST_STATUS" == "skipped" ]]; then
            echo "✅ **Rust Build**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Rust Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$DOCKER_STATUS" == "success" || "$DOCKER_STATUS" == "skipped" ]]; then
            echo "✅ **Docker Build**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for failures
          if [[ "$GO_STATUS" == "failure" || 
                "$PYTHON_STATUS" == "failure" || 
                "$FRONTEND_STATUS" == "failure" || 
                "$RUST_STATUS" == "failure" ||
                "$DOCKER_STATUS" == "failure" || 
                "$PROTOBUF_STATUS" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Overall Status**: FAILED" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Overall Status**: PASSED" >> $GITHUB_STEP_SUMMARY
          fi