# file: .github/workflows/reusable-unified-issue-management.yml
#
# Unified Issue Management Reusable Workflow
#
# This reusable workflow provides comprehensive issue management functionality
# that can be shared across multiple repositories.
#
# Features:
# - Process issue updates from both legacy and distributed JSON formats
# - Support dual-GUID format for enhanced duplicate prevention
# - Support for sub-issues with automatic parent linking and labeling
# - Manage Copilot review comment tickets
# - Close duplicate issues by title
# - Generate tickets for CodeQL security alerts
# - Comprehensive logging and summary generation
# - Automatic file archiving with processed file tracking
# - Matrix-based parallel execution
#
# Usage:
#   Call this workflow from your repository's workflow with:
#   uses: jdfalk/ghcommon/.github/workflows/reusable-unified-issue-management.yml@main
#
# Note: This reusable workflow inherits permissions from the calling workflow.
# The calling workflow must provide appropriate permissions:
#   permissions:
#     contents: write        # For creating commits and PRs
#     issues: write          # For creating and updating issues
#     pull-requests: write   # For creating PRs
#     security-events: read  # For reading CodeQL alerts
#     repository-projects: write # For adding items to projects
#     actions: read          # For workflow access
#     checks: write          # For workflow status
#     statuses: write        # For commit status updates
#
# Repository Settings Required:
# For automatic PR creation, ensure these repository settings:
# - Settings → Actions → General → Workflow permissions:
#   ✅ Read and write permissions
#   ✅ Allow GitHub Actions to create and approve pull requests
#
# For examples, see:
# - examples/workflows/issue-management-basic.yml
# - examples/workflows/issue-management-advanced.yml

name: Reusable - Unified Issue Management

on:
  workflow_call:
    inputs:
      operations:
        description: "Operations to run (comma-separated: update-issues, copilot-tickets, close-duplicates, codeql-alerts, update-permalinks, 'all' to run all, or 'auto' to auto-detect). Example: 'all' or 'update-issues,copilot-tickets'"
        required: false
        type: string
        default: "auto"
      dry_run:
        description: "Run in dry-run mode (no changes)"
        required: false
        type: boolean
        default: false
      force_update:
        description: "Force update existing tickets"
        required: false
        type: boolean
        default: false
      issue_updates_file:
        description: "Path to issue updates JSON file"
        required: false
        type: string
        default: "issue_updates.json"
      issue_updates_directory:
        description: "Path to directory containing individual issue update files"
        required: false
        type: string
        default: ".github/issue-updates"
      cleanup_issue_updates:
        description: "Whether to clean up the issue updates file after processing"
        required: false
        type: boolean
        default: true
      python_version:
        description: "Python version to use"
        required: false
        type: string
        default: "3.11"
      enable_duplicate_prevention:
        description: "Enable duplicate prevention during issue creation"
        required: false
        type: boolean
        default: true
      enable_duplicate_closure:
        description: "Enable automatic closure of duplicate issues"
        required: false
        type: boolean
        default: true
      duplicate_prevention_method:
        description: "Method for duplicate detection (guid_and_title, guid_only, title_only)"
        required: false
        type: string
        default: "guid_and_title"
      max_duplicate_check_issues:
        description: "Maximum number of issues to check for duplicates"
        required: false
        type: number
        default: 1000
    secrets:
      github-token:
        description: "GitHub token with necessary permissions for issue management"
        required: false

# Explicit permissions required for this reusable workflow
# Permissions removed - should be set in calling workflow
# See: https://docs.github.com/en/actions/using-workflows/reusing-workflows#supported-keywords-for-jobs-that-call-a-reusable-workflow
jobs:
  determine-operations:
    runs-on: ubuntu-latest
    outputs:
      operations: ${{ steps.determine.outputs.operations }}
      has_issue_updates: ${{ steps.determine.outputs.has_issue_updates }}
      event_name: ${{ steps.context.outputs.event_name }}
      triggered_by: ${{ steps.context.outputs.triggered_by }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          echo "📥 Downloading requirements.txt from ghcommon..."
          curl -fsSL https://raw.githubusercontent.com/jdfalk/ghcommon/main/requirements.txt -o requirements.txt
          pip install -r requirements.txt

      - name: Set workflow context
        id: context
        run: |
          echo "event_name=${{ github.event_name }}" >> "$GITHUB_OUTPUT"
          echo "triggered_by=${{ github.triggering_actor }}" >> "$GITHUB_OUTPUT"

      - name: Download determine operations script
        run: |
          echo "📥 Downloading determine operations script from ghcommon..."
          curl -fsSL https://raw.githubusercontent.com/jdfalk/ghcommon/main/scripts/determine_operations.py -o determine_operations.py
          chmod +x determine_operations.py
          echo "✅ Downloaded determine_operations.py"

      - name: Determine operations to run
        id: determine
        run: |
          python determine_operations.py
        env:
          OPERATIONS_INPUT: ${{ inputs.operations }}
          EVENT_NAME: ${{ github.event_name }}
          ISSUE_UPDATES_FILE: ${{ inputs.issue_updates_file }}
          ISSUE_UPDATES_DIRECTORY: ${{ inputs.issue_updates_directory }}

  issue-management:
    runs-on: ubuntu-latest
    needs: determine-operations
    if: ${{ needs.determine-operations.outputs.operations != '[]' }}
    env:
      # Use enhanced PAT for cross-repo operations and project management
      # Intelligent token selection: prefer custom token, fallback to github-token secret, then GITHUB_TOKEN
      GH_TOKEN: ${{ secrets.JF_CI_GH_PAT || secrets.github-token || secrets.GITHUB_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.JF_CI_GH_PAT || secrets.github-token || secrets.GITHUB_TOKEN }}
    outputs:
      operations_completed: ${{ steps.set-outputs.outputs.operations_completed }}
      files_processed: ${{ steps.set-outputs.outputs.files_processed }}
      issues_created: ${{ steps.set-outputs.outputs.issues_created }}
      issues_updated: ${{ steps.set-outputs.outputs.issues_updated }}
      prs_created: ${{ steps.set-outputs.outputs.prs_created }}
      errors_encountered: ${{ steps.set-outputs.outputs.errors_encountered }}
    strategy:
      matrix:
        operation: ${{ fromJson(needs.determine-operations.outputs.operations) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Download issue manager script
        run: |
          echo "📥 Downloading issue manager script from ghcommon..."
          curl -fsSL https://raw.githubusercontent.com/jdfalk/ghcommon/main/scripts/issue_manager.py -o issue_manager.py
          chmod +x issue_manager.py
          echo "✅ Downloaded issue_manager.py"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          echo "📥 Downloading requirements.txt from ghcommon..."
          curl -fsSL https://raw.githubusercontent.com/jdfalk/ghcommon/main/requirements.txt -o requirements.txt
          pip install -r requirements.txt

      - name: Debug operation info
        run: |
          echo "🔧 Operation: ${{ matrix.operation }}"
          echo "📅 Event: ${{ needs.determine-operations.outputs.event_name }}"
          echo "🏃 Triggered by: ${{ needs.determine-operations.outputs.triggered_by }}"
          echo "📁 Repository: ${{ github.repository }}"
          echo "🔍 Dry run: ${{ inputs.dry_run }}"
          echo "⚡ Force update: ${{ inputs.force_update }}"
          echo "📄 Legacy issue updates file: ${{ inputs.issue_updates_file }}"
          echo "📁 Issue updates directory: ${{ inputs.issue_updates_directory }}"

      - name: Execute operation
        id: execute
        run: |
          echo "🚀 Executing: ${{ matrix.operation }}"

          # Set environment variables
          export DRY_RUN="${{ inputs.dry_run }}"
          export FORCE_UPDATE="${{ inputs.force_update }}"
          export ISSUE_UPDATES_FILE="${{ inputs.issue_updates_file }}"
          export ISSUE_UPDATES_DIRECTORY="${{ inputs.issue_updates_directory }}"
          export ENABLE_DUPLICATE_PREVENTION="${{ inputs.enable_duplicate_prevention }}"
          export ENABLE_DUPLICATE_CLOSURE="${{ inputs.enable_duplicate_closure }}"
          export DUPLICATE_PREVENTION_METHOD="${{ inputs.duplicate_prevention_method }}"
          export MAX_DUPLICATE_CHECK_ISSUES="${{ inputs.max_duplicate_check_issues }}"

          # Run the operation and capture output and errors
          set +e
          python issue_manager.py ${{ matrix.operation }} > op_stdout.log 2> op_stderr.log
          status=$?
          set -e
          echo "status=$status" >> "$GITHUB_OUTPUT"
          cat op_stdout.log > op_output.log
          cat op_stderr.log >> op_output.log
          # Save output for later summary
          echo "op_stdout=$(cat op_stdout.log | base64 -w 0)" >> "$GITHUB_OUTPUT"
          echo "op_stderr=$(cat op_stderr.log | base64 -w 0)" >> "$GITHUB_OUTPUT"
          echo "op_status=$status" >> "$GITHUB_OUTPUT"

          # Check if any files were processed and moved
          if [[ -d "${{ inputs.issue_updates_directory }}/processed" ]]; then
            processed_files=$(find "${{ inputs.issue_updates_directory }}/processed" -name "*.json" -newer . 2>/dev/null | wc -l || echo "0")
            echo "processed_files_count=$processed_files" >> "$GITHUB_OUTPUT"
            echo "📦 Found $processed_files newly processed files"
          else
            echo "processed_files_count=0" >> "$GITHUB_OUTPUT"
          fi

          # Check if any changes were made to tracked files for PR creation
          if [[ "${{ matrix.operation }}" == "update-issues" ]]; then
            # Check for changes in the issue updates directory
            if git diff --quiet HEAD -- "${{ inputs.issue_updates_directory }}/"; then
              echo "files_changed=false" >> "$GITHUB_OUTPUT"
            else
              echo "files_changed=true" >> "$GITHUB_OUTPUT"
            fi

            # Check for changes in the legacy file
            if [[ -f "${{ inputs.issue_updates_file }}" ]] && ! git diff --quiet HEAD -- "${{ inputs.issue_updates_file }}"; then
              echo "legacy_file_changed=true" >> "$GITHUB_OUTPUT"
            else
              echo "legacy_file_changed=false" >> "$GITHUB_OUTPUT"
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.JF_CI_GH_PAT || secrets.github-token || secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}

      - name: Generate timestamp
        id: timestamp
        run: |
          echo "current=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$GITHUB_OUTPUT"

      - name: Check for existing archive PRs
        if: ${{ matrix.operation == 'update-issues' && inputs.dry_run != true }}
        id: check-prs
        run: |
          # Check for existing processed files PR
          existing_processed=$(gh pr list --base "${{ github.event.repository.default_branch }}" --head "archive-processed-files" --state open --json number,headRefName --jq '.[0].number // empty')
          if [[ -n "$existing_processed" ]]; then
            echo "existing_processed_pr=$existing_processed" >> "$GITHUB_OUTPUT"
            echo "🔍 Found existing processed files PR: #$existing_processed"
          else
            echo "existing_processed_pr=" >> "$GITHUB_OUTPUT"
            echo "🔍 No existing processed files PR found"
          fi

          # Check for existing legacy file PR
          existing_legacy=$(gh pr list --base "${{ github.event.repository.default_branch }}" --head "update-issue-permalinks" --state open --json number,headRefName --jq '.[0].number // empty')
          if [[ -n "$existing_legacy" ]]; then
            echo "existing_legacy_pr=$existing_legacy" >> "$GITHUB_OUTPUT"
            echo "🔍 Found existing legacy file PR: #$existing_legacy"
          else
            echo "existing_legacy_pr=" >> "$GITHUB_OUTPUT"
            echo "🔍 No existing legacy file PR found"
          fi
        env:
          GH_TOKEN: ${{ secrets.JF_CI_GH_PAT || secrets.github-token || secrets.GITHUB_TOKEN }}

      - name: Create PR for processed distributed files
        if: ${{ matrix.operation == 'update-issues' && inputs.dry_run != true && steps.execute.outputs.files_changed == 'true' }}
        id: processed-files-pr
        continue-on-error: true
        uses: peter-evans/create-pull-request@v7
        with:
          base: ${{ github.event.repository.default_branch }}
          branch: archive-processed-files
          commit-message: "📦 Archive processed issue update files (run ${{ github.run_id }})"
          title: "📦 Archive processed distributed issue update files"
          body: |
            ## Summary
            Automatically archiving processed distributed issue update files to the `processed/` directory.

            **Latest Operation:** ${{ matrix.operation }}
            **Latest Workflow run:** [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Event:** ${{ needs.determine-operations.outputs.event_name }}
            **Triggered by:** ${{ needs.determine-operations.outputs.triggered_by }}
            **Updated:** ${{ steps.timestamp.outputs.current }}

            ### Changes
            - Moved processed distributed issue update files from `${{ inputs.issue_updates_directory }}/` to `${{ inputs.issue_updates_directory }}/processed/`
            - These files have been successfully processed and their corresponding GitHub issues have been created/updated
            - Archiving prevents re-processing and maintains a clean workflow

            ### Files Processed
            This PR archives individual JSON files from the distributed update format that were successfully processed in recent workflow runs.

            **Note:** This PR is automatically updated when new files are processed. If you're using the legacy `issue_updates.json` format, that will be handled in a separate PR.

            ---
            This PR is auto-generated and maintained by the unified issue management workflow.

            **Existing PR found:** ${{ steps.check-prs.outputs.existing_processed_pr != '' && 'Yes - Updated existing PR' || 'No - Created new PR' }}
          delete-branch: false
          add-paths: |
            ${{ inputs.issue_updates_directory }}/

      - name: Create PR for legacy file permalink updates
        if: ${{ matrix.operation == 'update-issues' && needs.determine-operations.outputs.has_issue_updates == 'true' && inputs.dry_run != true && steps.execute.outputs.legacy_file_changed == 'true' }}
        id: legacy-file-pr
        continue-on-error: true
        uses: peter-evans/create-pull-request@v7
        with:
          base: ${{ github.event.repository.default_branch }}
          branch: update-issue-permalinks
          commit-message: "🔗 Update ${{ inputs.issue_updates_file }} with issue permalinks (run ${{ github.run_id }})"
          title: "🔗 Update issue tracking with permalinks"
          body: |
            ## Summary
            Automatically updating `${{ inputs.issue_updates_file }}` with permalinks to processed issues.

            **Latest Operation:** ${{ matrix.operation }}
            **Latest Workflow run:** [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Event:** ${{ needs.determine-operations.outputs.event_name }}
            **Triggered by:** ${{ needs.determine-operations.outputs.triggered_by }}
            **Updated:** ${{ steps.timestamp.outputs.current }}

            This allows tracking which issues have been processed and provides direct links to the GitHub issues.

            **Note:** This PR is automatically updated when the legacy file is modified. This is separate from the distributed files archive PR as it updates the legacy format file with permalink metadata.

            ---
            This PR is auto-generated and maintained by the unified issue management workflow.

            **Existing PR found:** ${{ steps.check-prs.outputs.existing_legacy_pr != '' && 'Yes - Updated existing PR' || 'No - Created new PR' }}
          delete-branch: false
          add-paths: |
            ${{ inputs.issue_updates_file }}

      - name: Handle PR creation results
        if: ${{ matrix.operation == 'update-issues' && inputs.dry_run != true }}
        run: |
          echo "📊 PR Creation Results:" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          # Check processed files PR
          if [[ "${{ steps.processed-files-pr.outcome }}" == "failure" ]]; then
            echo "❌ **Failed to create processed files PR**" >> "$GITHUB_STEP_SUMMARY"
            echo "   - This usually means GitHub Actions doesn't have permission to create PRs" >> "$GITHUB_STEP_SUMMARY"
            echo "   - Files were successfully processed but couldn't be archived via PR" >> "$GITHUB_STEP_SUMMARY"
            echo "   - Manual archiving may be needed" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          elif [[ "${{ steps.processed-files-pr.outputs.pull-request-number }}" != "" ]]; then
            echo "✅ **Processed Files PR:** [#${{ steps.processed-files-pr.outputs.pull-request-number }}](${{ steps.processed-files-pr.outputs.pull-request-url }})" >> "$GITHUB_STEP_SUMMARY"
          fi

          # Check legacy file PR
          if [[ "${{ steps.legacy-file-pr.outcome }}" == "failure" ]]; then
            echo "❌ **Failed to create legacy file PR**" >> "$GITHUB_STEP_SUMMARY"
            echo "   - This usually means GitHub Actions doesn't have permission to create PRs" >> "$GITHUB_STEP_SUMMARY"
            echo "   - Permalink updates were made but couldn't be committed via PR" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          elif [[ "${{ steps.legacy-file-pr.outputs.pull-request-number }}" != "" ]]; then
            echo "✅ **Legacy File PR:** [#${{ steps.legacy-file-pr.outputs.pull-request-number }}](${{ steps.legacy-file-pr.outputs.pull-request-url }})" >> "$GITHUB_STEP_SUMMARY"
          fi

          # Provide guidance for PR permission issues
          if [[ "${{ steps.processed-files-pr.outcome }}" == "failure" || "${{ steps.legacy-file-pr.outcome }}" == "failure" ]]; then
            echo "### 💡 Repository Settings" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "To enable automatic PR creation, check these repository settings:" >> "$GITHUB_STEP_SUMMARY"
            echo "1. Go to **Settings** → **Actions** → **General**" >> "$GITHUB_STEP_SUMMARY"
            echo "2. Under **Workflow permissions**, select:" >> "$GITHUB_STEP_SUMMARY"
            echo "   - ✅ **Read and write permissions**" >> "$GITHUB_STEP_SUMMARY"
            echo "   - ✅ **Allow GitHub Actions to create and approve pull requests**" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "Alternatively, use a Personal Access Token with appropriate permissions." >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Output PR information
        if: ${{ matrix.operation == 'update-issues' && inputs.dry_run != true }}
        run: |
          echo "📋 Pull Request Summary:" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          # Show information about existing PRs that might be open
          if [[ "${{ steps.check-prs.outputs.existing_processed_pr }}" != "" && "${{ steps.processed-files-pr.outputs.pull-request-number }}" == "" ]]; then
            echo "📦 **Existing Distributed Files Archive PR:** [#${{ steps.check-prs.outputs.existing_processed_pr }}](https://github.com/${{ github.repository }}/pull/${{ steps.check-prs.outputs.existing_processed_pr }}) (No new changes to add)" >> "$GITHUB_STEP_SUMMARY"
          fi

          if [[ "${{ steps.check-prs.outputs.existing_legacy_pr }}" != "" && "${{ steps.legacy-file-pr.outputs.pull-request-number }}" == "" ]]; then
            echo "🔗 **Existing Legacy File Update PR:** [#${{ steps.check-prs.outputs.existing_legacy_pr }}](https://github.com/${{ github.repository }}/pull/${{ steps.check-prs.outputs.existing_legacy_pr }}) (No new changes to add)" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Generate detailed operation summary
        if: always()
        run: |
          echo "## 🎯 Operation Summary: ${{ matrix.operation }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Status:** $([[ \"${{ steps.execute.outputs.op_status }}\" == \"0\" ]] && echo '✅ Completed successfully' || echo '❌ Failed')" >> "$GITHUB_STEP_SUMMARY"
          echo "**Event:** ${{ needs.determine-operations.outputs.event_name }}" >> "$GITHUB_STEP_SUMMARY"
          echo "**Repository:** ${{ github.repository }}" >> "$GITHUB_STEP_SUMMARY"
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$GITHUB_STEP_SUMMARY"

          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "**Mode:** 🔍 Dry run (no changes made)" >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### 📝 Operation Output (stdout)" >> "$GITHUB_STEP_SUMMARY"
          if [[ -f op_stdout.log ]]; then
            echo '\n```\n' >> "$GITHUB_STEP_SUMMARY"
            cat op_stdout.log >> "$GITHUB_STEP_SUMMARY"
            echo '\n```\n' >> "$GITHUB_STEP_SUMMARY"
          else
            echo "_No stdout output captured._" >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "### ⚠️ Operation Errors (stderr)" >> "$GITHUB_STEP_SUMMARY"
          if [[ -f op_stderr.log && -s op_stderr.log ]]; then
            echo '\n```\n' >> "$GITHUB_STEP_SUMMARY"
            cat op_stderr.log >> "$GITHUB_STEP_SUMMARY"
            echo '\n```\n' >> "$GITHUB_STEP_SUMMARY"
          else
            echo "_No errors captured._" >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "---" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          # Show detailed error information if available
          if [[ "${{ steps.execute.outputs.op_status }}" != "0" ]]; then
            echo "### ❌ Error Details" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "The operation \`${{ matrix.operation }}\` encountered an error during execution." >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "#### Exit Status" >> "$GITHUB_STEP_SUMMARY"
            echo "```${{ steps.execute.outputs.op_status }}```" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"

            if [[ -f op_stdout.log ]]; then
              echo "#### Standard Output (stdout)" >> "$GITHUB_STEP_SUMMARY"
              echo '\n```\n' >> "$GITHUB_STEP_SUMMARY"
              cat op_stdout.log >> "$GITHUB_STEP_SUMMARY"
              echo '\n```\n' >> "$GITHUB_STEP_SUMMARY"
            fi

            if [[ -f op_stderr.log && -s op_stderr.log ]]; then
              echo "#### Standard Error (stderr)" >> "$GITHUB_STEP_SUMMARY"
              echo '\n```\n' >> "$GITHUB_STEP_SUMMARY"
              cat op_stderr.log >> "$GITHUB_STEP_SUMMARY"
              echo '\n```\n' >> "$GITHUB_STEP_SUMMARY"
            fi
          fi

      - name: Set job outputs for summary aggregation
        id: set-outputs
        run: |
          echo "operations_completed=${{ matrix.operation }}" >> "$GITHUB_OUTPUT"

          # Extract file processing information
          files_processed="${{ steps.execute.outputs.processed_files_count || '0' }}"
          echo "files_processed=$files_processed" >> "$GITHUB_OUTPUT"

          # Extract PR creation information
          prs_created=0
          pr_links=""

          if [[ "${{ steps.processed-files-pr.outputs.pull-request-number }}" != "" ]]; then
            prs_created=$((prs_created + 1))
            pr_links="${pr_links}#${{ steps.processed-files-pr.outputs.pull-request-number }},"
          fi

          if [[ "${{ steps.legacy-file-pr.outputs.pull-request-number }}" != "" ]]; then
            prs_created=$((prs_created + 1))
            pr_links="${pr_links}#${{ steps.legacy-file-pr.outputs.pull-request-number }},"
          fi

          echo "prs_created=$prs_created" >> "$GITHUB_OUTPUT"
          echo "pr_links=${pr_links%,}" >> "$GITHUB_OUTPUT"

          # For now, set placeholder values for issues created/updated
          # These would need to be extracted from the Python script output
          echo "issues_created=0" >> "$GITHUB_OUTPUT"
          echo "issues_updated=0" >> "$GITHUB_OUTPUT"

          # Check for any errors (simplified check)
          if [[ "${{ steps.execute.outputs.status }}" == "completed" ]]; then
            echo "errors_encountered=0" >> "$GITHUB_OUTPUT"
          else
            echo "errors_encountered=1" >> "$GITHUB_OUTPUT"
          fi

  workflow-summary:
    runs-on: ubuntu-latest
    needs: [determine-operations, issue-management]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download collect results script
        run: |
          echo "📥 Downloading collect results script from ghcommon..."
          curl -fsSL https://raw.githubusercontent.com/jdfalk/ghcommon/main/scripts/collect_results.py -o collect_results.py
          chmod +x collect_results.py
          echo "✅ Downloaded collect_results.py"

      - name: Collect operation results and changed files
        id: collect
        run: |
          python collect_results.py

      - name: Set up Python for summary generation
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          echo "📥 Downloading requirements.txt from ghcommon..."
          curl -fsSL https://raw.githubusercontent.com/jdfalk/ghcommon/main/requirements.txt -o requirements.txt
          pip install -r requirements.txt

      - name: Download workflow summary script
        run: |
          echo "📥 Downloading workflow summary script from ghcommon..."
          curl -fsSL https://raw.githubusercontent.com/jdfalk/ghcommon/main/scripts/workflow_summary.py -o workflow_summary.py
          chmod +x workflow_summary.py
          echo "✅ Downloaded workflow_summary.py"

      - name: Generate comprehensive workflow summary
        run: |
          python workflow_summary.py
        env:
          OPERATIONS_JSON: ${{ needs.determine-operations.outputs.operations }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          EVENT_NAME: ${{ needs.determine-operations.outputs.event_name }}
          TRIGGERED_BY: ${{ needs.determine-operations.outputs.triggered_by }}
          ISSUE_MANAGEMENT_RESULT: ${{ needs.issue-management.result }}
          OPERATIONS_MODE: ${{ inputs.operations }}
          DRY_RUN: ${{ inputs.dry_run }}
          FORCE_UPDATE: ${{ inputs.force_update }}
          ISSUE_UPDATES_FILE: ${{ inputs.issue_updates_file }}
          ISSUE_UPDATES_DIRECTORY: ${{ inputs.issue_updates_directory }}
