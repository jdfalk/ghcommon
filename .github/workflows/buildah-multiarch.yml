# file: .github/workflows/buildah-multiarch.yml
name: Multi-Arch Container Build

on:
  workflow_call:
    inputs:
      image-name:
        description: "Container image name (without registry)"
        required: true
        type: string
      registry:
        description: "Container registry URL"
        required: false
        default: "ghcr.io"
        type: string
      dockerfile:
        description: "Path to Dockerfile"
        required: false
        default: "./Dockerfile"
        type: string
      context:
        description: "Build context path"
        required: false
        default: "."
        type: string
      platforms:
        description: "Target platforms (comma-separated)"
        required: false
        default: "linux/amd64,linux/arm64"
        type: string
      build-args:
        description: "Build arguments (JSON object)"
        required: false
        default: "{}"
        type: string
      push:
        description: "Push images to registry"
        required: false
        default: true
        type: boolean
      generate-sbom:
        description: "Generate SBOM (Software Bill of Materials)"
        required: false
        default: true
        type: boolean
      generate-attestation:
        description: "Generate build attestation"
        required: false
        default: true
        type: boolean
      scan-vulnerability:
        description: "Scan for vulnerabilities"
        required: false
        default: true
        type: boolean
      tag-suffix:
        description: "Additional tag suffix (e.g., -dev, -staging)"
        required: false
        default: ""
        type: string
    outputs:
      image-digest:
        description: "The image digest"
        value: ${{ jobs.build.outputs.digest }}
      image-url:
        description: "The full image URL with digest"
        value: ${{ jobs.build.outputs.image-url }}
      sbom-path:
        description: "Path to generated SBOM"
        value: ${{ jobs.build.outputs.sbom-path }}

jobs:
  build:
    name: Build Multi-Arch Container
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image-url }}
      sbom-path: ${{ steps.sbom.outputs.sbom-path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Install Buildah and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y buildah podman skopeo jq

          # Install syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

          # Install cosign for signing
          curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
          sudo chmod +x /usr/local/bin/cosign

          # Install grype for vulnerability scanning
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Log in to Container Registry
        if: inputs.push == true
        env:
          REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$REGISTRY_TOKEN" | buildah login --username ${{ github.actor }} --password-stdin ${{ inputs.registry }}

      - name: Generate metadata
        id: meta
        run: |
          IMAGE_NAME="${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.image-name }}"

          # Generate tags
          TAGS=""
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
            TAGS="$IMAGE_NAME:$VERSION${{ inputs.tag-suffix }}"
            TAGS="$TAGS,$IMAGE_NAME:latest${{ inputs.tag-suffix }}"
          elif [ "${{ github.ref_name }}" = "main" ] || [ "${{ github.ref_name }}" = "master" ]; then
            TAGS="$IMAGE_NAME:main${{ inputs.tag-suffix }}"
            TAGS="$TAGS,$IMAGE_NAME:latest${{ inputs.tag-suffix }}"
          else
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | tr '/' '-')
            TAGS="$IMAGE_NAME:$BRANCH_NAME${{ inputs.tag-suffix }}"
          fi

          # Add commit SHA tag
          TAGS="$TAGS,$IMAGE_NAME:sha-${{ github.sha }}${{ inputs.tag-suffix }}"

          echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "build-timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build multi-arch container
        id: build
        run: |
          IMAGE_NAME="${{ steps.meta.outputs.image-name }}"
          TAGS="${{ steps.meta.outputs.tags }}"
          PLATFORMS="${{ inputs.platforms }}"

          # Parse build args
          BUILD_ARGS='${{ inputs.build-args }}'
          BUILDAH_ARGS=""
          if [ "$BUILD_ARGS" != "{}" ]; then
            BUILDAH_ARGS=$(echo "$BUILD_ARGS" | jq -r 'to_entries[] | "--build-arg \(.key)=\(.value)"' | tr '\n' ' ')
          fi

          # Create manifest
          MANIFEST_NAME="$IMAGE_NAME:manifest-${{ github.sha }}"
          buildah manifest create "$MANIFEST_NAME"

          # Build for each platform
          IFS=',' read -ra PLATFORM_ARRAY <<< "$PLATFORMS"
          for platform in "${PLATFORM_ARRAY[@]}"; do
            echo "Building for platform: $platform"
            ARCH=$(echo "$platform" | cut -d'/' -f2)

            # Build container
            buildah build \
              --platform="$platform" \
              --manifest="$MANIFEST_NAME" \
              --file="${{ inputs.dockerfile }}" \
              --label="org.opencontainers.image.title=${{ inputs.image-name }}" \
              --label="org.opencontainers.image.description=Built with GitHub Actions" \
              --label="org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}" \
              --label="org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
              --label="org.opencontainers.image.version=${{ github.ref_name }}" \
              --label="org.opencontainers.image.created=${{ steps.meta.outputs.build-timestamp }}" \
              --label="org.opencontainers.image.revision=${{ github.sha }}" \
              --label="org.opencontainers.image.licenses=MIT" \
              $BUILDAH_ARGS \
              "${{ inputs.context }}"
          done

          # Push manifest if requested
          if [ "${{ inputs.push }}" = "true" ]; then
            # Push with all tags
            IFS=',' read -ra TAG_ARRAY <<< "$TAGS"
            for tag in "${TAG_ARRAY[@]}"; do
              echo "Pushing $tag"
              buildah manifest push --all "$MANIFEST_NAME" "docker://$tag"
            done

            # Get digest
            DIGEST=$(buildah manifest inspect "$MANIFEST_NAME" | jq -r '.digest')
            echo "digest=$DIGEST" >> $GITHUB_OUTPUT
            echo "image-url=$IMAGE_NAME@$DIGEST" >> $GITHUB_OUTPUT
          else
            echo "digest=local-build" >> $GITHUB_OUTPUT
            echo "image-url=$IMAGE_NAME:local" >> $GITHUB_OUTPUT
          fi

      - name: Generate SBOM
        id: sbom
        if: inputs.generate-sbom == true
        run: |
          IMAGE_URL="${{ steps.build.outputs.image-url }}"
          SBOM_PATH="./sbom.spdx.json"

          if [ "${{ inputs.push }}" = "true" ]; then
            syft "$IMAGE_URL" -o spdx-json > "$SBOM_PATH"
          else
            # For local builds, scan the manifest
            syft "oci-dir:./manifest" -o spdx-json > "$SBOM_PATH" || echo "{}" > "$SBOM_PATH"
          fi

          echo "sbom-path=$SBOM_PATH" >> $GITHUB_OUTPUT

      - name: Upload SBOM artifact
        if: inputs.generate-sbom == true
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: ${{ steps.sbom.outputs.sbom-path }}
          retention-days: 30

      - name: Vulnerability scan
        if: inputs.scan-vulnerability == true
        run: |
          IMAGE_URL="${{ steps.build.outputs.image-url }}"

          if [ "${{ inputs.push }}" = "true" ]; then
            echo "Running vulnerability scan..."
            grype "$IMAGE_URL" -o json > vulnerability-report.json || true
            grype "$IMAGE_URL" -o table
          else
            echo "Skipping vulnerability scan for local build"
            echo "{}" > vulnerability-report.json
          fi

      - name: Upload vulnerability report
        if: inputs.scan-vulnerability == true
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report-${{ github.sha }}
          path: vulnerability-report.json
          retention-days: 30

      - name: Generate build attestation
        if: inputs.generate-attestation == true && inputs.push == true
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          IMAGE_URL="${{ steps.build.outputs.image-url }}"

          # Create attestation
          cat > attestation.json << EOF
          {
            "buildType": "https://github.com/actions/runner",
            "builder": {
              "id": "https://github.com/actions/runner"
            },
            "invocation": {
              "configSource": {
                "uri": "${{ github.server_url }}/${{ github.repository }}",
                "digest": {
                  "sha1": "${{ github.sha }}"
                }
              }
            },
            "metadata": {
              "buildStartedOn": "${{ steps.meta.outputs.build-timestamp }}",
              "completeness": {
                "parameters": true,
                "environment": false,
                "materials": false
              },
              "reproducible": false
            },
            "materials": [
              {
                "uri": "${{ github.server_url }}/${{ github.repository }}",
                "digest": {
                  "sha1": "${{ github.sha }}"
                }
              }
            ]
          }
          EOF

          # Sign and attach attestation
          cosign attest --predicate attestation.json "$IMAGE_URL" --yes

      - name: Sign container image
        if: inputs.push == true
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          IMAGE_URL="${{ steps.build.outputs.image-url }}"
          echo "Signing container image: $IMAGE_URL"
          cosign sign "$IMAGE_URL" --yes

      - name: Cleanup
        if: always()
        run: |
          buildah manifest rm "${{ steps.meta.outputs.image-name }}:manifest-${{ github.sha }}" || true
