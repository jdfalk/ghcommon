# file: .github/workflows/release-rust.yml
# version: 1.0.0
# guid: b2c3d4e5-f6a7-8b9c-0d1e-2f3a4b5c6d7e
#
# ⚠️  CENTRAL SOURCE OF TRUTH: This file is maintained in jdfalk/ghcommon
# To update this workflow:
# 1. Edit the file in jdfalk/ghcommon/.github/workflows/release-rust.yml
# 2. Commit changes to ghcommon
# 3. Copy to other repositories using the sync process
#
# DO NOT edit this file directly in individual repositories!

# file: .github/workflows/release-rust.yml
# version: 1.0.0
# guid: a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d
# DO NOT EDIT: This file is managed centrally in ghcommon repository
# To update: Edit the version in jdfalk/ghcommon and it will be synced to all repos

name: Rust Release

on:
  workflow_call:
    inputs:
      release_type:
        description: "Release type"
        required: false
        default: "auto"
        type: string
      prerelease:
        description: "Is this a prerelease?"
        required: false
        default: false
        type: boolean
      draft:
        description: "Create as draft?"
        required: false
        default: false
        type: boolean
    outputs:
      version:
        description: "The released version"
        value: ${{ jobs.release.outputs.version }}
      tag:
        description: "The release tag"
        value: ${{ jobs.release.outputs.tag }}

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      changelog: ${{ steps.version.outputs.changelog }}
      should-release: ${{ steps.version.outputs.should-release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Create package.json for semantic-release
        run: |
          python3 ./.github/scripts/sync-release-create-package-json.py rust
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          RELEASE_TYPE: ${{ inputs.release_type }}

      - name: Create semantic-release config
        run: |
          python3 ./.github/scripts/sync-release-create-semantic-config.py rust
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          PRERELEASE: ${{ inputs.prerelease }}
      - name: Install dependencies
        run: npm install

      - name: Determine next version
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          RELEASE_TYPE: ${{ inputs.release_type }}
        run: |
          python3 ./.github/scripts/sync-release-determine-version.py rust

  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: determine-version
    if: needs.determine-version.outputs.should-release == 'true'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-amd64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-amd64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: darwin-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: darwin-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-amd64
            ext: .exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-x86-64-linux-gnu musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Update Cargo.toml version
        shell: bash
        run: |
          sed -i 's/^version = ".*"/version = "${{ needs.determine-version.outputs.version }}"/' Cargo.toml

      - name: Build binary
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Get binary name from Cargo.toml
        id: binary-name
        shell: bash
        run: |
          # Extract binary name from Cargo.toml
          if grep -q "^\[\[bin\]\]" Cargo.toml; then
            BINARY_NAME=$(awk '/\[\[bin\]\]/{flag=1; next} flag && /^name =/{gsub(/[" ]/, "", $3); print $3; exit}' Cargo.toml)
          else
            # Fall back to package name
            BINARY_NAME=$(grep '^name = ' Cargo.toml | head -1 | sed 's/name = "\(.*\)"/\1/')
          fi
          echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT
          echo "Binary name: $BINARY_NAME"

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p releases
          tar -czf releases/${{ steps.binary-name.outputs.binary_name }}-${{ needs.determine-version.outputs.version }}-${{ matrix.name }}.tar.gz \
            -C target/${{ matrix.target }}/release ${{ steps.binary-name.outputs.binary_name }}

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir releases
          Compress-Archive -Path target/${{ matrix.target }}/release/${{ steps.binary-name.outputs.binary_name }}.exe -DestinationPath releases/${{ steps.binary-name.outputs.binary_name }}-${{ needs.determine-version.outputs.version }}-${{ matrix.name }}.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.binary-name.outputs.binary_name }}-${{ matrix.name }}
          path: releases/*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [determine-version, build]
    if: needs.determine-version.outputs.should-release == 'true'
    outputs:
      version: ${{ needs.determine-version.outputs.version }}
      tag: ${{ needs.determine-version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./releases
          merge-multiple: true

      - name: List artifacts
        run: ls -la ./releases/

      - name: Create package.json for semantic-release
        run: |
          python3 ./.github/scripts/sync-release-create-package-json.py rust
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          RELEASE_TYPE: ${{ inputs.release_type }}

      - name: Create semantic-release config
        run: |
          python3 ./.github/scripts/sync-release-create-semantic-config.py rust
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          PRERELEASE: ${{ inputs.prerelease }}

      - name: Install dependencies
        run: npm install

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          RELEASE_TYPE: ${{ inputs.release_type }}
          PRERELEASE: ${{ inputs.prerelease }}
          DRAFT: ${{ inputs.draft }}
          RELEASE_VERSION: ${{ needs.determine-version.outputs.version }}
          RELEASE_TAG: ${{ needs.determine-version.outputs.tag }}
          RELEASE_NOTES: ${{ needs.determine-version.outputs.changelog }}
        run: |
          python3 ./.github/scripts/sync-release-handle-manual-release.py rust

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [determine-version, release]
    if: needs.determine-version.outputs.should-release == 'true' && !inputs.prerelease
    steps:
      - name: Update Homebrew formula
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Homebrew formula update would go here"
          echo "Version: ${{ needs.determine-version.outputs.version }}"
          echo "Tag: ${{ needs.determine-version.outputs.tag }}"
          # This would typically update a homebrew-tap repository
          # or submit a PR to homebrew/homebrew-core
