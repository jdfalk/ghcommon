# file: .github/workflows/release-rust.yml
# version: 1.8.1
# guid: b5c6d7e8-f9a0-1b2c-3d4e-5f6a7b8c9d0e

name: Rust Release Build

on:
  workflow_call:
    inputs:
      protobuf-artifacts:
        description: "Whether protobuf artifacts are available"
        required: false
        type: string
        default: "false"
      release-version:
        description: "Release tag (e.g., v1.2.3) used to align crate metadata"
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  # Rust cross-platform build with comprehensive support
  build-rust:
    name: Build Rust (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x86_64
            primary: true
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-arm64
            primary: false
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-x86_64-musl
            primary: false
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x86_64
            primary: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download protobuf artifacts
        if: inputs.protobuf-artifacts == 'true'
        uses: actions/download-artifact@v5
        with:
          name: protobuf-generated

      - name: Debug environment and detect version
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Environment Debug Information"
          echo "================================="
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Input release-version: '${{ inputs.release-version }}'"
          echo ""

          # Check if Cargo.toml exists and show its content
          if [[ -f "Cargo.toml" ]]; then
            echo "üìã Found existing Cargo.toml:"
            echo "---"
            head -10 Cargo.toml
            echo "---"
          else
            echo "‚ùå No Cargo.toml found - this might be the wrong repository type"
            echo "ÔøΩ Contents of current directory:"
            ls -la
            exit 1
          fi

          echo ""
          echo "ÔøΩüîç Detecting version using GitHub API..."

          # Try to get version from input first
          INPUT_VERSION="${{ inputs.release-version }}"
          echo "üì• Input version: '$INPUT_VERSION'"

          if [[ -n "$INPUT_VERSION" && "$INPUT_VERSION" != "--workspace" && "$INPUT_VERSION" != "" ]]; then
            VERSION="${INPUT_VERSION#v}"
            echo "‚úÖ Using input version: $VERSION"
          else
            echo "üåê Querying GitHub API for latest release..."

            # Get latest release from GitHub API with better error handling
            API_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest")

            HTTP_STATUS=$(echo "$API_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            BODY=$(echo "$API_RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')

            echo "üì° API HTTP Status: $HTTP_STATUS"

            if [[ "$HTTP_STATUS" == "200" ]]; then
              LATEST_RELEASE=$(echo "$BODY" | grep '"tag_name"' | cut -d'"' -f4 || echo "")

              if [[ -n "$LATEST_RELEASE" ]]; then
                # Increment patch version
                LATEST_VERSION="${LATEST_RELEASE#v}"
                echo "üè∑Ô∏è Latest release: $LATEST_VERSION"

                # Parse version components
                IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
                MAJOR=${MAJOR:-0}
                MINOR=${MINOR:-0}
                PATCH=${PATCH:-0}

                # Increment patch for new version
                NEW_PATCH=$((PATCH + 1))
                VERSION="$MAJOR.$MINOR.$NEW_PATCH"
                echo "üÜô Generated new version: $VERSION"
              else
                echo "‚ö†Ô∏è No tag_name found in API response"
                VERSION="0.1.0"
              fi
            else
              echo "‚ö†Ô∏è API call failed with status $HTTP_STATUS"
              if [[ "$HTTP_STATUS" == "404" ]]; then
                echo "üì¶ No releases found, starting with 0.1.0"
              fi
              VERSION="0.1.0"
            fi
          fi

          # Final validation and cleanup
          if [[ "$VERSION" == "--workspace" ]]; then
            echo "‚ùå CRITICAL: Version is '--workspace', this should never happen!"
            VERSION="0.1.0-emergency.$(date +%Y%m%d%H%M%S)"
          elif [[ -z "$VERSION" ]]; then
            echo "‚ùå CRITICAL: Version is empty!"
            VERSION="0.1.0-emergency.$(date +%Y%m%d%H%M%S)"
          elif ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+'; then
            echo "‚ö†Ô∏è Version '$VERSION' doesn't match semver, fixing..."
            VERSION="0.1.0-dev.$(date +%Y%m%d%H%M%S)"
          fi

          echo ""
          echo "‚úÖ Final version: $VERSION"

          # Install cargo-set-version if needed
          if ! command -v cargo-set-version >/dev/null 2>&1; then
            echo "üì¶ Installing cargo-set-version..."
            cargo install cargo-set-version --locked
          fi

          # Set the version with explicit validation
          echo "üîß Setting crate version to: $VERSION"

          # Method 1: Try cargo-set-version with correct syntax
          echo "üîç Attempting Method 1: cargo set-version $VERSION"
          if cargo set-version "$VERSION"; then
            echo "‚úÖ Method 1 successful"
          else
            echo "‚ö†Ô∏è Method 1 failed, trying Method 2"

            # Method 2: Use sed to directly update Cargo.toml
            echo "üîç Method 2: Direct sed replacement"
            if [[ -f "Cargo.toml" ]]; then
              # Backup original
              cp Cargo.toml Cargo.toml.backup

              # Update version line
              sed -i.tmp "s/^version = .*/version = \"$VERSION\"/" Cargo.toml

              # Check if it worked
              if grep -q "^version = \"$VERSION\"" Cargo.toml; then
                echo "‚úÖ Method 2 successful"
                rm -f Cargo.toml.tmp Cargo.toml.backup
              else
                echo "‚ùå Method 2 failed, restoring backup"
                mv Cargo.toml.backup Cargo.toml
                exit 1
              fi
            else
              echo "‚ùå No Cargo.toml found"
              exit 1
            fi
          fi

          # Verify the change
          echo ""
          echo "üìã Verifying Cargo.toml after version update:"
          if [[ -f "Cargo.toml" ]]; then
            echo "Version line:"
            grep "^version" Cargo.toml || echo "‚ùå No version line found!"
            echo ""
            echo "First 10 lines of Cargo.toml:"
            head -10 Cargo.toml
          fi
          echo "üìã Verifying Cargo.toml version:"
          if [[ -f "Cargo.toml" ]]; then
            grep "^version" Cargo.toml || echo "‚ùå No version line found in Cargo.toml"
          fi

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          components: rustfmt, clippy

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ matrix.target }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-${{ matrix.target }}-
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ matrix.target }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-${{ matrix.target }}-
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.target }}-
            ${{ runner.os }}-cargo-build-

      - name: Run Clippy
        if: matrix.primary
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        if: matrix.primary
        run: cargo test --verbose

      - name: Build release binary
        env:
          # Export cross-compilation environment variables for robustness
          CC: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: ${{ matrix.target == 'x86_64-unknown-linux-musl' && 'musl-gcc' || '' }}
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/$(basename $(pwd)) dist/$(basename $(pwd))-${{ matrix.name }}
          chmod +x dist/$(basename $(pwd))-${{ matrix.name }}

      - name: Prepare binary (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir dist
          copy target\\${{ matrix.target }}\\release\\$(Split-Path -Leaf $(Get-Location)).exe dist\\$(Split-Path -Leaf $(Get-Location))-${{ matrix.name }}.exe

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-${{ matrix.name }}
          path: dist/
