# file: .github/workflows/reusable-goreleaser.yml
# version: 1.0.0
# guid: a1b2c3d4-e5f6-7890-abcd-ef0123456789

name: Reusable GoReleaser

on:
  workflow_call:
    inputs:
      go-version:
        description: "Go version to use"
        required: false
        type: string
        default: "1.23"
      release-type:
        description: "Type of release (patch, minor, major, prerelease)"
        required: false
        type: string
        default: "patch"
      dry-run:
        description: "Run in dry-run mode (no actual release)"
        required: false
        type: boolean
        default: false
      snapshot:
        description: "Create snapshot release (for development)"
        required: false
        type: boolean
        default: false
    secrets:
      GITHUB_TOKEN:
        required: true

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      previous-version: ${{ steps.version.outputs.previous-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: latest-tag
        run: |
          LATEST_TAG=$(git tag -l --sort=-version:refname | head -n1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "latest-tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Calculate next version
        id: version
        run: |
          LATEST_TAG="${{ steps.latest-tag.outputs.latest-tag }}"
          echo "Previous version: $LATEST_TAG"

          # Remove 'v' prefix if present
          VERSION=${LATEST_TAG#v}

          # Split version into components
          IFS='.' read -ra ADDR <<< "$VERSION"
          MAJOR=${ADDR[0]:-0}
          MINOR=${ADDR[1]:-0}
          PATCH=${ADDR[2]:-0}

          # Increment based on release type
          case "${{ inputs.release-type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
            "prerelease")
              # For prerelease, add -alpha.X suffix
              COMMIT_COUNT=$(git rev-list --count HEAD)
              NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}-alpha.${COMMIT_COUNT}"
              echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
              echo "previous-version=$LATEST_TAG" >> $GITHUB_OUTPUT
              echo "New version: $NEW_VERSION"
              exit 0
              ;;
          esac

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "previous-version=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

  release:
    needs: determine-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          install-only: true

      - name: Create GoReleaser config
        run: |
          cat > .goreleaser.yml << 'EOF'
          version: 2

          before:
            hooks:
              - go mod tidy
              - go generate ./...

          builds:
            - env:
                - CGO_ENABLED=0
              goos:
                - linux
                - windows
                - darwin
              goarch:
                - "386"
                - amd64
                - arm
                - arm64
              main: ./cmd/...
              skip: true # Skip if no cmd directory

          archives:
            - format: tar.gz
              name_template: >-
                {{ .ProjectName }}_
                {{- title .Os }}_
                {{- if eq .Arch "amd64" }}x86_64
                {{- else if eq .Arch "386" }}i386
                {{- else }}{{ .Arch }}{{ end }}
                {{- if .Arm }}v{{ .Arm }}{{ end }}
              format_overrides:
                - goos: windows
                  format: zip

          checksum:
            name_template: 'checksums.txt'

          snapshot:
            name_template: "{{ incpatch .Version }}-next"

          changelog:
            sort: asc
            filters:
              exclude:
                - '^docs:'
                - '^test:'
          EOF

      - name: Create tag
        if: ${{ !inputs.dry-run && !inputs.snapshot }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ needs.determine-version.outputs.version }}" -m "Release ${{ needs.determine-version.outputs.version }}"
          git push origin "${{ needs.determine-version.outputs.version }}"

      - name: Run GoReleaser (Release)
        if: ${{ !inputs.dry-run && !inputs.snapshot }}
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser (Snapshot)
        if: ${{ inputs.snapshot }}
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser (Dry Run)
        if: ${{ inputs.dry-run }}
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --snapshot --skip=publish --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    needs: [determine-version, release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.determine-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version**: ${{ needs.determine-version.outputs.previous-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: ${{ inputs.release-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ inputs.dry-run }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Snapshot**: ${{ inputs.snapshot }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Go Version**: ${{ inputs.go-version }}" >> $GITHUB_STEP_SUMMARY
