# file: .github/workflows/protobuf-generation.yml
# version: 1.5.0
# guid: a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d

name: Protobuf Generation

on:
  workflow_call:
    inputs:
      has-go:
        description: "Whether Go is detected"
        required: false
        type: string
        default: "false"
      has-python:
        description: "Whether Python is detected"
        required: false
        type: string
        default: "false"
    outputs:
      artifacts-available:
        description: "Whether protobuf artifacts were generated"
        value: ${{ jobs.generate-protobuf.outputs.artifacts-available }}

permissions:
  contents: read

jobs:
  generate-protobuf:
    name: Generate Protobuf Code
    runs-on: ubuntu-latest
    outputs:
      artifacts-available: ${{ steps.set-artifacts.outputs.artifacts-available }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Go
        if: inputs.has-go == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
          cache: false

      - name: Set up Python
        if: inputs.has-python == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Protocol Buffers Compiler (protoc)
        run: |
          echo "Installing protoc..."
          # Install protoc from GitHub releases
          PROTOC_VERSION="28.2"
          curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-x86_64.zip"
          unzip -q protoc-${PROTOC_VERSION}-linux-x86_64.zip -d protoc
          sudo mv protoc/bin/protoc /usr/local/bin/
          sudo mv protoc/include/* /usr/local/include/
          sudo chmod +x /usr/local/bin/protoc
          rm -rf protoc protoc-${PROTOC_VERSION}-linux-x86_64.zip

          # Verify protoc installation
          protoc --version

      - name: Set up Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install protobuf Go plugins
        if: inputs.has-go == 'true'
        run: |
          echo "Installing protobuf Go plugins..."
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

          # Add Go bin to PATH
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

          # Verify installations
          which protoc-gen-go
          which protoc-gen-go-grpc
          protoc-gen-go --version
          protoc-gen-go-grpc --version

      - name: Install Python protobuf plugins
        if: inputs.has-python == 'true'
        run: |
          echo "Installing Python protobuf plugins..."
          python -m pip install --upgrade pip
          python -m pip install grpcio-tools mypy-protobuf

          # Verify installations
          which protoc-gen-python || echo "protoc-gen-python not found in PATH"
          python -c "import grpc_tools.protoc; print('grpc_tools.protoc available')"
          python -c "import mypy_protobuf; print('mypy-protobuf available')"

      - name: Generate protobuf code
        run: |
          python3 -c "
          import os, subprocess

          # Debug environment
          print('Environment check:')
          print(f'Working directory: {os.getcwd()}')
          print(f'buf.gen.yaml exists: {os.path.exists(\"buf.gen.yaml\")}')
          print(f'buf.yaml exists: {os.path.exists(\"buf.yaml\")}')

          # List proto files if any
          for root, dirs, files in os.walk('.'):
              for file in files:
                  if file.endswith('.proto'):
                      print(f'Found proto file: {os.path.join(root, file)}')

          # Check PATH and installed tools
          print('\\nInstalled tools:')
          subprocess.run(['which', 'protoc'])
          subprocess.run(['which', 'buf'])
          subprocess.run(['protoc', '--version'])
          subprocess.run(['buf', '--version'])

          if os.path.exists('buf.gen.yaml'):
              print('\\nGenerating protobuf code with buf...')
              with open('buf.gen.yaml', 'r') as f:
                  print('buf.gen.yaml content:')
                  print(f.read())

              result = subprocess.run(['buf', 'generate'], capture_output=True, text=True)
              print(f'buf generate stdout: {result.stdout}')
              print(f'buf generate stderr: {result.stderr}')
              if result.returncode != 0:
                  print('buf generate failed!')
                  exit(1)
              print('Generated protobuf code successfully')
          else:
              print('No buf.gen.yaml found, skipping generation')
          "

      - name: Run post-generation processing
        if: always()
        run: |
          if [ -f "scripts/post-buf-generate.py" ]; then
            echo "Running post-buf-generate.py..."
            python3 scripts/post-buf-generate.py
          else
            echo "No post-buf-generate.py script found, skipping post-processing"
          fi

      - name: Upload generated protobuf artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: protobuf-generated
          path: |
            sdks/go/**/*.pb.go
            sdks/go/**/*_grpc.pb.go
            sdks/python/**/*.py
            sdks/python/**/*.pyi
          if-no-files-found: ignore

      - name: Set artifacts available
        id: set-artifacts
        run: |
          # Check if any protobuf files were generated in the correct directories
          if find sdks/go -name "*.pb.go" -o -name "*_grpc.pb.go" 2>/dev/null | head -1 | grep -q . || \
             find sdks/python -name "*.py" -o -name "*.pyi" 2>/dev/null | head -1 | grep -q .; then
            echo "artifacts-available=true" >> $GITHUB_OUTPUT
            echo "Protobuf artifacts were generated"
            echo "Generated Go files:"
            find sdks/go -name "*.pb.go" -o -name "*_grpc.pb.go" 2>/dev/null | head -5
            echo "Generated Python files:"
            find sdks/python -name "*.py" -o -name "*.pyi" 2>/dev/null | head -5
          else
            echo "artifacts-available=false" >> $GITHUB_OUTPUT
            echo "No protobuf artifacts were generated"
          fi
