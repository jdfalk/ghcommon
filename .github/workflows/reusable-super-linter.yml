# file: .github/workflows/reusable-super-linter.yml
# version: 2.3.0
# guid: b2c3d4e5-f6a7-89bc-def0-123456789bcd

name: Reusable - Super Linter

on:
  workflow_call:
    inputs:
      validate-all-codebase:
        description: "Validate entire codebase instead of just changed files"
        required: false
        default: false
        type: boolean
      default-branch:
        description: "The default branch of the repository"
        required: false
        default: "main"
        type: string
      config-file:
        description: "Path to Super Linter configuration file"
        required: false
        default: ".github/super-linter.env"
        type: string
      filter-regex-exclude:
        description: "Regex to exclude files from linting"
        required: false
        default: ".*\\.git/.*|.*\\.github/copilot/.*|.*\\.vscode/.*|.*node_modules/.*|.*\\.cache/.*"
        type: string
      run-python:
        description: "Enable Python linting"
        required: false
        default: true
        type: boolean
      run-shell:
        description: "Enable shell script linting"
        required: false
        default: true
        type: boolean
      run-markdown:
        description: "Enable Markdown linting"
        required: false
        default: true
        type: boolean
      run-yaml:
        description: "Enable YAML linting"
        required: false
        default: true
        type: boolean
      run-json:
        description: "Enable JSON linting"
        required: false
        default: true
        type: boolean
      run-javascript:
        description: "Enable JavaScript/TypeScript linting"
        required: false
        default: true
        type: boolean
      run-go:
        description: "Enable Go linting"
        required: false
        default: true
        type: boolean
      run-css:
        description: "Enable CSS linting"
        required: false
        default: true
        type: boolean
      run-html:
        description: "Enable HTML linting"
        required: false
        default: true
        type: boolean
      run-github-actions:
        description: "Enable GitHub Actions linting"
        required: false
        default: true
        type: boolean
      run-security:
        description: "Enable security scanning (secrets, Dockerfile)"
        required: false
        default: true
        type: boolean
      enable-auto-fix:
        description: "Enable auto-fixing for supported linters and formatters"
        required: false
        default: true
        type: boolean
      auto-commit-fixes:
        description: "Automatically commit and push fixes when running on main branch or PRs"
        required: false
        default: true
        type: boolean
      commit-message:
        description: "Commit message for auto-fixes"
        required: false
        default: "style: auto-fix linting issues [skip ci]"
        type: string

    secrets:
      github-token:
        description: "GitHub token with necessary permissions for linting and auto-fix"
        required: false

jobs:
  super-linter:
    name: Super Linter
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # Full git history is needed to get list of changed files
          fetch-depth: 0
          token: ${{ secrets.github-token || secrets.GITHUB_TOKEN }}

      - name: Setup Super Linter environment
        run: |
          echo "Setting up Super Linter environment..."
          echo "VALIDATE_ALL_CODEBASE=${{ inputs.validate-all-codebase }}" >> $GITHUB_ENV
          echo "DEFAULT_BRANCH=${{ inputs.default-branch }}" >> $GITHUB_ENV
          echo "FILTER_REGEX_EXCLUDE=${{ inputs.filter-regex-exclude }}" >> $GITHUB_ENV

      - name: Load custom configuration
        run: |
          if [ -f "${{ inputs.config-file }}" ]; then
            echo "Loading custom configuration from ${{ inputs.config-file }}"
            # Filter out comments and empty lines when loading config
            grep -v '^#' "${{ inputs.config-file }}" | grep -v '^$' >> $GITHUB_ENV
          else
            echo "No custom configuration file found at ${{ inputs.config-file }}"
          fi

      - name: Run Super Linter
        id: run-super-linter
        uses: super-linter/super-linter@v7
        env:
          # Basic configuration
          DEFAULT_BRANCH: ${{ inputs.default-branch }}
          GITHUB_TOKEN: ${{ secrets.github-token || secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: ${{ inputs.validate-all-codebase }}
          FILTER_REGEX_EXCLUDE: ${{ inputs.filter-regex-exclude }}

          # Output and display settings
          SUPPRESS_POSSUM: true
          LOG_LEVEL: NOTICE
          OUTPUT_FORMAT: colored
          OUTPUT_FOLDER: super-linter-output
          OUTPUT_DETAILS: detailed
          CREATE_LOG_FILE: true

          # Language validation settings
          VALIDATE_PYTHON: ${{ inputs.run-python }}
          VALIDATE_PYTHON_BLACK: ${{ inputs.run-python }}
          VALIDATE_PYTHON_FLAKE8: ${{ inputs.run-python }}
          VALIDATE_PYTHON_ISORT: ${{ inputs.run-python }}

          VALIDATE_BASH: ${{ inputs.run-shell }}
          VALIDATE_SHELL_SHFMT: ${{ inputs.run-shell }}

          VALIDATE_MARKDOWN: ${{ inputs.run-markdown }}
          VALIDATE_YAML: ${{ inputs.run-yaml }}
          VALIDATE_JSON: ${{ inputs.run-json }}

          VALIDATE_JAVASCRIPT_ES: ${{ inputs.run-javascript }}
          VALIDATE_TYPESCRIPT_ES: ${{ inputs.run-javascript }}
          VALIDATE_JAVASCRIPT_PRETTIER: ${{ inputs.run-javascript }}
          VALIDATE_TYPESCRIPT_PRETTIER: ${{ inputs.run-javascript }}

          VALIDATE_GO: ${{ inputs.run-go }}
          VALIDATE_GO_MODULES: ${{ inputs.run-go }}

          VALIDATE_CSS: ${{ inputs.run-css }}
          VALIDATE_HTML: ${{ inputs.run-html }}

          VALIDATE_GITHUB_ACTIONS: ${{ inputs.run-github-actions }}
          VALIDATE_GITLEAKS: ${{ inputs.run-security }}
          VALIDATE_DOCKERFILE_HADOLINT: ${{ inputs.run-security }}

          # Auto-fix settings (enable for supported linters)
          FIX_GO: ${{ inputs.enable-auto-fix && inputs.run-go }}
          FIX_JAVASCRIPT_ES: ${{ inputs.enable-auto-fix && inputs.run-javascript }}
          FIX_TYPESCRIPT_ES: ${{ inputs.enable-auto-fix && inputs.run-javascript }}
          FIX_JSON: ${{ inputs.enable-auto-fix }}
          FIX_MARKDOWN: ${{ inputs.enable-auto-fix }}
          FIX_PYTHON_BLACK: ${{ inputs.enable-auto-fix && inputs.run-python }}
          FIX_PYTHON_ISORT: ${{ inputs.enable-auto-fix && inputs.run-python }}
          FIX_SHELL_SHFMT: ${{ inputs.enable-auto-fix && inputs.run-shell }}
          FIX_YAML: ${{ inputs.enable-auto-fix }}
          FIX_CSS: ${{ inputs.enable-auto-fix && inputs.run-css }}

      - name: Check for auto-fixes
        if: inputs.enable-auto-fix == true
        id: check-fixes
        run: |
          if ! git diff --quiet; then
            echo "has_fixes=true" >> $GITHUB_OUTPUT
            echo "Auto-fixes were applied by Super Linter"
          else
            echo "has_fixes=false" >> $GITHUB_OUTPUT
            echo "No auto-fixes were applied"
          fi

      - name: Commit and push auto-fixes
        if: steps.check-fixes.outputs.has_fixes == 'true' && inputs.auto-commit-fixes == true
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          echo "Staging auto-fixes..."
          git add -A

          # Create detailed commit message
          FIXED_FILES=$(git diff --cached --name-only | head -10)
          TOTAL_FILES=$(git diff --cached --name-only | wc -l)

          echo "${{ inputs.commit-message }}" > commit_msg.txt
          echo "" >> commit_msg.txt
          echo "Auto-formatting and fixes applied by Super Linter." >> commit_msg.txt
          echo "" >> commit_msg.txt
          echo "Files changed:" >> commit_msg.txt

          echo "$FIXED_FILES" | while IFS= read -r file; do
            echo "- $file - Auto-formatting applied" >> commit_msg.txt
          done

          if [ "$TOTAL_FILES" -gt 10 ]; then
            echo "- ... and $((TOTAL_FILES - 10)) more files" >> commit_msg.txt
          fi

          git commit -F commit_msg.txt
          rm commit_msg.txt

          echo "Pushing auto-fixes..."
          git push
          echo "✅ Auto-fixes committed and pushed successfully"

      - name: Prepare Super Linter outputs
        if: always()
        run: |
          # Ensure output directory exists
          mkdir -p super-linter-output

          # Copy any log files to output directory
          if [ -f "super-linter.log" ]; then
            cp super-linter.log super-linter-output/
          fi

          # Copy all log files from Super Linter output folder
          if [ -d "super-linter-output" ]; then
            find super-linter-output -name "*.log" -type f 2>/dev/null | head -10 | while read logfile; do
              echo "Found log file: $logfile"
            done
          fi

          # Create a summary file
          echo "Super Linter execution completed at $(date)" > super-linter-output/summary.txt
          echo "Validation mode: ${{ inputs.validate-all-codebase && 'Full codebase' || 'Changed files only' }}" >> super-linter-output/summary.txt
          echo "Super Linter outcome: ${{ steps.run-super-linter.outcome }}" >> super-linter-output/summary.txt

          # List all files in output directory for debugging
          echo "Files in super-linter-output:" >> super-linter-output/summary.txt
          ls -la super-linter-output/ >> super-linter-output/summary.txt 2>/dev/null || echo "No files found" >> super-linter-output/summary.txt

      - name: Upload Super Linter results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: super-linter-output
          path: super-linter-output/
          retention-days: 7
          if-no-files-found: warn

      - name: Comment PR with linting results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          AUTO_COMMIT_ENABLED: ${{ inputs.auto-commit-fixes }}
        with:
          github-token: ${{ secrets.github-token || secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Skip if not a pull request
            if (!context.payload.pull_request) {
              console.log('Not a pull request, skipping summary comment');
              return;
            }

            const linterOutcome = '${{ steps.run-super-linter.outcome }}' || 'unknown';
            const autoFixEnabled = '${{ inputs.enable-auto-fix }}' === 'true';
            const autoCommitEnabled = process.env.AUTO_COMMIT_ENABLED === 'true';
            const hasAutoFixes = '${{ steps.check-fixes.outputs.has_fixes }}' === 'true';

            let summary = '## 🔍 Super Linter Results\n\n';

            // Add status based on outcome
            if (linterOutcome === 'success') {
              summary += '✅ **All code quality checks passed!**\n\n';
            } else if (linterOutcome === 'failure') {
              summary += '❌ **Code quality issues found.** Please review the details below.\n\n';
            } else {
              summary += '⚠️ **Linter status unknown.** Check the workflow logs for details.\n\n';
            }

            // Auto-fix information
            if (autoFixEnabled && hasAutoFixes && autoCommitEnabled) {
              summary += '🔧 **Auto-fixes were applied and committed to this PR.**\n\n';
            } else if (autoFixEnabled && hasAutoFixes) {
              summary += '🔧 **Auto-fixes were applied but not committed.**\n\n';
            }

            // Configuration summary
            summary += '### Configuration\n';
            summary += `- **Validate all codebase**: \`${{ inputs.validate-all-codebase }}\`\n`;
            summary += `- **Python**: \`${{ inputs.run-python }}\`\n`;
            summary += `- **Shell**: \`${{ inputs.run-shell }}\`\n`;
            summary += `- **Go**: \`${{ inputs.run-go }}\`\n`;
            summary += `- **JavaScript/TypeScript**: \`${{ inputs.run-javascript }}\`\n`;
            summary += `- **Markdown**: \`${{ inputs.run-markdown }}\`\n`;
            summary += `- **YAML**: \`${{ inputs.run-yaml }}\`\n`;
            summary += `- **JSON**: \`${{ inputs.run-json }}\`\n`;
            summary += `- **CSS**: \`${{ inputs.run-css }}\`\n`;
            summary += `- **HTML**: \`${{ inputs.run-html }}\`\n`;
            summary += `- **GitHub Actions**: \`${{ inputs.run-github-actions }}\`\n`;
            summary += `- **Security**: \`${{ inputs.run-security }}\`\n`;
            summary += `- **Auto-fix**: \`${{ inputs.enable-auto-fix }}\`\n`;
            summary += `- **Auto-commit**: \`${{ inputs.auto-commit-fixes }}\`\n\n`;

            // Additional information for failed linting
            if (linterOutcome === 'failure') {
              summary += '### 🔧 Next Steps\n';
              summary += '1. Check the workflow logs for detailed error information\n';
              summary += '2. Download the Super Linter output artifact for detailed reports\n';
              summary += '3. Fix the identified issues and push the changes\n';
              if (autoFixEnabled) {
                summary += '4. Some issues may have been auto-fixed - check for new commits\n';
              }
              summary += '\n';

              // Try to include actual linting errors from the log files
              try {
                if (fs.existsSync('super-linter-output')) {
                  summary += '### 📋 Linting Issues Found\n';

                  // Read log files to extract actual errors
                  const logFiles = fs.readdirSync('super-linter-output').filter(f => f.endsWith('.log'));
                  let errorCount = 0;

                  for (const logFile of logFiles.slice(0, 5)) { // Limit to first 5 log files
                    if (errorCount >= 10) break; // Limit total errors shown

                    const logContent = fs.readFileSync(`super-linter-output/${logFile}`, 'utf8');
                    const lines = logContent.split('\n');

                    // Extract error lines (this is a simplified approach)
                    const errors = lines.filter(line =>
                      line.includes('ERROR') ||
                      line.includes('FAIL') ||
                      line.includes('error:') ||
                      line.includes('Error:')
                    ).slice(0, 3); // Max 3 errors per file

                    if (errors.length > 0) {
                      summary += `\n**${logFile}:**\n`;
                      summary += '```\n';
                      errors.forEach(error => {
                        if (error.trim() && errorCount < 10) {
                          summary += error.trim() + '\n';
                          errorCount++;
                        }
                      });
                      summary += '```\n';
                    }
                  }

                  if (errorCount === 0) {
                    summary += '\n*No specific errors found in logs. Check the workflow run details for more information.*\n';
                  } else if (errorCount >= 10) {
                    summary += '\n*... and more errors. Check the full logs for complete details.*\n';
                  }
                  summary += '\n';
                }
              } catch (error) {
                console.log('Could not read linting errors:', error);
                summary += '\n*Could not extract specific error details. Please check the workflow logs.*\n\n';
              }
            }

            summary += '### 📊 Artifacts\n';
            summary += 'Super Linter output artifacts are available for download for 7 days after the workflow run.\n\n';

            summary += '---\n*Generated by Super Linter v7*';

            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(c =>
              c.user.type === 'Bot' && c.body.includes('Super Linter Results')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: summary
              });
              console.log('Updated existing Super Linter comment');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
              console.log('Created new Super Linter comment');
            }
