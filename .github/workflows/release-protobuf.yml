# file: .github/workflows/release-protobuf.yml
# version: 1.3.0
# guid: 2d5c7e9a-4b3f-4b1a-a2d7-9f6e2c1b8a45

name: Release Protobuf Assets

on:
  workflow_call:
    inputs:
      build_target:
        description: "Optional build target filter (all|protobuf)"
        required: false
        type: string
      force:
        description: "Force generation even if no proto changes"
        required: false
        type: boolean
        default: false
      buf-module:
        description: "Override Buf module path (defaults to module declared in buf.yaml)"
        required: false
        type: string
    outputs:
      artifacts-available:
        description: "Indicates protobuf artifacts were generated (or existed)"
        value: ${{ jobs.generate.outputs.artifacts_available }}
      buf-published:
        description: "Indicates Buf push attempted"
        value: ${{ jobs.publish-buf.outputs.buf_published }}

env:
  GO_VERSION: "1.23.x"
  PYTHON_VERSION: "3.13"
  BUF_VERSION: "1.57.2"
  PROTOC_VERSION: "32.1"

jobs:
  generate:
    name: Generate Protobuf
    runs-on: ubuntu-latest
    outputs:
      artifacts_available: ${{ steps.artifact-status.outputs.artifacts_available }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Quick change detection
        id: changes
        run: |
          if git ls-files -m | grep -qE '(^|/)proto/.*\.proto$|buf\.ya?ml$|buf\.gen\.ya?ml$|scripts/setup-go-modules.py|scripts/setup-python-sdk.py'; then
            echo "proto_changed=true" >> $GITHUB_OUTPUT
          else
            if git diff --name-only origin/${GITHUB_BASE_REF:-main} | grep -qE '(^|/)proto/.*\.proto$|buf\.ya?ml$|buf\.gen\.ya?ml$'; then
              echo "proto_changed=true" >> $GITHUB_OUTPUT
            else
              echo "proto_changed=false" >> $GITHUB_OUTPUT
            fi
          fi
          echo "Build target input: '${{ inputs.build_target }}'"

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install protoc
        run: |
          PROTOC_VERSION="${{ env.PROTOC_VERSION }}"
          PB_REL="https://github.com/protocolbuffers/protobuf/releases"
          echo "Downloading protoc ${PROTOC_VERSION}..."
          curl -sSL -o protoc.zip $PB_REL/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-x86_64.zip
          unzip -q protoc.zip -d $HOME/protoc
          sudo cp $HOME/protoc/bin/protoc /usr/local/bin/
          sudo mkdir -p /usr/local/include
          sudo cp -r $HOME/protoc/include/* /usr/local/include/
          protoc --version

      - name: Install buf CLI
        run: |
          BUF_VERSION="${{ env.BUF_VERSION }}"
          echo "Installing buf ${BUF_VERSION}..."
          curl -sSL "https://github.com/bufbuild/buf/releases/download/v${BUF_VERSION}/buf-$(uname -s)-$(uname -m)" -o /tmp/buf
          sudo mv /tmp/buf /usr/local/bin/buf
          sudo chmod +x /usr/local/bin/buf
          buf --version

      - name: Install Go protoc plugins
        run: |
          echo "Installing protoc-gen-go..." && go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          echo "Installing protoc-gen-go-grpc..." && go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          protoc-gen-go --version || echo "protoc-gen-go version not reported"
          protoc-gen-go-grpc --version || echo "protoc-gen-go-grpc version not reported"

      - name: Lint protobufs
        run: |
          if [ -f buf.yaml ]; then
            echo "Running buf lint..."; buf lint
          else
            echo "No buf.yaml present, skipping lint"
          fi

      - name: Generate SDKs (make generate)
        id: generate
        run: |
          if [ "${{ steps.changes.outputs.proto_changed }}" = "true" ] || [ "${{ inputs.force }}" = "true" ]; then
            if make -n generate >/dev/null 2>&1; then
              echo "Running make generate..."; make generate
            else
              echo "Makefile generate target missing; running fallback buf generate"
              buf generate || exit 1
            fi
          else
            echo "No proto changes detected and force not enabled; skipping generation"
          fi

      - name: Determine artifact availability
        id: artifact-status
        run: |
          if [ "${{ steps.changes.outputs.proto_changed }}" = "true" ] || [ "${{ inputs.force }}" = "true" ]; then
            echo "artifacts_available=true" >> "$GITHUB_OUTPUT"
          else
            echo "artifacts_available=false" >> "$GITHUB_OUTPUT"
          fi

  publish-buf:
    name: Publish Buf Module
    runs-on: ubuntu-latest
    needs: generate
    if: needs.generate.outputs.artifacts_available == 'true'
    env:
      BUF_TOKEN: ${{ secrets.BUF_TOKEN }}
      BUF_MODULE_INPUT: ${{ inputs.buf-module }}
    outputs:
      buf_published: ${{ steps.summary.outputs.buf_published }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check Buf token
        id: token
        run: |
          if [ -n "${BUF_TOKEN}" ]; then
            echo "has-token=true" >> "$GITHUB_OUTPUT"
          else
            echo "has-token=false" >> "$GITHUB_OUTPUT"
            echo "BUF_TOKEN secret is not configured; skipping Buf publish."
          fi

      - name: Install buf CLI
        if: steps.token.outputs['has-token'] == 'true'
        uses: bufbuild/buf-setup-action@v1

      - name: Resolve Buf module
        if: steps.token.outputs['has-token'] == 'true'
        id: module
        shell: bash
        run: |
          set -euo pipefail

          module="${BUF_MODULE_INPUT}"
          if [ -z "${module}" ] && [ -f "buf.yaml" ]; then
            module=$(grep -E '^[[:space:]]*module:' buf.yaml | head -1 | awk '{print $2}')
          fi

          if [ -z "${module}" ]; then
            echo "::error::Unable to determine Buf module path. Set inputs.buf-module or ensure buf.yaml contains a module entry."
            exit 1
          fi

          echo "module=${module}" >> "$GITHUB_OUTPUT"

      - name: Publish module to Buf
        if: steps.token.outputs['has-token'] == 'true'
        id: publish
        shell: bash
        run: |
          set -euo pipefail

          tag="${GITHUB_REF#refs/tags/}"
          if [ "${tag}" = "${GITHUB_REF}" ]; then
            echo "::error::Buf publishing requires a tag trigger."
            exit 1
          fi

          module="${{ steps.module.outputs.module }}"
          echo "Publishing Buf module ${module} with tag ${tag}"

          buf registry login --token "${BUF_TOKEN}"
          buf push --tag "${tag}"

      - name: Buf publish summary
        id: summary
        if: always()
        shell: bash
        env:
          HAS_TOKEN: ${{ steps.token.outputs['has-token'] }}
          MODULE_PATH: ${{ steps.module.outputs.module }}
          PUBLISH_OUTCOME: ${{ steps.publish.outcome }}
        run: |
          status="skipped"
          message="- Skipped: BUF_TOKEN secret not configured."

          if [ "${HAS_TOKEN}" = "true" ]; then
            case "${PUBLISH_OUTCOME}" in
              success)
                status="success"
                tag="${GITHUB_REF#refs/tags/}"
                message="- ✅ Published Buf module \`${MODULE_PATH}\` with tag \`${tag}\`."
                ;;
              failure)
                status="failed"
                message="- ❌ Buf push failed. See logs above."
                ;;
              *)
                status="skipped"
                message="- Skipped: Buf publish step did not run."
                ;;
            esac
          fi

          echo "## Buf Module Publishing" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "${message}" >> "$GITHUB_STEP_SUMMARY"
          echo "buf_published=${status}" >> "$GITHUB_OUTPUT"
