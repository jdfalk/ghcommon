# file: .github/workflows/reusable-release.yml
# version: 2.6.0
# guid: 7b8c9d0e-1f2a-3b4c-5d6e-7f8a9b0c1d2e

name: Reusable Release Coordinator

on:
  workflow_call:
    inputs:
      release-type:
        description: "Release type (auto, major, minor, patch)"
        required: false
        type: string
        default: "auto"
      build-target:
        description: "Build target (all, go, python, rust, frontend, docker, protobuf)"
        required: false
        type: string
        default: "all"
      prerelease:
        description: "Create as prerelease"
        required: false
        type: boolean
        default: false
      draft:
        description: "Create as draft"
        required: false
        type: boolean
        default: false
      skip-language-detection:
        description: "Skip automatic language detection"
        required: false
        type: boolean
        default: false
      go-enabled:
        description: "Force enable Go builds"
        required: false
        type: boolean
        default: false
      python-enabled:
        description: "Force enable Python builds"
        required: false
        type: boolean
        default: false
      rust-enabled:
        description: "Force enable Rust builds"
        required: false
        type: boolean
        default: false
      frontend-enabled:
        description: "Force enable Frontend builds"
        required: false
        type: boolean
        default: false
      docker-enabled:
        description: "Force enable Docker builds"
        required: false
        type: boolean
        default: false
      protobuf-enabled:
        description: "Force enable Protobuf builds"
        required: false
        type: boolean
        default: false
    outputs:
      release-created:
        description: "Whether a release was created"
        value: ${{ jobs.build-status.outputs.release-created }}
      release-tag:
        description: "The created release tag"
        value: ${{ jobs.detect-languages.outputs.release-tag }}
      primary-language:
        description: "The detected primary language"
        value: ${{ jobs.detect-languages.outputs.primary-language }}
      release-strategy:
        description: "The release strategy used (stable, prerelease, draft)"
        value: ${{ jobs.detect-languages.outputs.release-branch-strategy }}

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Load unified configuration
  load-config:
    name: Load Repository Configuration
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.load-config.outputs.config }}
      has-config: ${{ steps.load-config.outputs.has-config }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Load repository configuration
        id: load-config
        env:
          CONFIG_FILE: .github/repository-config.yml
        run: |
          python3 .github/workflows/scripts/load_repository_config.py

  # Detect what languages/technologies are present
  detect-languages:
    name: Detect Project Languages
    runs-on: ubuntu-latest
    needs: [load-config]
    outputs:
      has-go: ${{ steps.detect.outputs.has-go }}
      has-python: ${{ steps.detect.outputs.has-python }}
      has-frontend: ${{ steps.detect.outputs.has-frontend }}
      has-docker: ${{ steps.detect.outputs.has-docker }}
      has-rust: ${{ steps.detect.outputs.has-rust }}
      protobuf-needed: ${{ steps.detect.outputs.protobuf-needed }}
      primary-language: ${{ steps.detect.outputs.primary-language }}
      go-matrix: ${{ steps.detect.outputs.go-matrix }}
      python-matrix: ${{ steps.detect.outputs.python-matrix }}
      frontend-matrix: ${{ steps.detect.outputs.frontend-matrix }}
      docker-matrix: ${{ steps.detect.outputs.docker-matrix }}
      rust-matrix: ${{ steps.detect.outputs.rust-matrix }}
      registry: ${{ steps.env-setup.outputs.registry }}
      image-name: ${{ steps.env-setup.outputs.image-name }}
      release-tag: ${{ steps.version.outputs.tag }}
      release-branch-strategy: ${{ steps.release-strategy.outputs.strategy }}
      auto-prerelease: ${{ steps.release-strategy.outputs.auto-prerelease }}
      auto-draft: ${{ steps.release-strategy.outputs.auto-draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine ghcommon workflow ref
        id: ghcommon-ref
        run: |
          ref="${GITHUB_WORKFLOW_REF##*@}"
          if [[ -z "$ref" || "$ref" == "$GITHUB_WORKFLOW_REF" ]]; then
            ref="refs/heads/main"
          fi
          echo "ref=$ref" >> "$GITHUB_OUTPUT"

      - name: Checkout ghcommon workflow scripts
        uses: actions/checkout@v5
        with:
          repository: jdfalk/ghcommon
          ref: ${{ steps.ghcommon-ref.outputs.ref }}
          path: ghcommon-workflow-scripts
          sparse-checkout: |
            .github/workflows/scripts
          sparse-checkout-cone-mode: false

      - name: Configure workflow script path
        run: |
          echo "GHCOMMON_SCRIPTS_DIR=$PWD/ghcommon-workflow-scripts/.github/workflows/scripts" >> $GITHUB_ENV

      - name: Setup environment variables
        id: env-setup
        run: |
          echo "registry=${REGISTRY}" >> $GITHUB_OUTPUT
          echo "image-name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Detect project languages and generate matrices
        id: detect
        env:
          SKIP_LANGUAGE_DETECTION: ${{ inputs.skip-language-detection }}
          BUILD_TARGET: ${{ inputs.build-target || 'all' }}
          GO_ENABLED: ${{ inputs.go-enabled && 'true' || 'auto' }}
          PYTHON_ENABLED: ${{ inputs.python-enabled && 'true' || 'auto' }}
          RUST_ENABLED: ${{ inputs.rust-enabled && 'true' || 'auto' }}
          FRONTEND_ENABLED: ${{ inputs.frontend-enabled && 'true' || 'auto' }}
          DOCKER_ENABLED: ${{ inputs.docker-enabled && 'true' || 'auto' }}
          PROTOBUF_ENABLED: ${{ inputs.protobuf-enabled && 'true' || 'auto' }}
        run: |
          bash "$GHCOMMON_SCRIPTS_DIR/detect-languages.sh"

      - name: Determine release strategy based on branch
        id: release-strategy
        env:
          BRANCH_NAME: ${{ github.ref_name }}
          INPUT_PRERELEASE: ${{ inputs.prerelease }}
          INPUT_DRAFT: ${{ inputs.draft }}
        run: |
          bash "$GHCOMMON_SCRIPTS_DIR/release-strategy.sh"

      - name: Generate semantic release version
        id: version
        env:
          RELEASE_TYPE: ${{ inputs.release-type || 'auto' }}
          BRANCH_NAME: ${{ github.ref_name }}
          AUTO_PRERELEASE: ${{ steps.release-strategy.outputs.auto-prerelease }}
          AUTO_DRAFT: ${{ steps.release-strategy.outputs.auto-draft }}
        run: |
          bash "$GHCOMMON_SCRIPTS_DIR/generate-version.sh"

  # Protocol Buffer Generation (if needed)
  build-protobuf:
    name: Generate Protocol Buffers
    needs: [detect-languages]
    if: needs.detect-languages.outputs.protobuf-needed == 'true'
    uses: ./.github/workflows/release-protobuf.yml
    secrets: inherit

  # Go Build
  build-go:
    name: Build Go Components
    needs: [detect-languages, build-protobuf]
    if: |
      always() &&
      needs.detect-languages.outputs.has-go == 'true' &&
      (inputs.build-target == 'all' || inputs.build-target == 'go')
    uses: ./.github/workflows/release-go.yml
    with:
      go-matrix: ${{ needs.detect-languages.outputs.go-matrix }}
      protobuf-artifacts: ${{ needs.detect-languages.outputs.protobuf-needed }}
    secrets: inherit

  # Python Build
  build-python:
    name: Build Python Components
    needs: [detect-languages, build-protobuf]
    if: |
      always() &&
      needs.detect-languages.outputs.has-python == 'true' &&
      (inputs.build-target == 'all' || inputs.build-target == 'python')
    uses: ./.github/workflows/release-python.yml
    with:
      python-matrix: ${{ needs.detect-languages.outputs.python-matrix }}
      protobuf-artifacts: ${{ needs.detect-languages.outputs.protobuf-needed }}
    secrets: inherit

  # Rust Build
  build-rust:
    name: Build Rust Components
    needs: [detect-languages, build-protobuf]
    if: |
      always() &&
      needs.detect-languages.outputs.has-rust == 'true' &&
      (inputs.build-target == 'all' || inputs.build-target == 'rust')
    uses: ./.github/workflows/release-rust.yml
    with:
      protobuf-artifacts: ${{ needs.detect-languages.outputs.protobuf-needed }}
      release-version: ${{ needs.detect-languages.outputs.release-tag }}
    secrets: inherit

  # Frontend Build
  build-frontend:
    name: Build Frontend Components
    needs: [detect-languages]
    if: |
      always() &&
      needs.detect-languages.outputs.has-frontend == 'true' &&
      (inputs.build-target == 'all' || inputs.build-target == 'frontend')
    uses: ./.github/workflows/release-frontend.yml
    with:
      frontend-matrix: ${{ needs.detect-languages.outputs.frontend-matrix }}
    secrets: inherit

  # Docker Build
  build-docker:
    name: Build Docker Images
    needs: [detect-languages, build-go, build-python, build-rust]
    if: |
      always() &&
      needs.detect-languages.outputs.has-docker == 'true' &&
      (inputs.build-target == 'all' || inputs.build-target == 'docker')
    uses: ./.github/workflows/release-docker.yml
    with:
      docker-matrix: ${{ needs.detect-languages.outputs.docker-matrix }}
      registry: ${{ needs.detect-languages.outputs.registry }}
      image-name: ${{ needs.detect-languages.outputs.image-name }}
    secrets: inherit

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [detect-languages, build-go, build-python, build-rust, build-frontend, build-docker]
    if: |
      always() &&
      !failure() &&
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    outputs:
      version: ${{ steps.version.outputs.version }}
      release-id: ${{ steps.release.outputs.id }}
      release-created: ${{ steps.check-release.outputs.created }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine ghcommon workflow ref
        id: ghcommon-ref
        run: |
          ref="${GITHUB_WORKFLOW_REF##*@}"
          if [[ -z "$ref" || "$ref" == "$GITHUB_WORKFLOW_REF" ]]; then
            ref="refs/heads/main"
          fi
          echo "ref=$ref" >> "$GITHUB_OUTPUT"

      - name: Checkout ghcommon workflow scripts
        uses: actions/checkout@v5
        with:
          repository: jdfalk/ghcommon
          ref: ${{ steps.ghcommon-ref.outputs.ref }}
          path: ghcommon-workflow-scripts
          sparse-checkout: |
            .github/workflows/scripts
          sparse-checkout-cone-mode: false

      - name: Configure workflow script path
        run: |
          echo "GHCOMMON_SCRIPTS_DIR=$PWD/ghcommon-workflow-scripts/.github/workflows/scripts" >> $GITHUB_ENV

      - name: Get version
        id: version
        env:
          DETECTED_RELEASE_TAG: ${{ needs.detect-languages.outputs.release-tag }}
        run: |
          VERSION="$DETECTED_RELEASE_TAG"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        env:
          BRANCH_NAME: ${{ github.ref_name }}
          PRIMARY_LANGUAGE: ${{ needs.detect-languages.outputs.primary-language }}
          RELEASE_STRATEGY: ${{ needs.detect-languages.outputs.release-branch-strategy }}
          AUTO_PRERELEASE: ${{ needs.detect-languages.outputs.auto-prerelease }}
          AUTO_DRAFT: ${{ needs.detect-languages.outputs.auto-draft }}
        run: |
          bash "$GHCOMMON_SCRIPTS_DIR/generate-changelog.sh"

      - name: Download all build artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Package and organize release artifacts
        id: package-artifacts
        env:
          RELEASE_VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "📦 Organizing and packaging release artifacts..."

          # Create release directory structure
          mkdir -p release-assets/{sdks,binaries,packages,documentation}

          # Move and organize SDK packages
          if find ./artifacts -name "*-sdk.*" -type f | grep -q .; then
            echo "Moving SDK packages..."
            find ./artifacts -name "*-sdk.*" -type f -exec mv {} release-assets/sdks/ \;
            ls -la release-assets/sdks/
          fi

          # Move documentation packages
          if find ./artifacts -name "*docs.*" -type f | grep -q .; then
            echo "Moving documentation packages..."
            find ./artifacts -name "*docs.*" -type f -exec mv {} release-assets/documentation/ \;
          fi

          # Move binary files (executables)
          if find ./artifacts -name "*.exe" -o -name "*-linux-*" -o -name "*-darwin-*" -o -name "*-windows-*" | grep -q .; then
            echo "Moving binary packages..."
            find ./artifacts \( -name "*.exe" -o -name "*-linux-*" -o -name "*-darwin-*" -o -name "*-windows-*" \) -type f -exec mv {} release-assets/binaries/ \;
          fi

          # Move other packages (wheels, containers, etc.)
          if find ./artifacts -name "*.whl" -o -name "*.tar.gz" -o -name "*.zip" | grep -q .; then
            echo "Moving other packages..."
            find ./artifacts \( -name "*.whl" -o -name "*.tar.gz" -o -name "*.zip" \) -type f -exec mv {} release-assets/packages/ \;
          fi

          # Create a comprehensive release manifest
          echo "Creating release manifest..."
          {
            echo "# Release Manifest - ${RELEASE_VERSION}"
            echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
            echo "## SDK Packages"
            if [ -d "release-assets/sdks" ] && [ "$(ls -A release-assets/sdks 2>/dev/null)" ]; then
              ls -la release-assets/sdks/ | tail -n +2 | awk '{print "- " $9 " (" $5 " bytes)"}'
            else
              echo "- No SDK packages"
            fi
            echo ""
            echo "## Documentation"
            if [ -d "release-assets/documentation" ] && [ "$(ls -A release-assets/documentation 2>/dev/null)" ]; then
              ls -la release-assets/documentation/ | tail -n +2 | awk '{print "- " $9 " (" $5 " bytes)"}'
            else
              echo "- No documentation packages"
            fi
            echo ""
            echo "## Binaries"
            if [ -d "release-assets/binaries" ] && [ "$(ls -A release-assets/binaries 2>/dev/null)" ]; then
              ls -la release-assets/binaries/ | tail -n +2 | awk '{print "- " $9 " (" $5 " bytes)"}'
            else
              echo "- No binary packages"
            fi
            echo ""
            echo "## Other Packages"
            if [ -d "release-assets/packages" ] && [ "$(ls -A release-assets/packages 2>/dev/null)" ]; then
              ls -la release-assets/packages/ | tail -n +2 | awk '{print "- " $9 " (" $5 " bytes)"}'
            else
              echo "- No other packages"
            fi
          } > release-assets/MANIFEST.md

          # Show summary
          echo "Release assets organized:"
          find release-assets -type f | wc -l | xargs echo "Total files:"
          du -sh release-assets/ | awk '{print "Total size: " $1}'

          # Set output indicating packaging completion
          echo "packaging-complete=true" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v2
        if: github.event_name != 'pull_request'
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          body: |
            ${{ steps.changelog.outputs.changelog_content }}

            ## 📦 Release Assets

            This release includes organized packages for easy consumption:

            ### SDKs
            - **Go SDK**: `gcommon-go-sdk.tar.gz` / `gcommon-go-sdk.zip`
            - **Python SDK**: `gcommon-python-sdk.tar.gz` / `gcommon-python-sdk.zip`

            ### Documentation
            - **API Documentation**: `gcommon-docs.tar.gz` / `gcommon-docs.zip`

            See `MANIFEST.md` for a complete list of all assets and their sizes.

            ---
            *Generated automatically from commit ${{ github.sha }}*
          draft: ${{ needs.detect-languages.outputs.auto-draft }}
          prerelease: ${{ needs.detect-languages.outputs.auto-prerelease }}
          files: |
            release-assets/**/*
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check release created
        id: check-release
        env:
          RELEASE_OUTCOME: ${{ steps.release.outcome }}
        run: |
          if [ "$RELEASE_OUTCOME" = "success" ]; then
            echo "created=true" >> $GITHUB_OUTPUT
            echo "release-created=true" >> $GITHUB_OUTPUT
          else
            echo "created=false" >> $GITHUB_OUTPUT
            echo "release-created=false" >> $GITHUB_OUTPUT
          fi

  # Final status check
  build-status:
    name: Release Status Summary
    runs-on: ubuntu-latest
    needs:
      [
        detect-languages,
        build-go,
        build-python,
        build-rust,
        build-frontend,
        build-docker,
        create-release,
      ]
    if: always()
    outputs:
      release-created: ${{ needs.create-release.outputs.release-created || 'false' }}
    steps:
      - name: Generate release summary
        env:
          SUMMARY_PRIMARY_LANGUAGE: ${{ needs.detect-languages.outputs.primary-language }}
          SUMMARY_BUILD_TARGET: ${{ inputs.build-target }}
          SUMMARY_RELEASE_TAG: ${{ needs.detect-languages.outputs.release-tag }}
          SUMMARY_RELEASE_STRATEGY: ${{ needs.detect-languages.outputs.release-branch-strategy }}
          SUMMARY_BRANCH: ${{ github.ref_name }}
          SUMMARY_GO_RESULT: ${{ needs.build-go.result || 'skipped' }}
          SUMMARY_PYTHON_RESULT: ${{ needs.build-python.result || 'skipped' }}
          SUMMARY_RUST_RESULT: ${{ needs.build-rust.result || 'skipped' }}
          SUMMARY_FRONTEND_RESULT: ${{ needs.build-frontend.result || 'skipped' }}
          SUMMARY_DOCKER_RESULT: ${{ needs.build-docker.result || 'skipped' }}
          SUMMARY_RELEASE_RESULT: ${{ needs.create-release.result || 'skipped' }}
          SUMMARY_RELEASE_CREATED: ${{ needs.create-release.outputs.release-created || 'false' }}
          SUMMARY_AUTO_PRERELEASE: ${{ needs.detect-languages.outputs.auto-prerelease || 'false' }}
          SUMMARY_AUTO_DRAFT: ${{ needs.detect-languages.outputs.auto-draft || 'false' }}
        run: |
          echo "# 🚀 Release Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Project Type:** $SUMMARY_PRIMARY_LANGUAGE" >> $GITHUB_STEP_SUMMARY
          echo "**Build Target:** $SUMMARY_BUILD_TARGET" >> $GITHUB_STEP_SUMMARY
          echo "**Release Tag:** $SUMMARY_RELEASE_TAG" >> $GITHUB_STEP_SUMMARY
          echo "**Release Strategy:** $SUMMARY_RELEASE_STRATEGY" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** $SUMMARY_BRANCH" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Go | $SUMMARY_GO_RESULT |" >> $GITHUB_STEP_SUMMARY
          echo "| Python | $SUMMARY_PYTHON_RESULT |" >> $GITHUB_STEP_SUMMARY
          echo "| Rust | $SUMMARY_RUST_RESULT |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | $SUMMARY_FRONTEND_RESULT |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker | $SUMMARY_DOCKER_RESULT |" >> $GITHUB_STEP_SUMMARY
          echo "| Release | $SUMMARY_RELEASE_RESULT |" >> $GITHUB_STEP_SUMMARY

          # Check for any failures
          if [[ "$SUMMARY_GO_RESULT" == "failure" ||
                "$SUMMARY_PYTHON_RESULT" == "failure" ||
                "$SUMMARY_RUST_RESULT" == "failure" ||
                "$SUMMARY_FRONTEND_RESULT" == "failure" ||
                "$SUMMARY_DOCKER_RESULT" == "failure" ||
                "$SUMMARY_RELEASE_RESULT" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some components failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All components completed successfully**" >> $GITHUB_STEP_SUMMARY
            if [[ "$SUMMARY_RELEASE_CREATED" == "true" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🎉 **Release created: $SUMMARY_RELEASE_TAG**" >> $GITHUB_STEP_SUMMARY
              if [[ "$SUMMARY_AUTO_PRERELEASE" == "true" ]]; then
                echo "⚠️ **Pre-release** - for testing purposes" >> $GITHUB_STEP_SUMMARY
              elif [[ "$SUMMARY_AUTO_DRAFT" == "true" ]]; then
                echo "📝 **Draft release** - review before publishing" >> $GITHUB_STEP_SUMMARY
              else
                echo "🚀 **Stable release** - ready for production" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi
