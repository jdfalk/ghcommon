# file: .github/workflows/reusable-release.yml
# version: 1.0.0
# guid: reusable-release-2025-09-24-coordinator

name: Reusable Release Coordinator

on:
  workflow_call:
    inputs:
      release-type:
        description: "Release type (auto, major, minor, patch)"
        required: false
        type: string
        default: "auto"
      build-target:
        description: "Build target (all, go, python, rust, frontend, docker, protobuf)"
        required: false
        type: string
        default: "all"
      prerelease:
        description: "Create as prerelease"
        required: false
        type: boolean
        default: false
      draft:
        description: "Create as draft"
        required: false
        type: boolean
        default: false
      skip-language-detection:
        description: "Skip automatic language detection"
        required: false
        type: boolean
        default: false
      go-enabled:
        description: "Force enable Go builds"
        required: false
        type: boolean
        default: false
      python-enabled:
        description: "Force enable Python builds"
        required: false
        type: boolean
        default: false
      rust-enabled:
        description: "Force enable Rust builds"
        required: false
        type: boolean
        default: false
      frontend-enabled:
        description: "Force enable Frontend builds"
        required: false
        type: boolean
        default: false
      docker-enabled:
        description: "Force enable Docker builds"
        required: false
        type: boolean
        default: false
      protobuf-enabled:
        description: "Force enable Protobuf builds"
        required: false
        type: boolean
        default: false
    outputs:
      release-created:
        description: "Whether a release was created"
        value: ${{ jobs.build-status.outputs.release-created }}
      release-tag:
        description: "The created release tag"
        value: ${{ jobs.detect-languages.outputs.release-tag }}
      primary-language:
        description: "The detected primary language"
        value: ${{ jobs.detect-languages.outputs.primary-language }}

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Load unified configuration
  load-config:
    name: Load Repository Configuration
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.load-config.outputs.config }}
      has-config: ${{ steps.load-config.outputs.has-config }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Load repository configuration
        id: load-config
        run: |
          config_file=".github/repository-config.yml"
          if [[ -f "$config_file" ]]; then
            echo "has-config=true" >> $GITHUB_OUTPUT
            # Convert YAML to JSON for easier parsing in other jobs
            python3 -c "
            import yaml, json
            with open('$config_file') as f:
                config = yaml.safe_load(f)
            print('config=' + json.dumps(config, separators=(',', ':')))
            " >> $GITHUB_OUTPUT
          else
            echo "has-config=false" >> $GITHUB_OUTPUT
            echo "config={}" >> $GITHUB_OUTPUT
          fi

  # Detect what languages/technologies are present
  detect-languages:
    name: Detect Project Languages
    runs-on: ubuntu-latest
    needs: [load-config]
    outputs:
      has-go: ${{ steps.detect.outputs.has-go }}
      has-python: ${{ steps.detect.outputs.has-python }}
      has-frontend: ${{ steps.detect.outputs.has-frontend }}
      has-docker: ${{ steps.detect.outputs.has-docker }}
      has-rust: ${{ steps.detect.outputs.has-rust }}
      protobuf-needed: ${{ steps.detect.outputs.protobuf-needed }}
      primary-language: ${{ steps.detect.outputs.primary-language }}
      go-matrix: ${{ steps.detect.outputs.go-matrix }}
      python-matrix: ${{ steps.detect.outputs.python-matrix }}
      frontend-matrix: ${{ steps.detect.outputs.frontend-matrix }}
      docker-matrix: ${{ steps.detect.outputs.docker-matrix }}
      rust-matrix: ${{ steps.detect.outputs.rust-matrix }}
      registry: ${{ steps.env-setup.outputs.registry }}
      image-name: ${{ steps.env-setup.outputs.image-name }}
      release-tag: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup environment variables
        id: env-setup
        run: |
          echo "registry=${REGISTRY}" >> $GITHUB_OUTPUT
          echo "image-name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Detect project languages and generate matrices
        id: detect
        run: |
          # Use input overrides if language detection is skipped
          if [[ "${{ inputs.skip-language-detection }}" == "true" ]]; then
            echo "has-go=${{ inputs.go-enabled }}" >> $GITHUB_OUTPUT
            echo "has-python=${{ inputs.python-enabled }}" >> $GITHUB_OUTPUT
            echo "has-rust=${{ inputs.rust-enabled }}" >> $GITHUB_OUTPUT
            echo "has-frontend=${{ inputs.frontend-enabled }}" >> $GITHUB_OUTPUT
            echo "has-docker=${{ inputs.docker-enabled }}" >> $GITHUB_OUTPUT
            echo "protobuf-needed=${{ inputs.protobuf-enabled }}" >> $GITHUB_OUTPUT
          else
            # Auto-detect languages
            has_go="false"
            has_python="false"
            has_rust="false"
            has_frontend="false"
            has_docker="false"
            protobuf_needed="false"
            primary_lang="unknown"

            # Go detection
            if [[ -f "go.mod" || -f "main.go" || -d "cmd" || -d "pkg" ]]; then
              has_go="true"
              primary_lang="go"
            fi

            # Python detection
            if [[ -f "setup.py" || -f "pyproject.toml" || -f "requirements.txt" || -f "poetry.lock" ]]; then
              has_python="true"
              [[ "$primary_lang" == "unknown" ]] && primary_lang="python"
            fi

            # Rust detection
            if [[ -f "Cargo.toml" || -f "Cargo.lock" ]]; then
              has_rust="true"
              [[ "$primary_lang" == "unknown" ]] && primary_lang="rust"
            fi

            # Frontend detection
            if [[ -f "package.json" || -d "webui" || -d "frontend" || -d "ui" ]]; then
              has_frontend="true"
              [[ "$primary_lang" == "unknown" ]] && primary_lang="frontend"
            fi

            # Docker detection
            if [[ -f "Dockerfile" || -f "docker-compose.yml" || -f "docker-compose.yaml" ]]; then
              has_docker="true"
            fi

            # Protobuf detection
            if [[ -f "buf.yaml" || -f "buf.gen.yaml" || -n "$(find . -name '*.proto' -type f 2>/dev/null | head -1)" ]]; then
              protobuf_needed="true"
            fi

            echo "has-go=$has_go" >> $GITHUB_OUTPUT
            echo "has-python=$has_python" >> $GITHUB_OUTPUT
            echo "has-rust=$has_rust" >> $GITHUB_OUTPUT
            echo "has-frontend=$has_frontend" >> $GITHUB_OUTPUT
            echo "has-docker=$has_docker" >> $GITHUB_OUTPUT
            echo "protobuf-needed=$protobuf_needed" >> $GITHUB_OUTPUT
            echo "primary-language=$primary_lang" >> $GITHUB_OUTPUT
          fi

          # Generate build matrices (simplified for reusable workflow)
          echo 'go-matrix={"go-version":["1.22","1.23","1.24"],"os":["ubuntu-latest","macos-latest"]}' >> $GITHUB_OUTPUT
          echo 'python-matrix={"python-version":["3.11","3.12","3.13"],"os":["ubuntu-latest","macos-latest"]}' >> $GITHUB_OUTPUT
          echo 'rust-matrix={"rust-version":["stable","beta"],"os":["ubuntu-latest","macos-latest"]}' >> $GITHUB_OUTPUT
          echo 'frontend-matrix={"node-version":["18","20","22"],"os":["ubuntu-latest"]}' >> $GITHUB_OUTPUT
          echo 'docker-matrix={"platform":["linux/amd64","linux/arm64"]}' >> $GITHUB_OUTPUT

      - name: Generate release version
        id: version
        run: |
          # Simple version generation - in real implementation, use semantic versioning
          if [[ "${{ inputs.release-type }}" == "major" ]]; then
            echo "tag=v$(date +%Y).0.0" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.release-type }}" == "minor" ]]; then
            echo "tag=v$(date +%Y.%m).0" >> $GITHUB_OUTPUT
          else
            echo "tag=v$(date +%Y.%m.%d)" >> $GITHUB_OUTPUT
          fi

  # Protocol Buffer Generation (if needed)
  build-protobuf:
    name: Generate Protocol Buffers
    needs: [detect-languages]
    if: needs.detect-languages.outputs.protobuf-needed == 'true'
    uses: ./.github/workflows/release-protobuf.yml
    secrets: inherit

  # Go Build
  build-go:
    name: Build Go Components
    needs: [detect-languages, build-protobuf]
    if: |
      always() &&
      needs.detect-languages.outputs.has-go == 'true' &&
      (inputs.build-target == 'all' || inputs.build-target == 'go')
    uses: ./.github/workflows/release-go.yml
    with:
      go-matrix: ${{ needs.detect-languages.outputs.go-matrix }}
      protobuf-artifacts: ${{ needs.detect-languages.outputs.protobuf-needed }}
    secrets: inherit

  # Python Build
  build-python:
    name: Build Python Components
    needs: [detect-languages, build-protobuf]
    if: |
      always() &&
      needs.detect-languages.outputs.has-python == 'true' &&
      (inputs.build-target == 'all' || inputs.build-target == 'python')
    uses: ./.github/workflows/release-python.yml
    with:
      python-matrix: ${{ needs.detect-languages.outputs.python-matrix }}
      protobuf-artifacts: ${{ needs.detect-languages.outputs.protobuf-needed }}
    secrets: inherit

  # Rust Build
  build-rust:
    name: Build Rust Components
    needs: [detect-languages, build-protobuf]
    if: |
      always() &&
      needs.detect-languages.outputs.has-rust == 'true' &&
      (inputs.build-target == 'all' || inputs.build-target == 'rust')
    uses: ./.github/workflows/release-rust.yml
    with:
      protobuf-artifacts: ${{ needs.detect-languages.outputs.protobuf-needed }}
    secrets: inherit

  # Frontend Build
  build-frontend:
    name: Build Frontend Components
    needs: [detect-languages]
    if: |
      always() &&
      needs.detect-languages.outputs.has-frontend == 'true' &&
      (inputs.build-target == 'all' || inputs.build-target == 'frontend')
    uses: ./.github/workflows/release-frontend.yml
    with:
      frontend-matrix: ${{ needs.detect-languages.outputs.frontend-matrix }}
    secrets: inherit

  # Docker Build
  build-docker:
    name: Build Docker Images
    needs: [detect-languages, build-go, build-python, build-rust]
    if: |
      always() &&
      needs.detect-languages.outputs.has-docker == 'true' &&
      (inputs.build-target == 'all' || inputs.build-target == 'docker')
    uses: ./.github/workflows/release-docker.yml
    with:
      docker-matrix: ${{ needs.detect-languages.outputs.docker-matrix }}
      registry: ${{ needs.detect-languages.outputs.registry }}
      image-name: ${{ needs.detect-languages.outputs.image-name }}
    secrets: inherit

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [detect-languages, build-go, build-python, build-rust, build-frontend, build-docker]
    if: |
      always() &&
      !failure() &&
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    outputs:
      version: ${{ steps.version.outputs.version }}
      release-url: ${{ steps.release.outputs.upload_url }}
      release-id: ${{ steps.release.outputs.id }}
      release-created: ${{ steps.check-release.outputs.created }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          VERSION="${{ needs.detect-languages.outputs.release-tag }}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog generation
          echo "## Changes" > changelog.md
          echo "" >> changelog.md
          git log --oneline --since="1 day ago" >> changelog.md || echo "No recent changes" >> changelog.md

      - name: Create Release
        id: release
        uses: actions/create-release@v1
        if: github.event_name != 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.detect-languages.outputs.release-tag }}
          release_name: Release ${{ needs.detect-languages.outputs.release-tag }}
          body_path: changelog.md
          draft: ${{ inputs.draft }}
          prerelease: ${{ inputs.prerelease }}

      - name: Check release created
        id: check-release
        run: |
          if [ "${{ steps.release.outcome }}" = "success" ]; then
            echo "created=true" >> $GITHUB_OUTPUT
          else
            echo "created=false" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ steps.release.outcome }}" == "success" ]]; then
            echo "release-created=true" >> $GITHUB_OUTPUT
          else
            echo "release-created=false" >> $GITHUB_OUTPUT
          fi

  # Final status check
  build-status:
    name: Release Status Summary
    runs-on: ubuntu-latest
    needs: [detect-languages, build-go, build-python, build-rust, build-frontend, build-docker, create-release]
    if: always()
    outputs:
      release-created: ${{ needs.create-release.outputs.release-created || 'false' }}
    steps:
      - name: Generate release summary
        run: |
          echo "# 🚀 Release Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Project Type:** ${{ needs.detect-languages.outputs.primary-language }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Target:** ${{ inputs.build-target }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release Tag:** ${{ needs.detect-languages.outputs.release-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Go | ${{ needs.build-go.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python | ${{ needs.build-python.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Rust | ${{ needs.build-rust.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.build-frontend.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker | ${{ needs.build-docker.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Release | ${{ needs.create-release.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY

          # Check for any failures
          if [[ "${{ needs.build-go.result }}" == "failure" ||
                "${{ needs.build-python.result }}" == "failure" ||
                "${{ needs.build-rust.result }}" == "failure" ||
                "${{ needs.build-frontend.result }}" == "failure" ||
                "${{ needs.build-docker.result }}" == "failure" ||
                "${{ needs.create-release.result }}" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some components failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All components completed successfully**" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.create-release.outputs.release-created }}" == "true" ]]; then
              echo "🎉 **Release created: ${{ needs.detect-languages.outputs.release-tag }}**" >> $GITHUB_STEP_SUMMARY
            fi
          fi
