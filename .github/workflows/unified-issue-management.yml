# file: .github/workflows/unified-issue-management.yml
#
# Unified Issue Management Reusable Workflow
#
# This reusable workflow provides comprehensive issue management functionality
# that can be shared across multiple repositories.
#
# Features:
# - Process issue updates from issue_updates.json (create, update, comment, close, delete)
# - Manage Copilot review comment tickets
# - Close duplicate issues by title
# - Generate tickets for CodeQL security alerts
# - Comprehensive logging and summary generation
# - GUID-based duplicate prevention
# - Matrix-based parallel execution
#
# Usage:
#   Call this workflow from your repository's workflow with:
#   uses: jdfalk/ghcommon/.github/workflows/unified-issue-management.yml@main
#
# For examples, see:
# - examples/workflows/issue-management-basic.yml
# - examples/workflows/issue-management-advanced.yml

name: Unified Issue Management (Reusable)

on:
  workflow_call:
    inputs:
      operations:
        description: "Operations to run (comma-separated: update-issues, copilot-tickets, close-duplicates, codeql-alerts, update-permalinks, or 'auto' to auto-detect)"
        required: false
        type: string
        default: "auto"
      dry_run:
        description: "Run in dry-run mode (no changes)"
        required: false
        type: boolean
        default: false
      force_update:
        description: "Force update existing tickets"
        required: false
        type: boolean
        default: false
      issue_updates_file:
        description: "Path to issue updates JSON file"
        required: false
        type: string
        default: "issue_updates.json"
      issue_updates_directory:
        description: "Path to directory containing individual issue update files"
        required: false
        type: string
        default: ".github/issue-updates"
      cleanup_issue_updates:
        description: "Whether to clean up the issue updates file after processing"
        required: false
        type: boolean
        default: true
      python_version:
        description: "Python version to use"
        required: false
        type: string
        default: "3.11"

jobs:
  determine-operations:
    runs-on: ubuntu-latest
    outputs:
      operations: ${{ steps.determine.outputs.operations }}
      has_issue_updates: ${{ steps.check-files.outputs.has_issue_updates }}
      event_name: ${{ steps.context.outputs.event_name }}
      triggered_by: ${{ steps.context.outputs.triggered_by }}
    steps:
      - uses: actions/checkout@v4

      - name: Set workflow context
        id: context
        run: |
          echo "event_name=${{ github.event_name }}" >> "$GITHUB_OUTPUT"
          echo "triggered_by=${{ github.triggering_actor }}" >> "$GITHUB_OUTPUT"

      - name: Check for files
        id: check-files
        run: |
          has_legacy_file=false
          has_update_files=false

          # Check for legacy issue_updates.json
          if [[ -f "${{ inputs.issue_updates_file }}" ]]; then
            has_legacy_file=true
            echo "📄 Found legacy issue updates file: ${{ inputs.issue_updates_file }}"
          fi

          # Check for new directory with individual files
          if [[ -d "${{ inputs.issue_updates_directory }}" ]]; then
            json_files=$(find "${{ inputs.issue_updates_directory }}" -name "*.json" -not -name "README.json" | wc -l)
            if [[ $json_files -gt 0 ]]; then
              has_update_files=true
              echo "� Found $json_files issue update files in ${{ inputs.issue_updates_directory }}"
            fi
          fi

          # Set outputs
          if [[ "$has_legacy_file" == "true" || "$has_update_files" == "true" ]]; then
            echo "has_issue_updates=true" >> "$GITHUB_OUTPUT"
            echo "✅ Issue updates found"
          else
            echo "has_issue_updates=false" >> "$GITHUB_OUTPUT"
            echo "❌ No issue updates found"
          fi

          echo "has_legacy_file=$has_legacy_file" >> "$GITHUB_OUTPUT"
          echo "has_update_files=$has_update_files" >> "$GITHUB_OUTPUT"

      - name: Determine operations to run
        id: determine
        run: |
          operations=()

          # If operations explicitly provided and not 'auto'
          if [[ "${{ inputs.operations }}" != "auto" ]]; then
            echo "🎯 Using explicit operations: ${{ inputs.operations }}"
            IFS=',' read -ra ops <<< "${{ inputs.operations }}"
            operations=("${ops[@]}")

          # Auto-detect based on event and context
          else
            echo "🔍 Auto-detecting operations based on event: ${{ github.event_name }}"

            # Issue updates file exists
            if [[ "${{ steps.check-files.outputs.has_issue_updates }}" == "true" ]]; then
              operations+=("update-issues")
              echo "  ✓ Added update-issues (issue updates file found)"
            fi

            # Copilot events
            if [[ "${{ github.event_name }}" =~ ^pull_request ]]; then
              operations+=("copilot-tickets")
              echo "  ✓ Added copilot-tickets (PR event detected)"
            fi

            # Scheduled events
            if [[ "${{ github.event_name }}" == "schedule" ]]; then
              # This would need to be customized based on the calling workflow's schedule
              operations+=("close-duplicates" "codeql-alerts")
              echo "  ✓ Added close-duplicates and codeql-alerts (scheduled event)"
            fi

            # Push to main (multiple operations)
            if [[ "${{ github.event_name }}" == "push" ]]; then
              operations+=("copilot-tickets")
              echo "  ✓ Added copilot-tickets (push event)"
            fi

            # Default fallback if no operations determined
            if [[ ${#operations[@]} -eq 0 ]]; then
              echo "  ⚠️  No operations auto-detected, using default set"
              operations+=("copilot-tickets")
            fi
          fi

          # Convert array to JSON for matrix
          if [[ ${#operations[@]} -eq 0 ]]; then
            ops_json="[]"
          else
            ops_json=$(printf '%s\n' "${operations[@]}" | jq -R . | jq -s . | tr -d '\n')
          fi
          echo "operations=${ops_json}" >> "$GITHUB_OUTPUT"
          echo "🎯 Final operations to run: ${operations[*]}"

  issue-management:
    runs-on: ubuntu-latest
    needs: determine-operations
    if: ${{ needs.determine-operations.outputs.operations != '[]' }}
    permissions:
      issues: write
      contents: write
      pull-requests: write
      security-events: read
      repository-projects: read
    strategy:
      matrix:
        operation: ${{ fromJson(needs.determine-operations.outputs.operations) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

      - name: Download issue manager script
        run: |
          echo "📥 Downloading issue manager script from ghcommon..."
          curl -fsSL https://raw.githubusercontent.com/jdfalk/ghcommon/main/scripts/issue_manager.py -o issue_manager.py
          chmod +x issue_manager.py
          echo "✅ Downloaded issue_manager.py"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Debug operation info
        run: |
          echo "🔧 Operation: ${{ matrix.operation }}"
          echo "📅 Event: ${{ needs.determine-operations.outputs.event_name }}"
          echo "🏃 Triggered by: ${{ needs.determine-operations.outputs.triggered_by }}"
          echo "📁 Repository: ${{ github.repository }}"
          echo "🔍 Dry run: ${{ inputs.dry_run }}"
          echo "⚡ Force update: ${{ inputs.force_update }}"
          echo "📄 Legacy issue updates file: ${{ inputs.issue_updates_file }}"
          echo "📁 Issue updates directory: ${{ inputs.issue_updates_directory }}"

      - name: Execute operation
        id: execute
        run: |
          echo "🚀 Executing: ${{ matrix.operation }}"

          # Set environment variables
          export DRY_RUN="${{ inputs.dry_run }}"
          export FORCE_UPDATE="${{ inputs.force_update }}"
          export ISSUE_UPDATES_FILE="${{ inputs.issue_updates_file }}"
          export ISSUE_UPDATES_DIRECTORY="${{ inputs.issue_updates_directory }}"

          # Run the operation
          python issue_manager.py ${{ matrix.operation }}

          # Capture execution results for summary
          echo "operation=${{ matrix.operation }}" >> "$GITHUB_OUTPUT"
          echo "status=completed" >> "$GITHUB_OUTPUT"

          # Check if any files were processed and moved
          if [[ -d "${{ inputs.issue_updates_directory }}/processed" ]]; then
            processed_files=$(find "${{ inputs.issue_updates_directory }}/processed" -name "*.json" -newer . 2>/dev/null | wc -l || echo "0")
            echo "processed_files_count=$processed_files" >> "$GITHUB_OUTPUT"
            echo "📦 Found $processed_files newly processed files"
          else
            echo "processed_files_count=0" >> "$GITHUB_OUTPUT"
          fi

          # Check if any changes were made to tracked files for PR creation
          if [[ "${{ matrix.operation }}" == "update-issues" ]]; then
            # Check for changes in the issue updates directory
            if git diff --quiet HEAD -- "${{ inputs.issue_updates_directory }}/"; then
              echo "files_changed=false" >> "$GITHUB_OUTPUT"
            else
              echo "files_changed=true" >> "$GITHUB_OUTPUT"
            fi

            # Check for changes in the legacy file
            if [[ -f "${{ inputs.issue_updates_file }}" ]] && ! git diff --quiet HEAD -- "${{ inputs.issue_updates_file }}"; then
              echo "legacy_file_changed=true" >> "$GITHUB_OUTPUT"
            else
              echo "legacy_file_changed=false" >> "$GITHUB_OUTPUT"
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}

      - name: Check for existing archive PRs
        if: ${{ matrix.operation == 'update-issues' && inputs.dry_run != true }}
        id: check-prs
        run: |
          # Check for existing processed files PR
          existing_processed=$(gh pr list --base "${{ github.event.repository.default_branch }}" --head "archive-processed-files" --state open --json number,headRefName --jq '.[0].number // empty')
          if [[ -n "$existing_processed" ]]; then
            echo "existing_processed_pr=$existing_processed" >> "$GITHUB_OUTPUT"
            echo "🔍 Found existing processed files PR: #$existing_processed"
          else
            echo "existing_processed_pr=" >> "$GITHUB_OUTPUT"
            echo "🔍 No existing processed files PR found"
          fi

          # Check for existing legacy file PR
          existing_legacy=$(gh pr list --base "${{ github.event.repository.default_branch }}" --head "update-issue-permalinks" --state open --json number,headRefName --jq '.[0].number // empty')
          if [[ -n "$existing_legacy" ]]; then
            echo "existing_legacy_pr=$existing_legacy" >> "$GITHUB_OUTPUT"
            echo "🔍 Found existing legacy file PR: #$existing_legacy"
          else
            echo "existing_legacy_pr=" >> "$GITHUB_OUTPUT"
            echo "🔍 No existing legacy file PR found"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR for processed distributed files
        if: ${{ matrix.operation == 'update-issues' && inputs.dry_run != true && steps.execute.outputs.files_changed == 'true' }}
        id: processed-files-pr
        uses: peter-evans/create-pull-request@v7
        with:
          base: ${{ github.event.repository.default_branch }}
          branch: archive-processed-files
          commit-message: "📦 Archive processed issue update files (run ${{ github.run_id }})"
          title: "📦 Archive processed distributed issue update files"
          body: |
            ## Summary
            Automatically archiving processed distributed issue update files to the `processed/` directory.

            **Latest Operation:** ${{ matrix.operation }}
            **Latest Workflow run:** [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Event:** ${{ needs.determine-operations.outputs.event_name }}
            **Triggered by:** ${{ needs.determine-operations.outputs.triggered_by }}
            **Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

            ### Changes
            - Moved processed distributed issue update files from `${{ inputs.issue_updates_directory }}/` to `${{ inputs.issue_updates_directory }}/processed/`
            - These files have been successfully processed and their corresponding GitHub issues have been created/updated
            - Archiving prevents re-processing and maintains a clean workflow

            ### Files Processed
            This PR archives individual JSON files from the distributed update format that were successfully processed in recent workflow runs.

            **Note:** This PR is automatically updated when new files are processed. If you're using the legacy `issue_updates.json` format, that will be handled in a separate PR.

            ---
            This PR is auto-generated and maintained by the unified issue management workflow.

            **Existing PR found:** ${{ steps.check-prs.outputs.existing_processed_pr != '' && 'Yes - Updated existing PR' || 'No - Created new PR' }}
          delete-branch: false
          add-paths: |
            ${{ inputs.issue_updates_directory }}/

      - name: Create PR for legacy file permalink updates
        if: ${{ matrix.operation == 'update-issues' && needs.determine-operations.outputs.has_issue_updates == 'true' && inputs.dry_run != true && steps.execute.outputs.legacy_file_changed == 'true' }}
        id: legacy-file-pr
        uses: peter-evans/create-pull-request@v7
        with:
          base: ${{ github.event.repository.default_branch }}
          branch: update-issue-permalinks
          commit-message: "🔗 Update ${{ inputs.issue_updates_file }} with issue permalinks (run ${{ github.run_id }})"
          title: "🔗 Update issue tracking with permalinks"
          body: |
            ## Summary
            Automatically updating `${{ inputs.issue_updates_file }}` with permalinks to processed issues.

            **Latest Operation:** ${{ matrix.operation }}
            **Latest Workflow run:** [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Event:** ${{ needs.determine-operations.outputs.event_name }}
            **Triggered by:** ${{ needs.determine-operations.outputs.triggered_by }}
            **Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

            This allows tracking which issues have been processed and provides direct links to the GitHub issues.

            **Note:** This PR is automatically updated when the legacy file is modified. This is separate from the distributed files archive PR as it updates the legacy format file with permalink metadata.

            ---
            This PR is auto-generated and maintained by the unified issue management workflow.

            **Existing PR found:** ${{ steps.check-prs.outputs.existing_legacy_pr != '' && 'Yes - Updated existing PR' || 'No - Created new PR' }}
          delete-branch: false
          add-paths: |
            ${{ inputs.issue_updates_file }}

      - name: Output PR information
        if: ${{ matrix.operation == 'update-issues' && inputs.dry_run != true }}
        run: |
          echo "📋 Pull Request Summary:" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          if [[ "${{ steps.processed-files-pr.outputs.pull-request-number }}" != "" ]]; then
            if [[ "${{ steps.check-prs.outputs.existing_processed_pr }}" != "" ]]; then
              echo "📦 **Distributed Files Archive PR:** [#${{ steps.processed-files-pr.outputs.pull-request-number }}](${{ steps.processed-files-pr.outputs.pull-request-url }}) (Updated existing)" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "📦 **Distributed Files Archive PR:** [#${{ steps.processed-files-pr.outputs.pull-request-number }}](${{ steps.processed-files-pr.outputs.pull-request-url }}) (Newly created)" >> "$GITHUB_STEP_SUMMARY"
            fi
            echo "   - Branch: \`archive-processed-files\`" >> "$GITHUB_STEP_SUMMARY"
            echo "   - Purpose: Archive processed individual JSON files" >> "$GITHUB_STEP_SUMMARY"
          fi

          if [[ "${{ steps.legacy-file-pr.outputs.pull-request-number }}" != "" ]]; then
            if [[ "${{ steps.check-prs.outputs.existing_legacy_pr }}" != "" ]]; then
              echo "🔗 **Legacy File Update PR:** [#${{ steps.legacy-file-pr.outputs.pull-request-number }}](${{ steps.legacy-file-pr.outputs.pull-request-url }}) (Updated existing)" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "🔗 **Legacy File Update PR:** [#${{ steps.legacy-file-pr.outputs.pull-request-number }}](${{ steps.legacy-file-pr.outputs.pull-request-url }}) (Newly created)" >> "$GITHUB_STEP_SUMMARY"
            fi
            echo "   - Branch: \`update-issue-permalinks\`" >> "$GITHUB_STEP_SUMMARY"
            echo "   - Purpose: Add permalinks to legacy issue_updates.json" >> "$GITHUB_STEP_SUMMARY"
          fi

          if [[ "${{ steps.processed-files-pr.outputs.pull-request-number }}" == "" && "${{ steps.legacy-file-pr.outputs.pull-request-number }}" == "" ]]; then
            echo "ℹ️  No pull requests created (no file changes detected)" >> "$GITHUB_STEP_SUMMARY"
          fi

          # Show information about existing PRs that might be open
          if [[ "${{ steps.check-prs.outputs.existing_processed_pr }}" != "" && "${{ steps.processed-files-pr.outputs.pull-request-number }}" == "" ]]; then
            echo "📦 **Existing Distributed Files Archive PR:** [#${{ steps.check-prs.outputs.existing_processed_pr }}](https://github.com/${{ github.repository }}/pull/${{ steps.check-prs.outputs.existing_processed_pr }}) (No new changes to add)" >> "$GITHUB_STEP_SUMMARY"
          fi

          if [[ "${{ steps.check-prs.outputs.existing_legacy_pr }}" != "" && "${{ steps.legacy-file-pr.outputs.pull-request-number }}" == "" ]]; then
            echo "🔗 **Existing Legacy File Update PR:** [#${{ steps.check-prs.outputs.existing_legacy_pr }}](https://github.com/${{ github.repository }}/pull/${{ steps.check-prs.outputs.existing_legacy_pr }}) (No new changes to add)" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Generate detailed operation summary
        run: |
          echo "## 🎯 Operation Summary: ${{ matrix.operation }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Status:** ✅ Completed successfully" >> "$GITHUB_STEP_SUMMARY"
          echo "**Event:** ${{ needs.determine-operations.outputs.event_name }}" >> "$GITHUB_STEP_SUMMARY"
          echo "**Repository:** ${{ github.repository }}" >> "$GITHUB_STEP_SUMMARY"
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$GITHUB_STEP_SUMMARY"

          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "**Mode:** 🔍 Dry run (no changes made)" >> "$GITHUB_STEP_SUMMARY"
          fi

          case "${{ matrix.operation }}" in
            "update-issues")
              echo "**Details:** Processed issue updates from \`${{ inputs.issue_updates_file }}\` and \`${{ inputs.issue_updates_directory }}/\`" >> "$GITHUB_STEP_SUMMARY"

              # Show files processed
              if [[ "${{ steps.execute.outputs.processed_files_count }}" != "0" ]]; then
                echo "**Files Processed:** ${{ steps.execute.outputs.processed_files_count }} files moved to archive" >> "$GITHUB_STEP_SUMMARY"
              fi              # Show PR information
              echo "" >> "$GITHUB_STEP_SUMMARY"
              echo "### 📋 Pull Requests Management" >> "$GITHUB_STEP_SUMMARY"

              if [[ "${{ steps.processed-files-pr.outputs.pull-request-number }}" != "" ]]; then
                if [[ "${{ steps.check-prs.outputs.existing_processed_pr }}" != "" ]]; then
                  echo "- 📦 **Updated existing distributed files PR:** [#${{ steps.processed-files-pr.outputs.pull-request-number }}](${{ steps.processed-files-pr.outputs.pull-request-url }})" >> "$GITHUB_STEP_SUMMARY"
                else
                  echo "- 📦 **Created new distributed files PR:** [#${{ steps.processed-files-pr.outputs.pull-request-number }}](${{ steps.processed-files-pr.outputs.pull-request-url }})" >> "$GITHUB_STEP_SUMMARY"
                fi
              fi

              if [[ "${{ steps.legacy-file-pr.outputs.pull-request-number }}" != "" ]]; then
                if [[ "${{ steps.check-prs.outputs.existing_legacy_pr }}" != "" ]]; then
                  echo "- 🔗 **Updated existing legacy file PR:** [#${{ steps.legacy-file-pr.outputs.pull-request-number }}](${{ steps.legacy-file-pr.outputs.pull-request-url }})" >> "$GITHUB_STEP_SUMMARY"
                else
                  echo "- 🔗 **Created new legacy file PR:** [#${{ steps.legacy-file-pr.outputs.pull-request-number }}](${{ steps.legacy-file-pr.outputs.pull-request-url }})" >> "$GITHUB_STEP_SUMMARY"
                fi
              fi

              if [[ "${{ steps.processed-files-pr.outputs.pull-request-number }}" == "" && "${{ steps.legacy-file-pr.outputs.pull-request-number }}" == "" ]]; then
                echo "- ℹ️  No pull requests created or updated (no file changes detected)" >> "$GITHUB_STEP_SUMMARY"
              fi
                echo "- 🔗 **Legacy File PR:** [#${{ steps.legacy-file-pr.outputs.pull-request-number }}](${{ steps.legacy-file-pr.outputs.pull-request-url }})" >> "$GITHUB_STEP_SUMMARY"
              fi

              if [[ "${{ steps.processed-files-pr.outputs.pull-request-number }}" == "" && "${{ steps.legacy-file-pr.outputs.pull-request-number }}" == "" ]]; then
                echo "- ℹ️  No pull requests created (no file changes detected)" >> "$GITHUB_STEP_SUMMARY"
              fi
              ;;

            "copilot-tickets")
              echo "**Details:** Managed Copilot review comment tickets based on ${{ needs.determine-operations.outputs.event_name }} event" >> "$GITHUB_STEP_SUMMARY"
              ;;

            "close-duplicates")
              echo "**Details:** Scanned for and closed duplicate issues by title" >> "$GITHUB_STEP_SUMMARY"
              if [[ "${{ inputs.dry_run }}" == "true" ]]; then
                echo "**Note:** Dry run mode - no actual changes were made" >> "$GITHUB_STEP_SUMMARY"
              fi
              ;;

            "codeql-alerts")
              echo "**Details:** Generated tickets for open CodeQL security alerts without existing issues" >> "$GITHUB_STEP_SUMMARY"
              ;;

            "update-permalinks")
              echo "**Details:** Updated permalink fields in processed issue files" >> "$GITHUB_STEP_SUMMARY"
              ;;
          esac

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "---" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          # Note: Detailed operation results are included above via the Python script's GitHub summary export

  workflow-summary:
    runs-on: ubuntu-latest
    needs: [determine-operations, issue-management]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Collect operation results and changed files
        id: collect
        run: |
          echo "Collecting operation results and file changes..."

          # Initialize arrays for tracking changes
          changed_files=()
          created_prs=()

          # Check for any file changes in the repository
          if ! git diff --quiet HEAD~1 HEAD 2>/dev/null; then
            echo "Repository has changes since last commit"

            # Get list of changed files
            mapfile -t changed_files < <(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")

            # Format changed files for output
            if [[ ${#changed_files[@]} -gt 0 ]]; then
              printf -v changed_files_list "%s," "${changed_files[@]}"
              echo "changed_files=${changed_files_list%,}" >> "$GITHUB_OUTPUT"
              echo "has_changes=true" >> "$GITHUB_OUTPUT"
            else
              echo "has_changes=false" >> "$GITHUB_OUTPUT"
              echo "changed_files=" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "No changes detected in repository"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo "changed_files=" >> "$GITHUB_OUTPUT"
          fi

          # Get recent PRs that might have been created by this workflow
          # Note: This is a simple check - in practice, you might want to use the GitHub API
          echo "Checking for recent PRs..."
          echo "recent_prs=" >> "$GITHUB_OUTPUT"

      - name: Generate comprehensive workflow summary
        run: |
          echo "# 🚀 Unified Issue Management Workflow Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Workflow:** Reusable Issue Management" >> "$GITHUB_STEP_SUMMARY"
          echo "**Run ID:** [\`${{ github.run_id }}\`](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> "$GITHUB_STEP_SUMMARY"
          echo "**Triggered by:** ${{ needs.determine-operations.outputs.event_name }}" >> "$GITHUB_STEP_SUMMARY"
          echo "**Repository:** [\`${{ github.repository }}\`](https://github.com/${{ github.repository }})" >> "$GITHUB_STEP_SUMMARY"
          echo "**Actor:** ${{ needs.determine-operations.outputs.triggered_by }}" >> "$GITHUB_STEP_SUMMARY"
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          operations="${{ needs.determine-operations.outputs.operations }}"
          if [[ "$operations" == "[]" ]]; then
            echo "## 📝 Result" >> "$GITHUB_STEP_SUMMARY"
            echo "No operations were required for this event." >> "$GITHUB_STEP_SUMMARY"
          else
            echo "## 📊 Operations Executed" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"

            # Parse operations and show status
            echo "$operations" | jq -r '.[]' | while read -r op; do
              if [[ "${{ needs.issue-management.result }}" == "success" ]]; then
                echo "- ✅ \`$op\` - Completed successfully" >> "$GITHUB_STEP_SUMMARY"
              elif [[ "${{ needs.issue-management.result }}" == "failure" ]]; then
                echo "- ❌ \`$op\` - Failed" >> "$GITHUB_STEP_SUMMARY"
              else
                echo "- ⏭️ \`$op\` - Skipped" >> "$GITHUB_STEP_SUMMARY"
              fi
            done
          fi

          # Show changed files if any
          if [[ "${{ steps.collect.outputs.has_changes }}" == "true" ]]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "## 📁 Files Modified in This Workflow" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"

            IFS=',' read -ra files <<< "${{ steps.collect.outputs.changed_files }}"
            for file in "${files[@]}"; do
              if [[ -n "$file" ]]; then
                # Create link to the file in the repository
                echo "- [\`$file\`](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/$file)" >> "$GITHUB_STEP_SUMMARY"
              fi
            done
          else
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "## 📁 Files Modified" >> "$GITHUB_STEP_SUMMARY"
            echo "No files were modified during this workflow run." >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "## 📖 Configuration" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Operations mode:** \`${{ inputs.operations }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Dry run:** ${{ inputs.dry_run }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Force update:** ${{ inputs.force_update }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Issue updates file:** \`${{ inputs.issue_updates_file }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Issue updates directory:** \`${{ inputs.issue_updates_directory }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Cleanup issue updates:** ${{ inputs.cleanup_issue_updates }}" >> "$GITHUB_STEP_SUMMARY"

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "## 🔗 Quick Links" >> "$GITHUB_STEP_SUMMARY"
          echo "- [🔄 Workflow runs](https://github.com/${{ github.repository }}/actions)" >> "$GITHUB_STEP_SUMMARY"
          echo "- [🐛 Issues](https://github.com/${{ github.repository }}/issues)" >> "$GITHUB_STEP_SUMMARY"
          echo "- [🔒 Security alerts](https://github.com/${{ github.repository }}/security)" >> "$GITHUB_STEP_SUMMARY"
          echo "- [📋 Pull requests](https://github.com/${{ github.repository }}/pulls)" >> "$GITHUB_STEP_SUMMARY"
          echo "- [🏠 ghcommon repository](https://github.com/jdfalk/ghcommon)" >> "$GITHUB_STEP_SUMMARY"

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "---" >> "$GITHUB_STEP_SUMMARY"
          echo "*This summary was generated by the [Unified Issue Management Workflow](https://github.com/jdfalk/ghcommon/.github/workflows/unified-issue-management.yml) from ghcommon.*" >> "$GITHUB_STEP_SUMMARY"
