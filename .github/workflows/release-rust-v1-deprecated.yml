# file: .github/workflows/release-rust-v1-deprecated.yml
# version: 1.9.3
# guid: b5c6d7e8-f9a0-1b2c-3d4e-5f6a7b8c9d0e
# NOTE: Deprecated workflow retained for archival; use reusable-release.yml instead.

name: Rust Release Build

on:
  workflow_call:
    inputs:
      protobuf-artifacts:
        description: "Whether protobuf artifacts are available"
        required: false
        type: string
        default: "false"
      release-version:
        description: "Release tag (e.g., v1.2.3) used to align crate metadata"
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  # Rust cross-platform build with comprehensive support
  build-rust:
    name: Build Rust (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x86_64
            primary: true
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-arm64
            primary: false
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-x86_64-musl
            primary: false
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x86_64
            primary: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download protobuf artifacts
        if: inputs.protobuf-artifacts == 'true'
        uses: actions/download-artifact@v6
        with:
          name: protobuf-generated

      - name: Debug environment and detect version
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "üîç Environment Debug Information"
          echo "================================="
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Input release-version: '${{ inputs.release-version }}'"
          echo ""

          if [ ! -f Cargo.toml ]; then
            echo "‚ùå No Cargo.toml found - this workflow expects a Rust crate."
            echo "üìÇ Contents of current directory:"
            ls -la
            exit 1
          fi

          echo "üìã Found existing Cargo.toml:"
          head -10 Cargo.toml
          echo ""

          INPUT_VERSION="${{ inputs.release-version }}"
          VERSION=""
          if [ -n "${INPUT_VERSION}" ] && [ "${INPUT_VERSION}" != "--workspace" ]; then
            VERSION="${INPUT_VERSION#v}"
            echo "‚úÖ Using input version: ${VERSION}"
          else
            echo "üåê Querying GitHub API for latest release..."
            API_RESPONSE=$(curl -sS -H "Authorization: token ${GITHUB_TOKEN}" -w "HTTPSTATUS:%{http_code}" "https://api.github.com/repos/${{ github.repository }}/releases/latest" || true)
            HTTP_STATUS=${API_RESPONSE##*HTTPSTATUS:}
            BODY=${API_RESPONSE%HTTPSTATUS:*}
            echo "üì° API HTTP Status: ${HTTP_STATUS}"

            if [ "${HTTP_STATUS}" = "200" ]; then
              LATEST_RELEASE=$(echo "${BODY}" | jq -r '.tag_name // empty')
              if [ -n "${LATEST_RELEASE}" ]; then
                LATEST_VERSION=${LATEST_RELEASE#v}
                echo "üè∑Ô∏è Latest release: ${LATEST_VERSION}"
                IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_VERSION}"
                MAJOR=${MAJOR:-0}
                MINOR=${MINOR:-0}
                PATCH=${PATCH:-0}
                VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
                echo "üÜô Generated new version: ${VERSION}"
              else
                echo "‚ö†Ô∏è No existing releases detected; defaulting to 0.1.0"
                VERSION="0.1.0"
              fi
            else
              echo "‚ö†Ô∏è API call failed; defaulting to 0.1.0"
              VERSION="0.1.0"
            fi
          fi

          if [ "${VERSION}" = "--workspace" ] || [ -z "${VERSION}" ]; then
            VERSION="0.1.0-emergency.$(date +%Y%m%d%H%M%S)"
            echo "::warning::Invalid version value; using fallback ${VERSION}"
          elif ! [[ "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            VERSION="0.1.0-dev.$(date +%Y%m%d%H%M%S)"
            echo "::warning::Version '${VERSION}' does not match semver; using fallback ${VERSION}"
          fi

          echo "‚úÖ Final version: ${VERSION}"

          if ! command -v cargo-set-version >/dev/null 2>&1; then
            echo "üì¶ Installing cargo-set-version..."
            cargo install cargo-set-version --locked
          fi

          echo "üîß Setting crate version to: ${VERSION}"
          if ! cargo set-version "${VERSION}"; then
            echo "::error::Failed to update crate version via cargo-set-version"
            exit 1
          fi

          echo "üìã Verifying Cargo.toml after version update:"
          grep "^version" Cargo.toml || echo "::error::No version line found in Cargo.toml"

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ matrix.target }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-${{ matrix.target }}
            ${{ runner.os }}-cargo-registry

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ matrix.target }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-${{ matrix.target }}
            ${{ runner.os }}-cargo-index

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.target }}
            ${{ runner.os }}-cargo-build

      - name: Run Clippy
        if: matrix.primary
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        if: matrix.primary
        run: cargo test --verbose

      - name: Build release binary
        run: |
          set -euo pipefail
          TARGET="${{ matrix.target }}"

          case "${TARGET}" in
            aarch64-unknown-linux-gnu)
              export CC=aarch64-linux-gnu-gcc
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
              ;;
            x86_64-unknown-linux-musl)
              export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc
              ;;
          esac

          cargo build --release --target "${TARGET}"

      - name: Prepare binary (Unix)
        if: runner.os != 'Windows'
        run: |
          set -euo pipefail
          APP_NAME=$(basename "$PWD")
          TARGET="${{ matrix.target }}"
          OUTPUT="dist/${APP_NAME}-${{ matrix.name }}"

          mkdir -p dist
          cp "target/${TARGET}/release/${APP_NAME}" "${OUTPUT}"
          chmod +x "${OUTPUT}"

      - name: Prepare binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $appName = Split-Path -Leaf (Get-Location)
          $targetDir = "target/${{ matrix.target }}/release"
          New-Item -ItemType Directory -Path dist -Force | Out-Null
          Copy-Item "$targetDir/$appName.exe" "dist/$appName-${{ matrix.name }}.exe" -Force

      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: rust-${{ matrix.name }}
          path: dist/

  publish-rust-crate:
    name: Publish Rust Crate
    runs-on: ubuntu-latest
    needs: build-rust
    if: startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Collect crate metadata
        id: crate-metadata
        run: |
          python3 .github/workflows/scripts/collect_rust_crate_metadata.py

      - name: Align crate version with release input
        id: resolved-version
        env:
          INPUT_RELEASE_VERSION: ${{ inputs.release-version }}
          CRATE_NAME: ${{ steps.crate-metadata.outputs.crate-name }}
          CURRENT_VERSION: ${{ steps.crate-metadata.outputs.crate-version }}
        run: |
          set -euo pipefail

          : "${CRATE_NAME:?CRATE_NAME not set}"
          : "${CURRENT_VERSION:?CURRENT_VERSION not set}"

          crate_name="${CRATE_NAME}"
          current_version="${CURRENT_VERSION}"
          target_version="${CURRENT_VERSION}"

          if [[ -n "${INPUT_RELEASE_VERSION}" ]]; then
            stripped="${INPUT_RELEASE_VERSION#v}"
            stripped="${stripped#V}"
            if [[ -n "${stripped}" ]]; then
              target_version="${stripped}"
            fi
          fi

          if [[ "${target_version}" != "${current_version}" ]]; then
            echo "Updating crate version from ${current_version} to ${target_version}"
            if ! command -v cargo-set-version >/dev/null 2>&1; then
              cargo install cargo-set-version --locked
            fi
            cargo set-version "${target_version}"
          else
            echo "Crate version already ${target_version}"
          fi

          tag_ref="${GITHUB_REF#refs/tags/}"
          tag_version="${tag_ref#v}"
          if [[ "${tag_version}" != "${target_version}" ]]; then
            echo "::warning::Git tag (${tag_version}) does not match crate version (${target_version})"
          else
            echo "Tag matches crate version (${tag_version})"
          fi

          {
            echo "CRATE_NAME=${crate_name}"
            echo "CRATE_VERSION=${target_version}"
          } >> "$GITHUB_ENV"

          {
            echo "crate-name=${crate_name}"
            echo "crate-version=${target_version}"
            echo "tag-version=${tag_version}"
          } >> "$GITHUB_OUTPUT"

      - name: Configure Cargo for GitHub Packages
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 .github/workflows/scripts/configure_cargo_registry.py

      - name: Check if version already published
        id: check-published
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
        run: |
          set -euo pipefail

          : "${CRATE_NAME:?CRATE_NAME not set}"
          : "${CRATE_VERSION:?CRATE_VERSION not set}"
          : "${OWNER:?OWNER not set}"

          crate="${CRATE_NAME}"
          version="${CRATE_VERSION}"
          owner="${OWNER}"

          already="false"
          resolved_scope="unknown"

          for scope in orgs users; do
            api_url="https://api.github.com/${scope}/${owner}/packages/cargo/${crate}/versions"
            echo "Checking ${api_url}..."

            response="$(curl -sS -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github+json" -w "HTTPSTATUS:%{http_code}" "${api_url}" || true)"

            http_status="${response##*HTTPSTATUS:}"
            body="${response%HTTPSTATUS:*}"

            if [[ "${http_status}" == "200" ]]; then
              resolved_scope="${scope}"
              versions="$(echo "${body}" | jq -r '.[].name // empty')"
              if [[ -n "${versions}" ]]; then
                echo "Found published versions:"
                echo "${versions}" | head -10 | sed 's/^/  - /'
                if echo "${versions}" | grep -qx "${version}"; then
                  echo "‚ö†Ô∏è  Version ${version} already published"
                  already="true"
                fi
              else
                echo "No versions reported yet."
              fi
              break
            elif [[ "${http_status}" == "404" ]]; then
              echo "Package not found under ${scope}. Trying next scope..."
            else
              echo "::warning::Unexpected response (${http_status}) while checking ${scope} scope"
            fi
          done

          echo "already-published=${already}" >> "${GITHUB_OUTPUT}"
          echo "registry-scope=${resolved_scope}" >> "${GITHUB_OUTPUT}"

      - name: Publish crate to GitHub Packages
        if: steps.check-published.outputs.already-published != 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "üì§ Publishing ${CRATE_NAME}@${CRATE_VERSION} to GitHub Package Registry"
          cargo publish \
            --registry github \
            --verbose \
            --allow-dirty \
            --no-verify
          echo "‚úÖ Publish command completed"

      - name: Verify publication
        if: steps.check-published.outputs.already-published != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
        run: |
          set -euo pipefail

          : "${CRATE_NAME:?CRATE_NAME not set}"
          : "${OWNER:?OWNER not set}"

          crate="${CRATE_NAME}"
          owner="${OWNER}"
          scope="${{ steps.check-published.outputs.registry-scope }}"

          if [[ "${scope}" == "unknown" ]]; then
            scopes=(orgs users)
          else
            scopes=("${scope}")
          fi

          for attempt in {1..5}; do
            for sc in "${scopes[@]}"; do
              api_url="https://api.github.com/${sc}/${owner}/packages/cargo/${crate}"
              echo "Attempt ${attempt}/5 checking ${api_url}"

              response="$(curl -sS -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                -H "Accept: application/vnd.github+json" -w "HTTPSTATUS:%{http_code}" "${api_url}" || true)"

              http_status="${response##*HTTPSTATUS:}"
              body="${response%HTTPSTATUS:*}"

              if [[ "${http_status}" == "200" ]]; then
                echo "‚úÖ Package visible in registry (${sc})"
                echo "Package details:"
                echo "${body}" | jq -r '"  Name: \(.name)\n  Visibility: \(.visibility)\n  URL: \(.html_url)"'
                exit 0
              fi
            done

            if [[ "${attempt}" -lt 5 ]]; then
              echo "Package not visible yet. Waiting 10 seconds..."
              sleep 10
            fi
          done

          echo "::warning::Package ${crate} not yet visible via API. It may take a few minutes to propagate."

      - name: Skip publication (already published)
        if: steps.check-published.outputs.already-published == 'true'
        run: |
          echo "‚ÑπÔ∏è  Skipping publish because ${CRATE_NAME}@${CRATE_VERSION} already exists."
          echo "Check https://github.com/${{ github.repository }}/packages for details."

      - name: Create publication summary
        if: always()
        run: |
          status="${{ job.status }}"
          already="${{ steps.check-published.outputs.already-published }}"

          {
            echo "# üì¶ Rust Crate Publication"
            echo ""
            echo "- **Crate**: \`${CRATE_NAME}\`"
            echo "- **Version**: \`${CRATE_VERSION}\`"
            echo "- **Repository**: \`${{ github.repository }}\`"
            echo "- **Tag**: \`${GITHUB_REF#refs/tags/}\`"
            echo ""
            if [[ "${already}" == "true" ]]; then
              echo "**Status:** ‚è≠Ô∏è Skipped (version already published)"
            elif [[ "${status}" == "success" ]]; then
              echo "**Status:** ‚úÖ Published to GitHub Packages"
            else
              echo "**Status:** ‚ùå Publication failed"
            fi
            echo ""
            echo "## üîó Useful Links"
            echo "- Package listing: https://github.com/${{ github.repository }}/packages"
            echo "- Registry index: https://api.github.com/${{ github.repository }}/cargo/"
            echo "- Release tag: https://github.com/${{ github.repository }}/releases/tag/${GITHUB_REF#refs/tags/}"
            echo ""
            echo "## üìö Consuming the crate"
            echo "\`\`\`toml"
            echo "${CRATE_NAME} = \"${CRATE_VERSION}\""
            echo "\`\`\`"
            echo ""
            echo "Configure \`.cargo/config.toml\`:"
            echo "\`\`\`toml"
            echo "[registries.github]"
            echo "index = \"sparse+https://api.github.com/${{ github.repository }}/cargo/\""
            echo "\`\`\`"
          } >> "${GITHUB_STEP_SUMMARY}"
