# file: .github/workflows/reusable-docker-build.yml
name: "reusable-docker-build: Multi-Arch Docker Build and Publish"

on:
  workflow_call:
    inputs:
      image-name:
        description: "Container image name (without registry)"
        required: true
        type: string
      registry:
        description: "Container registry URL"
        required: false
        default: "ghcr.io"
        type: string
      dockerfile:
        description: "Path to Dockerfile"
        required: false
        default: "./Dockerfile"
        type: string
      context:
        description: "Build context path"
        required: false
        default: "."
        type: string
      platforms:
        description: "Target platforms (comma-separated)"
        required: false
        default: "linux/amd64,linux/arm64"
        type: string
      build-args:
        description: "Build arguments (newline-delimited string)"
        required: false
        default: ""
        type: string
      push:
        description: "Push images to registry"
        required: false
        default: true
        type: boolean
      generate-sbom:
        description: "Generate SBOM (Software Bill of Materials)"
        required: false
        default: true
        type: boolean
      generate-attestation:
        description: "Generate build attestation"
        required: false
        default: true
        type: boolean
      scan-vulnerability:
        description: "Scan for vulnerabilities"
        required: false
        default: true
        type: boolean
      tag-suffix:
        description: "Additional tag suffix (e.g., -dev, -staging)"
        required: false
        default: ""
        type: string
    secrets:
      gh-token:
        description: "GitHub token with repo access"
        required: true
    outputs:
      image-digest:
        description: "The image digest"
        value: ${{ jobs.build.outputs.digest }}
      image-url:
        description: "The full image URL with digest"
        value: ${{ jobs.build.outputs.image-url }}
      sbom-path:
        description: "Path to generated SBOM"
        value: ${{ jobs.build.outputs.sbom-path }}

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build-and-push.outputs.digest }}
      image-url: ${{ steps.build-and-push.outputs.image-url }}
      sbom-path: ${{ steps.sbom.outputs.sbom-path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
            network=host

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.gh-token }}

      - name: Set version information
        id: version
        run: |
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
          BUILD_TIME=$(date -u '+%Y-%m-%d_%I:%M:%S%p')
          GIT_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_OUTPUT
          echo "GIT_COMMIT=${GIT_COMMIT}" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}${{ inputs.tag-suffix && format(',{0}', inputs.tag-suffix) || '' }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            VERSION=${{ steps.version.outputs.VERSION }}
            BUILD_TIME=${{ steps.version.outputs.BUILD_TIME }}
            GIT_COMMIT=${{ steps.version.outputs.GIT_COMMIT }}
            ${{ inputs.build-args }}

      - name: Generate SBOM
        id: sbom
        if: inputs.generate-sbom == true
        run: |
          IMAGE_URL="${{ steps.build-and-push.outputs.image-url }}"
          SBOM_PATH="./sbom.spdx.json"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/output anchore/syft:latest "$IMAGE_URL" -o spdx-json > "$SBOM_PATH" || echo '{}' > "$SBOM_PATH"
          echo "sbom-path=$SBOM_PATH" >> $GITHUB_OUTPUT

      - name: Upload SBOM artifact
        if: inputs.generate-sbom == true
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: ${{ steps.sbom.outputs.sbom-path }}
          retention-days: 30

      - name: Vulnerability scan
        if: inputs.scan-vulnerability == true
        run: |
          IMAGE_URL="${{ steps.build-and-push.outputs.image-url }}"
          docker run --rm anchore/grype:latest "$IMAGE_URL" -o json > vulnerability-report.json || true
          docker run --rm anchore/grype:latest "$IMAGE_URL" -o table || true

      - name: Upload vulnerability report
        if: inputs.scan-vulnerability == true
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report-${{ github.sha }}
          path: vulnerability-report.json
          retention-days: 30

      - name: Generate build attestation
        if: inputs.generate-attestation == true && inputs.push == true
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          IMAGE_URL="${{ steps.build-and-push.outputs.image-url }}"
          cat > attestation.json << EOF
          {
            "buildType": "https://github.com/actions/runner",
            "builder": {
              "id": "https://github.com/actions/runner"
            },
            "invocation": {
              "configSource": {
                "uri": "${{ github.server_url }}/${{ github.repository }}",
                "digest": {
                  "sha1": "${{ github.sha }}"
                }
              }
            },
            "metadata": {
              "buildStartedOn": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
              "completeness": {
                "parameters": true,
                "environment": false,
                "materials": false
              },
              "reproducible": false
            },
            "materials": [
              {
                "uri": "${{ github.server_url }}/${{ github.repository }}",
                "digest": {
                  "sha1": "${{ github.sha }}"
                }
              }
            ]
          }
          EOF
          docker run --rm -v $(pwd):/workspace gcr.io/projectsigstore/cosign:v2.2.3 attest --predicate attestation.json "$IMAGE_URL" --yes

      - name: Sign container image
        if: inputs.push == true
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          IMAGE_URL="${{ steps.build-and-push.outputs.image-url }}"
          docker run --rm -v $(pwd):/workspace gcr.io/projectsigstore/cosign:v2.2.3 sign "$IMAGE_URL" --yes
