// file: proto/gcommon/v1/queue.proto
// version: 1.0.0
// guid: e1209e8d-4fe2-4b4c-8e0a-33e998b50b8a
syntax = "proto3";
package gcommon.v1;
edition = "2023";

option go_package = "github.com/jdfalk/gcommon/proto/gcommon/v1;gcommonv1";

// QueueItem represents a single item in the queue.
message QueueItem {
  // Unique identifier for the item.
  string id = 1;

  // Payload data associated with the item.
  bytes data = 2;

  // Optional metadata for routing or processing.
  map<string, string> metadata = 3;
}

// EnqueueRequest adds an item to the queue.
message EnqueueRequest {
  QueueItem item = 1; // Item to enqueue.
}

// EnqueueResponse contains the enqueued item's identifier.
message EnqueueResponse {
  string id = 1; // Identifier assigned to the enqueued item.
}

// DequeueRequest retrieves the next item from the queue.
message DequeueRequest {
  // Maximum number of items to return.
  uint32 max_items = 1;
}

// DequeueResponse returns one or more queued items.
message DequeueResponse {
  repeated QueueItem items = 1; // Items dequeued from the queue.
}

// AcknowledgeRequest acknowledges successful processing of an item.
message AcknowledgeRequest {
  repeated string ids = 1; // Identifiers of items to acknowledge.
}

// AcknowledgeResponse confirms acknowledgement.
message AcknowledgeResponse {
  repeated string acknowledged_ids = 1; // Acknowledged item identifiers.
}

// QueueService defines basic queue operations.
service QueueService {
  // Enqueue adds an item to the queue and returns its identifier.
  rpc Enqueue(EnqueueRequest) returns (EnqueueResponse);

  // Dequeue retrieves items from the queue for processing.
  rpc Dequeue(DequeueRequest) returns (DequeueResponse);

  // Acknowledge confirms processing of items and removes them from the queue.
  rpc Acknowledge(AcknowledgeRequest) returns (AcknowledgeResponse);
}
