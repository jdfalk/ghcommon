# file: templates/workflows/complete-ci-cd.yml
# Complete CI/CD Pipeline Template
# This template demonstrates a full CI/CD pipeline using all reusable workflows
# Copy this to .github/workflows/ in your repository and customize as needed

name: Complete CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  # Registry configuration - customize these
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Semantic versioning for PRs and main branch
  versioning:
    name: Calculate Version
    runs-on: ubuntu-latest
    if: github.event_name != 'release'
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-tag: ${{ steps.version.outputs.version-tag }}
      should-release: ${{ steps.version.outputs.should-release }}
    steps:
      - name: Calculate semantic version
        id: version
        uses: jdfalk/ghcommon/.github/workflows/semantic-versioning.yml@main
        with:
          dry-run: ${{ github.event_name == 'pull_request' }}
          version-files: '["package.json", "version.txt"]'
          update-pr-title: true

  # Build and test
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [versioning]
    if: always() && (needs.versioning.result == 'success' || needs.versioning.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build environment
        run: |
          # Add your build setup here
          echo "Setting up build environment..."
          # Example: npm install, go mod download, pip install -r requirements.txt

      - name: Run tests
        run: |
          # Add your test commands here
          echo "Running tests..."
          # Example: npm test, go test ./..., pytest

      - name: Build application
        run: |
          # Add your build commands here
          echo "Building application..."
          # Example: npm run build, go build, python setup.py build

      - name: Generate checksums
        run: |
          # Generate checksums for build artifacts
          find . -name "*.tar.gz" -o -name "*.zip" -o -name "*.deb" -o -name "*.rpm" | xargs sha256sum > checksums.txt || echo "No artifacts to checksum"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            dist/
            build/
            *.tar.gz
            *.zip
            *.deb
            *.rpm
            checksums.txt
          retention-days: 30

  # Container build (only for main branch and releases)
  container:
    name: Build Container
    uses: jdfalk/ghcommon/.github/workflows/buildah-multiarch.yml@main
    needs: [versioning, build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    with:
      image-name: ${{ github.event.repository.name }}
      registry: ghcr.io
      dockerfile: ./Dockerfile
      context: .
      platforms: linux/amd64,linux/arm64
      build-args: |
        {
          "VERSION": "${{ needs.versioning.outputs.version || github.ref_name }}",
          "BUILD_TIME": "${{ github.event.head_commit.timestamp }}",
          "COMMIT_SHA": "${{ github.sha }}"
        }
      push: true
      generate-sbom: true
      generate-attestation: true
      scan-vulnerability: true
      tag-suffix: ${{ github.ref != 'refs/heads/main' && '-dev' || '' }}
    secrets: inherit

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  # Automatic release (only on main branch when conditions are met)
  release:
    name: Create Release
    uses: jdfalk/ghcommon/.github/workflows/automatic-release.yml@main
    needs: [versioning, build, container]
    if: |
      github.ref == 'refs/heads/main' &&
      needs.versioning.outputs.should-release == 'true' &&
      needs.container.result == 'success'
    with:
      release-type: auto
      prerelease: false
      draft: false
      generate-notes: true
      include-artifacts: true
      artifact-patterns: '["*.tar.gz", "*.zip", "*.deb", "*.rpm", "checksums.txt", "*.sbom.json"]'
      container-image: ${{ needs.container.outputs.image-url }}
      # Uncomment and configure these if you want notifications
      # slack-webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
      # teams-webhook: ${{ secrets.TEAMS_WEBHOOK_URL }}
    secrets: inherit

  # Deployment (customize based on your deployment strategy)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [release, container]
    if: github.ref == 'refs/heads/main' && needs.release.result == 'success'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying version ${{ needs.release.outputs.release-tag }}"
          echo "Container image: ${{ needs.container.outputs.image-url }}"
          # Add your deployment logic here
          # Examples:
          # - kubectl set image deployment/app app=${{ needs.container.outputs.image-url }}
          # - helm upgrade app ./chart --set image.tag=${{ needs.release.outputs.release-tag }}
          # - Update AWS ECS service
          # - Deploy to serverless platform

  # Cleanup artifacts (optional)
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [release, deploy]
    if: always()
    steps:
      - name: Cleanup old artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Clean up old artifacts to save storage
          gh api repos/${{ github.repository }}/actions/artifacts \
            --jq '.artifacts[] | select(.created_at < (now - 86400 * 30 | strftime("%Y-%m-%dT%H:%M:%SZ"))) | .id' \
            | xargs -I {} gh api repos/${{ github.repository }}/actions/artifacts/{} -X DELETE || true
