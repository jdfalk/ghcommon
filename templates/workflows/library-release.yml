# file: templates/workflows/library-release.yml
# Library/Package Release Template
# This template is for libraries, packages, or tools that need semantic versioning and releases
# Copy this to .github/workflows/ in your repository and customize as needed

name: Library Release

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Test and validate
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Customize based on your language/runtime
        version: ["18", "20", "21"] # Node.js versions
        # python-version: ['3.8', '3.9', '3.10', '3.11']  # Python versions
        # go-version: ['1.19', '1.20', '1.21']  # Go versions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.version }}
          cache: "npm"

      # Customize based on your language
      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Run integration tests
        run: npm run test:integration

      - name: Generate coverage report
        run: npm run coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # Version calculation
  versioning:
    name: Calculate Version
    uses: jdfalk/ghcommon/.github/workflows/semantic-versioning.yml@main
    needs: [test]
    with:
      dry-run: ${{ github.event_name == 'pull_request' }}
      version-files: '["package.json", "package-lock.json"]' # Customize for your language
      update-pr-title: true
    secrets: inherit

  # Build package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, versioning]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Package for distribution
        run: |
          npm pack
          tar -czf dist.tar.gz dist/

      - name: Generate checksums
        run: sha256sum *.tgz dist.tar.gz > checksums.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ github.sha }}
          path: |
            *.tgz
            dist.tar.gz
            checksums.txt
          retention-days: 30

  # Create release
  release:
    name: Create Release
    uses: jdfalk/ghcommon/.github/workflows/automatic-release.yml@main
    needs: [versioning, build]
    if: |
      github.ref == 'refs/heads/main' &&
      needs.versioning.outputs.should-release == 'true'
    with:
      release-type: auto
      generate-notes: true
      include-artifacts: true
      artifact-patterns: '["*.tgz", "*.tar.gz", "checksums.txt"]'
    secrets: inherit

  # Publish to package registry
  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.result == 'success'
    environment: npm # Use environment protection for publishing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

      # Example for other package managers:
      # - name: Publish to PyPI (Python)
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      #   run: |
      #     python -m pip install --upgrade twine
      #     python -m twine upload dist/*

      # - name: Publish to Go Proxy (Go)
      #   run: |
      #     GOPROXY=proxy.golang.org go list -m github.com/${{ github.repository }}@${{ needs.release.outputs.release-tag }}
